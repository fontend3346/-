(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.PIE = {}));
}(this, (function (exports) { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;

        var F = function () {};

        return {
          s: F,
          n: function () {
            if (i >= o.length) return {
              done: true
            };
            return {
              done: false,
              value: o[i++]
            };
          },
          e: function (e) {
            throw e;
          },
          f: F
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true,
        didErr = false,
        err;
    return {
      s: function () {
        it = it.call(o);
      },
      n: function () {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function (e) {
        didErr = true;
        err = e;
      },
      f: function () {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }

  function PIEString$1(value) {
    var type = _typeof(value);

    if (type == 'string') {
      //this.handle = Module.allocate(intArrayFromString(value), 1);
      this.handle = Module.allocateUTF8(value);
    } else if (type == 'number') {
      this.handle = Module._malloc(value);
    } else {
      this.handle = null;
    }
  }

  Object.assign(PIEString$1.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.handle != null) {
        Module._free(this.handle);

        this.handle = null;
      }
    },
    toString: function toString() {
      if (this.handle != null) {
        return Module.UTF8ToString(this.handle);
      }

      return null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 动画基础操作函数
   * @name Action
   */

  function PIEAction(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEAction.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     *  删除action对象
     *  @memberOf Action#
     */
    dispose: function dispose() {
      Module._Action_Delete(this.handle);
    },

    /**
     *  设置是否自动释放Action
     *  @param {Boolean} autoRelease -是否自动释放
     *  @memberOf Action#
     *
     */
    setAutoRelease: function setAutoRelease(autoRelease) {
      Module._Action_SetAutoRelease(this.handle, autoRelease);
    },

    /**
     *  判断是否自动释放Action
     *
     *  @memberOf Action#
     *  @returns {Boolean} 自动释放返回true,否则返回false
     */
    isAutoRelease: function isAutoRelease() {
      return Boolean(Module._Action_IsAutoRelease(this.handle));
    },

    /**
     *  设置添加动画标签
     * @param {String} tag -动画标签
     * @memberOf Action#
     *
     */
    setTag: function setTag(tag) {
      var strTag = new PIEString$1(tag);

      Module._Action_SetTag(this.handle, strTag.getHandle());

      strTag.dispose();
    },

    /**
     * 获取动画标签
     *
     * @memberOf Action#
     * @returns {String}  返回动画标签
     */
    getTag: function getTag() {
      var strTag = new PIEString$1(256);

      Module._Action_GetTag(this.handle, strTag.getHandle());

      var tag = strTag.toString();
      strTag.dispose();
      return tag;
    },

    /**
     * 暂停动画
     * @memberOf Action#
     *
     */
    pause: function pause() {
      Module._IntervalAction_Pause(this.handle);
    },

    /**
     * 播放动画
     * @memberOf Action#
     *
     */
    play: function play() {
      Module._IntervalAction_Play(this.handle);
    },

    /**
     * 跳转到某个时刻
     * @param {Number} t -跳转时间
     * @memberOf Action#
     *
     */
    seek: function seek(t) {
      Module._IntervalAction_Seek(this.handle, t);
    },

    /**
     * 停止动画
     * @memberOf Action#
     *
     */
    stop: function stop() {
      Module._IntervalAction_Stop(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   * 闪烁动画操作函数
   * @name BlinkAction
   * @param {Object} options -
   * @param {Number} options.duration -运行时间
   * @param {Number} options.times -闪烁次数
   * @class BlinkAction
   * 创建闪烁动画对象
   *
   * @extends Action
   */

  function PIEBlinkAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration;
      var times = options.times;
      handle = Module._BlinkAction_Create(duration, times);
      autoRelease = true;
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEAction.call(this, handle, autoRelease);
  }

  PIEBlinkAction.prototype = Object.assign(Object.create(PIEAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */
  /**
   * 渲染对象移动动画操作函数
   * @name MoveableAction
   * @extends Action
   */

  function PIEMoveableAction(handle, autoRelease) {
    PIEAction.call(this, handle, autoRelease);
  }

  PIEMoveableAction.prototype = Object.assign(Object.create(PIEAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 二维向量类
   * @name Vector2
   * @class Vector2
   *
   * @param {Number} x -x值
   * @param {Number} y -y值
   */
  function PIEVector2(x, y) {
    this.x = x || 0;
    this.y = y || 0;
  }

  Object.assign(PIEVector2.prototype, {
    /**
     * 进行规格化
     * @memberOf Vector2#
     *
     */
    normalize: function normalize() {
      var length = this.length();

      if (length != 0) {
        this.x /= length;
        this.y /= length;
      }
    },

    /**
     * 进行归一化
     *
     * @memberOf Vector2#
     * @returns {PIEVector2} 返回归一化后的向量
     *
     */
    normalized: function normalized() {
      var v = new PIEVector2(this.x, this.y);
      v.normalize();
      return v;
    },

    /**
     * 求向量的长度
     *
     * @memberOf Vector2#
     * @returns {number} 返回向量的长度
     *
     */
    length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y);
    },

    /**
     * 自身缩放
     * @param {Number} s -value
     * @memberOf Vector2#
     *
     * @returns {PIEVector2} 返回缩放后的向量
     *
     */
    scale: function scale(s) {
      return new PIEVector2(this.x * s, this.y * s);
    },

    /**
     * 向量相减
     * @param {PIEVector2} vec -二维向量
     * @memberOf Vector2#
     *
     * @returns {PIEVector2} 返回相减后的向量
     */
    sub: function sub(vec) {
      return new PIEVector2(this.x - vec.x, this.y - vec.y);
    },

    /**
     * 向量相加
     * @param {PIEVector2} vec -二维向量
     * @memberOf Vector2#
     *
     * @returns {PIEVector2} 返回相加后的向量
     *
     */
    add: function add(vec) {
      return new PIEVector2(this.x + vec.x, this.y + vec.y);
    },

    /**
     * 向量相乘
     * @param {PIEVector2} vec -二维向量
     * @memberOf Vector2#
     *
     * @returns {PIEVector2} 返回相加后的向量
     *
     */
    multiply: function multiply(vec) {
      this.x *= vec.x;
      this.y *= vec.y;
      return this;
    },

    /**
     * 克隆向量
     *
     * @memberOf Vector2#
     * @returns {PIEVector2} 返回克隆后的向量
     *
     */
    clone: function clone() {
      return new PIEVector2(this.x, this.y);
    },
    toArray: function toArray() {
      return [this.x, this.y];
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 数学模块
   * @name Math
   * @interface
   */

  function PIEMath() {}
  /**
   * 极小值定义
   *
   * @memberOf Math
   */


  PIEMath.EP = 1e-13;
  /**
   * 弧度转角度
   *
   * @memberOf Math
   */

  PIEMath.RTOD = 57.295779513082320876798154814;
  /**
   * 角度转弧度
   *
   * @memberOf Math
   */

  PIEMath.DTOR = 0.0174532925199432957692369077;
  /**
   * 地球半径
   *
   * @memberOf Math
   */

  PIEMath.EARTH_RADIUS = 6378137;
  /**
   * 地球周长
   *
   * @memberOf Math
   */

  PIEMath.EARTH_CIRCUM = 2 * Math.PI * PIEMath.EARTH_RADIUS;
  PIEMath.EARTH_LTOWRATIO = 0.762; // (423.0 / 555.0)

  /**
   * double最大值
   *
   * @memberOf Math
   */

  PIEMath.DBLMAX = 1.7976931348623158e+308;
  /**
   * double最小值
   *
   * @memberOf Math
   */

  PIEMath.DBLMIN = 2.2250738585072014e-308;
  /**
   * float 最大值
   *
   * @memberOf Math
   */

  PIEMath.FLTMAX = 3.402823466e+38;
  /**
   * float 最小值
   *
   * @memberOf Math
   */

  PIEMath.FLTMIN = 1.175494351e-38;

  PIEMath.round = function (value) {
    return value > 0 ? value + 0.5 : value - 0.5;
  };
  /**
   * 给出弧度计算点旋转(逆时针方向)
   * @param {PIEVector2} pntAnchor -中心点
   * @param {Number} dRadian -顺时针旋转角度
   * @param {PIEVector2} pntSource -待旋转坐标点
   *
   * @memberOf Math
   */


  PIEMath.rotateRadian = function (pntAnchor, dRadian, pntSource) {
    var dCos = Math.cos(dRadian);
    var dSin = Math.sin(dRadian);
    var xx = pntSource.x - pntAnchor.x;
    var yy = pntSource.y - pntAnchor.y;
    pntSource.x = xx * dCos - yy * dSin + pntAnchor.x;
    pntSource.y = xx * dSin + yy * dCos + pntAnchor.y;
    return pntSource;
  };
  /**
   * 给出圆心和半径求圆周上的坐标
   * @param {array} center -圆心点
   * @param {Number} radius -半径
   * @param {Number} count -点个数
   * @returns {array} 返回坐标数组
   * @memberOf Math
   */


  PIEMath.circularPoints = function (center, radius, count) {
    var pointsCircle = [];

    for (var times = 0; times < count; times++) {
      var radian = 2 * Math.PI / count * times;
      var x = center[0] + Math.sin(radian) * radius;
      var y = center[1] - Math.cos(radian) * radius;
      pointsCircle.push(x);
      pointsCircle.push(y);
    }

    return pointsCircle;
  };
  /**
   * 判断是否是零值
   * @param {Number} value -value值
   * @memberOf Math
   * @returns {Boolean} 返回判断结果
   */


  PIEMath.isZero = function (value) {
    return value < 1e-13 && value > -1e-13;
  };
  /**
   * 判断是否相等
   * @param {Number} value1 -value1值
   * @param {Number} value2 -value2值
   * @memberOf Math
   * @returns {Boolean} 返回是否相等
   */


  PIEMath.isEqual = function (value1, value2) {
    if (value1 == 0) {
      return PIEMath.isZero(value2);
    } else if (value2 == 0) {
      return PIEMath.isZero(value1);
    }

    var dMaxValue = Math.max(Math.abs(value1), Math.abs(value2));
    var dAbsolute = value1 - value2;
    return dAbsolute >= -1e-13 * dMaxValue && dAbsolute <= 1e-13 * dMaxValue;
  };

  PIEMath.isEq = function (dValue1, dValue2, dTolerance) {
    if (dTolerance > 0) {
      var dTemp = dValue1 - dValue2;
      return dTemp > -dTolerance && dTemp < dTolerance;
    }

    return false;
  }; // /**
  //  * 矩阵和矩阵相乘
  //  * @param {Number} lhs -左矩阵
  //  * @param {Number} rhs -右矩阵
  //  * @param {Number} out -结果矩阵
  //  *
  //  * @memberOf Math
  //  */
  // PIEMath.multiplyMM = function (lhs, rhs, out) {
  //     var i = 0;
  //     var j = 0;
  //     for (i = 0; i < 4; i++) {
  //         var rhs_i0 = rhs[4 * i];
  //         var ri0 = lhs[0] * rhs_i0;
  //         var ri1 = lhs[1] * rhs_i0;
  //         var ri2 = lhs[2] * rhs_i0;
  //         var ri3 = lhs[3] * rhs_i0;
  //
  //         for (j = 1; j < 4; j++) {
  //             var rhs_ij = rhs[4 * i + j];
  //             ri0 += lhs[4 * j] * rhs_ij;
  //             ri1 += lhs[4 * j + 1] * rhs_ij;
  //             ri2 += lhs[4 * j + 2] * rhs_ij;
  //             ri3 += lhs[4 * j + 3] * rhs_ij;
  //         }
  //
  //         out[4 * i] = ri0;
  //         out[4 * i + 1] = ri1;
  //         out[4 * i + 2] = ri2;
  //         out[4 * i + 3] = ri3;
  //     }
  // }


  PIEMath.compute2DAngleFromY = function (x, y) {
    if (PIEMath.isZero(x)) {
      return 0;
    }

    var dAngle = 0.0;

    if (x < 0 && y > 0) {
      dAngle = Math.PI / 2 - Math.atan(Math.abs(y / x));
    } else if (x < 0 && y < 0) {
      dAngle = Math.atan(Math.abs(y / x)) + Math.PI / 2;
    } else if (x > 0 && y < 0) {
      dAngle = 3 * Math.PI / 2 - Math.atan(Math.abs(y / x));
    } else if (x > 0 && y > 0) {
      dAngle = 3 * Math.PI / 2 + Math.atan(Math.abs(y / x));
    } else if (PIEMath.isZero(y) && x < 0) {
      dAngle = Math.PI / 2;
    } else if (PIEMath.isZero(x) && y < 0) {
      dAngle = Math.PI;
    } else if (PIEMath.isZero(y) && x > 0) {
      dAngle = 3 * Math.PI / 2;
    } else if (PIEMath.isZero(x) && y > 0) {
      dAngle = 0;
    }

    return dAngle;
  };
  /**
   * 球面两点间的距离
   * @param {PIEVector2|Array} pntFrom -经纬坐标
   * @param {PIEVector2|Array} pntTo -经纬坐标
   *
   * @memberOf Math
   */


  PIEMath.sphereDistance = function (pntFrom, pntTo) {
    if (pntFrom instanceof Array) {
      pntFrom = new PIEVector2(pntFrom[0], pntFrom[1]);
    }

    if (pntTo instanceof Array) {
      pntTo = new PIEVector2(pntTo[0], pntTo[1]);
    }

    if (pntFrom.x > 180 || pntFrom.x < -180 || pntTo.x > 180 || pntTo.x < -180 || pntFrom.y > 180 / 2 || pntFrom.y < -180 / 2 || pntTo.y > 180 / 2 || pntTo.y < -180 / 2) {
      return 0;
    }

    var dLongDist = pntFrom.x - pntTo.x;

    if (dLongDist < -180) {
      dLongDist += 2 * 180;
    } else if (dLongDist > 180) {
      dLongDist = 2 * 180 - dLongDist;
    }

    var dPnt1Latitude = pntFrom.y;
    var dPnt2Latitude = pntTo.y;
    var dCospnt1 = Math.cos(dPnt1Latitude * (Math.PI / 180));
    var dCospnt2 = Math.cos(dPnt2Latitude * (Math.PI / 180));
    var dSinpnt1 = Math.sin(dPnt1Latitude * (Math.PI / 180));
    var dSinpnt2 = Math.sin(dPnt2Latitude * (Math.PI / 180));
    var dSinDist = dSinpnt1 - dSinpnt2;
    var dValue = dSinDist * dSinDist + dCospnt1 * dCospnt1 + dCospnt2 * dCospnt2 - 2 * dCospnt1 * dCospnt2 * Math.cos(dLongDist * (Math.PI / 180));

    if (dValue < 0) {
      dValue = 0;
    } //这是以pnt1和pnt2所在大圆的弦长

    var dLength = 2 * Math.asin(Math.sqrt(dValue) / 2) * 6371118;
    return dLength;
  };
  /**
   * 返回范围内的一个数值
   * @param {Number} x -要钳制在范围内的属性或变量
   * @param {Number} lowerlimit -最小数值
   * @param {Number} upperlimit -最大数值
   *
   * @memberOf Math
   * @returns {Number} 如果参数大于范围，将返回最大数值，如果参数小于范围，该函数将返回最小数值
   *
   *
   */


  PIEMath.clamp = function (x, lowerlimit, upperlimit) {
    if (x < lowerlimit) {
      x = lowerlimit;
    } else if (x > upperlimit) {
      x = upperlimit;
    }

    return x;
  }; // /**
  //  * 求解两个值之间的样条插值
  //  * @param {Number} edge0 -样条插值函数的下界
  //  * @param {Number} edge1 -样条插值函数的上界
  //  * @param {Number} x -插值的源输入
  //  *
  //  * @memberOf math#
  //  * @returns {number}
  //  */


  PIEMath.smoothstep = function (edge0, edge1, x) {
    x = PIEMath.clamp((x - edge0) / (edge1 - edge0), 0.0, 1.0);
    return x * x * x * (x * (x * 6 - 15) + 10);
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 三维4阶向量类
   * @name Vector4
   * @class Vector4
   *
   * @param {Number} x -x值
   * @param {Number} y -y值
   * @param {Number} z -z值
   * @param {Number} w -w值
   *
   */
  function PIEVector4(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }

  Object.assign(PIEVector4.prototype, {
    /**
     * 向量相乘
     * @param {PIEVector4} v -向量
     * @memberOf Vector4#
     *
     */
    multiply: function multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      this.w *= v.w;
      return this;
    },

    /**
     * 求向量乘以一个4*4矩阵
     * @param {PIEMatrix4} matrix -4*4矩阵
     * @memberOf Vector4#
     *
     */
    applyMatrix4: function applyMatrix4(m) {
      var x = this.x,
          y = this.y,
          z = this.z,
          w = this.w;
      var e = m.m;
      this.x = e[0] * x + e[4] * y + e[8] * z + e[12] * w;
      this.y = e[1] * x + e[5] * y + e[9] * z + e[13] * w;
      this.z = e[2] * x + e[6] * y + e[10] * z + e[14] * w;
      this.w = e[3] * x + e[7] * y + e[11] * z + e[15] * w;
      return this;
    },
    toArray: function toArray() {
      return [this.x, this.y, this.z, this.w];
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建四维矩阵
   * @name Matrix4
   * @class Matrix4
   * 四维矩阵操作函数
   */
  function PIEMatrix4() {
    this.m = new Float32Array(16);
    {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = 1;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = 1;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 1;
    }
  }

  Object.assign(PIEMatrix4.prototype, {
    /**
     * 创建矩阵
     * @param {Number} m0
     * @param {Number} m1
     * @param {Number} m2
     * @param {Number} m3
     * @param {Number} m4
     * @param {Number} m5
     * @param {Number} m6
     * @param {Number} m7
     * @param {Number} m8
     * @param {Number} m9
     * @param {Number} m10
     * @param {Number} m11
     * @param {Number} m12
     * @param {Number} m13
     * @param {Number} m14
     * @param {Number} m15
     *
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回创建的矩阵
     */
    create: function create(m0, m4, m8, m12, m1, m5, m9, m13, m2, m6, m10, m14, m3, m7, m11, m15) {
      this.m[0] = m0;
      this.m[1] = m1;
      this.m[2] = m2;
      this.m[3] = m3;
      this.m[4] = m4;
      this.m[5] = m5;
      this.m[6] = m6;
      this.m[7] = m7;
      this.m[8] = m8;
      this.m[9] = m9;
      this.m[10] = m10;
      this.m[11] = m11;
      this.m[12] = m12;
      this.m[13] = m13;
      this.m[14] = m14;
      this.m[15] = m15;
      return this;
    },

    /**
     * 构造float的4*4单位矩阵
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回单位矩阵
     */
    identity: function identity() {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = 1;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = 1;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 1;
      return this;
    },

    /**
     * 初始化4*4的单位矩阵
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回初始化的矩阵
     */
    zero: function zero() {
      this.m[0] = 0;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = 0;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = 0;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 0;
      return this;
    },

    /**
     * 矩阵相乘
     * @param {PIEMatrix4} matrix -4*4矩阵对象
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回相乘后的矩阵
     */
    multiply: function multiply(matrix) {
      var ae = this.m;
      var be = matrix.m;
      var a11 = ae[0],
          a12 = ae[4],
          a13 = ae[8],
          a14 = ae[12];
      var a21 = ae[1],
          a22 = ae[5],
          a23 = ae[9],
          a24 = ae[13];
      var a31 = ae[2],
          a32 = ae[6],
          a33 = ae[10],
          a34 = ae[14];
      var a41 = ae[3],
          a42 = ae[7],
          a43 = ae[11],
          a44 = ae[15];
      var b11 = be[0],
          b12 = be[4],
          b13 = be[8],
          b14 = be[12];
      var b21 = be[1],
          b22 = be[5],
          b23 = be[9],
          b24 = be[13];
      var b31 = be[2],
          b32 = be[6],
          b33 = be[10],
          b34 = be[14];
      var b41 = be[3],
          b42 = be[7],
          b43 = be[11],
          b44 = be[15];
      this.m[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
      this.m[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
      this.m[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
      this.m[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
      this.m[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
      this.m[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
      this.m[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
      this.m[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
      this.m[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
      this.m[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
      this.m[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
      this.m[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
      this.m[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
      this.m[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
      this.m[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
      this.m[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
      return this;
    },

    /**
     * 平移矩阵
     * @param {Number} x -x值
     * @param {Number} y -y值
     * @param {Number} z -z值
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回平移后的矩阵
     */
    translation: function translation(x, y, z) {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = 1;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = 1;
      this.m[11] = 0;
      this.m[12] = x;
      this.m[13] = y;
      this.m[14] = z;
      this.m[15] = 1;
      return this;
    },

    /**
     * 缩放矩阵
     * @param {Number} x -x值
     * @param {Number} y -y值
     * @param {Number} z -z值
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回缩放后的矩阵
     */
    scaling: function scaling(x, y, z) {
      this.m[0] = x;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = y;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = z;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 1;
      return this;
    },

    /**
     * 以X轴旋转
     * @param {Number} radian -顺时针旋转角度
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回旋转后的矩阵
     */
    rotationX: function rotationX(radian) {
      var s = Math.sin(radian);
      var c = Math.cos(radian);
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = c;
      this.m[6] = s;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = -s;
      this.m[10] = c;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 1;
      return this;
    },

    /**
     * 以Y轴旋转
     * @param {Number} radian -顺时针旋转角度
     * @returns {PIEMatrix4} 返回旋转后的矩阵
     * @memberOf Matrix4#
     */
    rotationY: function rotationY(radian) {
      var s = Math.sin(radian);
      var c = Math.cos(radian);
      this.m[0] = c;
      this.m[1] = 0;
      this.m[2] = -s;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = 1;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = s;
      this.m[9] = 0;
      this.m[10] = c;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 1;
      return this;
    },

    /**
     * 以Z轴旋转
     * @param {Number} radian -顺时针旋转角度
     *@returns {PIEMatrix4} 返回旋转后的矩阵
     * @memberOf Matrix4#
     */
    rotationZ: function rotationZ(radian) {
      var s = Math.sin(radian);
      var c = Math.cos(radian);
      this.m[0] = c;
      this.m[1] = s;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = -s;
      this.m[5] = c;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = 1;
      this.m[11] = 0;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = 0;
      this.m[15] = 1;
      return this;
    },

    /**
     * 计算逆矩阵
     * @returns {PIEMatrix4} 矩阵
     * @returns {PIEMatrix4} 返回逆矩阵
     * @memberOf Matrix4#
     */
    invert: function invert() {
      // transpose matrix
      var src0 = this.m[0];
      var src4 = this.m[1];
      var src8 = this.m[2];
      var src12 = this.m[3];
      var src1 = this.m[4];
      var src5 = this.m[5];
      var src9 = this.m[6];
      var src13 = this.m[7];
      var src2 = this.m[8];
      var src6 = this.m[9];
      var src10 = this.m[10];
      var src14 = this.m[11];
      var src3 = this.m[12];
      var src7 = this.m[13];
      var src11 = this.m[14];
      var src15 = this.m[15]; // calculate pairs for first 8 elements (cofactors)

      var atmp0 = src10 * src15;
      var atmp1 = src11 * src14;
      var atmp2 = src9 * src15;
      var atmp3 = src11 * src13;
      var atmp4 = src9 * src14;
      var atmp5 = src10 * src13;
      var atmp6 = src8 * src15;
      var atmp7 = src11 * src12;
      var atmp8 = src8 * src14;
      var atmp9 = src10 * src12;
      var atmp10 = src8 * src13;
      var atmp11 = src9 * src12; // calculate first 8 elements (cofactors)

      var dst0 = atmp0 * src5 + atmp3 * src6 + atmp4 * src7 - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);
      var dst1 = atmp1 * src4 + atmp6 * src6 + atmp9 * src7 - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);
      var dst2 = atmp2 * src4 + atmp7 * src5 + atmp10 * src7 - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);
      var dst3 = atmp5 * src4 + atmp8 * src5 + atmp11 * src6 - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);
      var dst4 = atmp1 * src1 + atmp2 * src2 + atmp5 * src3 - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);
      var dst5 = atmp0 * src0 + atmp7 * src2 + atmp8 * src3 - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);
      var dst6 = atmp3 * src0 + atmp6 * src1 + atmp11 * src3 - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);
      var dst7 = atmp4 * src0 + atmp9 * src1 + atmp10 * src2 - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2); // calculate pairs for second 8 elements (cofactors)

      var btmp0 = src2 * src7;
      var btmp1 = src3 * src6;
      var btmp2 = src1 * src7;
      var btmp3 = src3 * src5;
      var btmp4 = src1 * src6;
      var btmp5 = src2 * src5;
      var btmp6 = src0 * src7;
      var btmp7 = src3 * src4;
      var btmp8 = src0 * src6;
      var btmp9 = src2 * src4;
      var btmp10 = src0 * src5;
      var btmp11 = src1 * src4; // calculate second 8 elements (cofactors)

      var dst8 = btmp0 * src13 + btmp3 * src14 + btmp4 * src15 - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);
      var dst9 = btmp1 * src12 + btmp6 * src14 + btmp9 * src15 - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);
      var dst10 = btmp2 * src12 + btmp7 * src13 + btmp10 * src15 - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);
      var dst11 = btmp5 * src12 + btmp8 * src13 + btmp11 * src14 - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);
      var dst12 = btmp2 * src10 + btmp5 * src11 + btmp1 * src9 - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);
      var dst13 = btmp8 * src11 + btmp0 * src8 + btmp7 * src10 - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);
      var dst14 = btmp6 * src9 + btmp11 * src11 + btmp3 * src8 - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);
      var dst15 = btmp10 * src10 + btmp4 * src8 + btmp9 * src9 - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8); // calculate determinant

      var det = src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;

      if (det == 0) {
        return this.identity();
      } // calculate matrix inverse


      var invdet = 1.0 / det;
      this.m[0] = dst0 * invdet;
      this.m[1] = dst1 * invdet;
      this.m[2] = dst2 * invdet;
      this.m[3] = dst3 * invdet;
      this.m[4] = dst4 * invdet;
      this.m[5] = dst5 * invdet;
      this.m[6] = dst6 * invdet;
      this.m[7] = dst7 * invdet;
      this.m[8] = dst8 * invdet;
      this.m[9] = dst9 * invdet;
      this.m[10] = dst10 * invdet;
      this.m[11] = dst11 * invdet;
      this.m[12] = dst12 * invdet;
      this.m[13] = dst13 * invdet;
      this.m[14] = dst14 * invdet;
      this.m[15] = dst15 * invdet;
      return this;
    },
    // /**
    //  * 设置旋转矩阵
    //  * @param {PIEMatrix4d} matrix -矩阵
    //  *
    //  * @memberOf Matrix4#
    //  */
    // fromRotationMatrix: function (matrix) {
    //     this.m[0] = matrix.m[0];
    //     this.m[1] = matrix.m[1];
    //     this.m[2] = matrix.m[2];
    //     this.m[3] = matrix.m[4];
    //     this.m[4] = matrix.m[5];
    //     this.m[5] = matrix.m[6];
    //     this.m[6] = matrix.m[8];
    //     this.m[7] = matrix.m[9];
    //     this.m[8] = matrix.m[10];
    // },
    // /**
    //  * 取旋转矩阵
    //  * @returns {PIEMatrix3f} -矩阵
    //  *
    //  * @memberOf Matrix4#
    //  */
    // toRotationMatrix: function () {
    //     var matrix = new PIEMatrix3f();
    //     matrix.m[0] = this.m[0];
    //     matrix.m[1] = this.m[1];
    //     matrix.m[2] = this.m[2];
    //     matrix.m[3] = this.m[4];
    //     matrix.m[4] = this.m[5];
    //     matrix.m[5] = this.m[6];
    //     matrix.m[6] = this.m[8];
    //     matrix.m[7] = this.m[9];
    //     matrix.m[8] = this.m[10];
    //     return matrix;
    // },

    /**
     * 转置矩阵
     * @returns {PIEMatrix4} 矩阵
     * @returns {PIEMatrix4} 返回转置矩阵
     * @memberOf Matrix4#
     */
    transpose: function transpose() {
      var te = this.m;
      var tmp;
      tmp = te[1];
      te[1] = te[4];
      te[4] = tmp;
      tmp = te[2];
      te[2] = te[8];
      te[8] = tmp;
      tmp = te[6];
      te[6] = te[9];
      te[9] = tmp;
      tmp = te[3];
      te[3] = te[12];
      te[12] = tmp;
      tmp = te[7];
      te[7] = te[13];
      te[13] = tmp;
      tmp = te[11];
      te[11] = te[14];
      te[14] = tmp;
      return this;
    },

    /**
     * 采用施密特正交方法计算出正交矩阵
     * @param {Number} left -x的最小值
     * @param {Number} right -x的最大值
     * @param {Number} bottom -y的最小值
     * @param {Number} top -y的最大值
     * @param {Number} nearly -z的最小值
     * @param {Number} faraway -z的最大值
     *@returns {PIEMatrix4} 返回正交矩阵
     * @memberOf Matrix4#
     */
    ortho: function ortho(left, right, bottom, top, nearly, faraway) {
      var a = 2.0 / (right - left);
      var b = 2.0 / (top - bottom);
      var c = -2.0 / (faraway - nearly);
      var tx = (right + left) / (right - left);
      var ty = (top + bottom) / (top - bottom);
      var tz = (faraway + nearly) / (faraway - nearly);
      this.m[0] = a;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = b;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      this.m[9] = 0;
      this.m[10] = c;
      this.m[11] = 0;
      this.m[12] = tx;
      this.m[13] = ty;
      this.m[14] = tz;
      this.m[15] = 1;
      return this;
    },

    /**
     * 设置视图矩阵
     * @param {Number} left -设定相机视锥的左平面的值
     * @param {Number} right -设定相机视锥的右平面的值
     * @param {Number} bottom -设定相机视锥的底面的值
     * @param {Number} top -设定相机视锥的顶面的值
     * @param {Number} nearly -设置相机视锥台的近平面的值
     * @param {Number} faraway -设置相机视锥台接远平面的值
     * @returns {PIEMatrix4} 返回view矩阵
     * @memberOf Matrix4#
     */
    frustum: function frustum(left, right, bottom, top, nearly, faraway) {
      var a = 2 * nearly / (right - left);
      var b = 2 * nearly / (top - bottom);
      var c = (right + left) / (right - left);
      var d = (top + bottom) / (top - bottom);
      var e = -(faraway + nearly) / (faraway - nearly);
      var f = -2 * faraway * nearly / (faraway - nearly);
      this.m[0] = a;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = b;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = c;
      this.m[9] = d;
      this.m[10] = e;
      this.m[11] = -1;
      this.m[12] = 0;
      this.m[13] = 0;
      this.m[14] = f;
      this.m[15] = 1;
      return this;
    },

    /**
     * 设置视图矩阵
     * @param {Number} fovy -视角的大小
     * @param {Number} aspect -表示裁剪面的宽高比
     * @param {Number} zNear -近裁剪面到眼睛的距离
     * @param {Number} zFar -远裁剪面到眼睛的距离
     * @returns {PIEMatrix4} 返回视图矩阵
     * @memberOf Matrix4#
     */
    perspective: function perspective(fovy, aspect, zNear, zFar) {
      var f = 1.0 / Math.tan(fovy / 2);
      var rangeReciprocal = 1.0 / (zNear - zFar);
      this.m[0] = f / aspect;
      this.m[1] = 0.0;
      this.m[2] = 0.0;
      this.m[3] = 0.0;
      this.m[4] = 0.0;
      this.m[5] = f;
      this.m[6] = 0.0;
      this.m[7] = 0.0;
      this.m[8] = 0.0;
      this.m[9] = 0.0;
      this.m[10] = (zFar + zNear) * rangeReciprocal;
      this.m[11] = -1.0;
      this.m[12] = 0.0;
      this.m[13] = 0.0;
      this.m[14] = 2.0 * zFar * zNear * rangeReciprocal;
      this.m[15] = 0.0;
      return this;
    },

    /**
     * 克隆
     * @memberOf Matrix4#
     * @returns {PIEMatrix4} 返回克隆后的矩阵
     */
    clone: function clone() {
      var matrix = new PIEMatrix4();

      for (var i = 0; i < 16; i++) {
        matrix.m[i] = this.m[i];
      }

      return matrix;
    },
    toArray: function toArray() {
      var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var te = this.m;
      array[offset] = te[0];
      array[offset + 1] = te[1];
      array[offset + 2] = te[2];
      array[offset + 3] = te[3];
      array[offset + 4] = te[4];
      array[offset + 5] = te[5];
      array[offset + 6] = te[6];
      array[offset + 7] = te[7];
      array[offset + 8] = te[8];
      array[offset + 9] = te[9];
      array[offset + 10] = te[10];
      array[offset + 11] = te[11];
      array[offset + 12] = te[12];
      array[offset + 13] = te[13];
      array[offset + 14] = te[14];
      array[offset + 15] = te[15];
      return array;
    }
  });

  PIEMatrix4.fromArray = function (m) {
    if (m instanceof Array && m.length == 16) {
      var resMatrix = new PIEMatrix4();
      resMatrix.create(m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]);
      return resMatrix;
    }

    return null;
  };
  /**
   * 矩阵和矩阵相乘
   * @param {PIEMatrix4} lhs -左矩阵
   * @param {PIEMatrix4} rhs -右矩阵
   *
   * @memberOf Matrix4
   * @returns {PIEMatrix4} 返回结果
   *
   *
   */


  PIEMatrix4.multiply = function (lhs, rhs) {
    var result = lhs.clone();
    return result.multiply(rhs);
  }; // /**

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 三维向量类
   * @name Vector3
   * @class Vector3
   *
   * @param {Number} x -x值
   * @param {Number} y -y值
   * @param {Number} z -z值
   */

  function PIEVector3(x, y, z) {
    this.x = x || 0;
    this.y = y || 0;
    this.z = z || 0;
  }

  Object.assign(PIEVector3.prototype, {
    /**
     * 进行规格化
     * @memberOf Vector3#
     *
     */
    normalize: function normalize() {
      var length = this.length();

      if (length != 0) {
        this.x /= length;
        this.y /= length;
        this.z /= length;
      }
    },

    /**
     * 进行归一化
     *
     * @memberOf Vector3#
     * @returns {PIEVector3} 返回归一化后的向量
     *
     */
    normalized: function normalized() {
      var v = new PIEVector3(this.x, this.y, this.z);
      v.normalize();
      return v;
    },

    /**
     * 求向量的长度
     *
     * @memberOf Vector3#
     * @returns {number} 返回向量的长度
     *
     */
    length: function length() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    },

    /**
     * 自身缩放
     * @param {Number} s -value
     * @memberOf Vector3#
     *
     * @returns {PIEVector3} 返回缩放后的向量
     *
     */
    scale: function scale(s) {
      return new PIEVector3(this.x * s, this.y * s, this.z * s);
    },

    /**
     * 判断向量的长度是否为0
     *
     * @memberOf Vector3#
     * @returns {Boolean} 如果向量长度为0返回0，否则返回向量长度
     *
     */
    isZero: function isZero() {
      return PIEMath.isZero(this.length());
    },

    /**
     * 求两个向量的叉积
     * @param {PIEVector3} vec -三维向量
     * @memberOf Vector3#
     *
     * @returns {PIEVector3} 返回叉积结果
     *
     */
    cross: function cross(vec) {
      return new PIEVector3(this.y * vec.z - this.z * vec.y, this.z * vec.x - this.x * vec.z, this.x * vec.y - this.y * vec.x);
    },

    /**
     * 求两个向量的点积
     * @param {PIEVector3} vec -三维向量
     * @memberOf Vector3#
     *
     * @returns {Number} 返回点积结果
     *
     */
    dot: function dot(vec) {
      return this.x * vec.x + this.y * vec.y + this.z * vec.z;
    },

    /**
     * 向量相减
     * @param {PIEVector3} vec -三维向量
     * @memberOf Vector3#
     *
     * @returns {PIEVector3} 返回相减后的向量
     *
     */
    sub: function sub(vec) {
      return new PIEVector3(this.x - vec.x, this.y - vec.y, this.z - vec.z);
    },

    /**
     * 向量相加
     * @param {PIEVector3} vec -三维向量
     * @memberOf Vector3#
     *
     * @returns {PIEVector3} 返回相加后的向量
     *
     */
    add: function add(vec) {
      return new PIEVector3(this.x + vec.x, this.y + vec.y, this.z + vec.z);
    },

    /**
     * 向量克隆
     *
     * @memberOf Vector3#
     * @returns {PIEVector3} 返回克隆的向量
     *
     */
    clone: function clone() {
      return new PIEVector3(this.x, this.y, this.z);
    },
    // /**
    //  * 求向量乘以一个4*3的矩阵
    //  * @param {PIEVector4} v -向量
    //  * @param {PIEMatrix4} matrix -4*4矩阵
    //  * @memberOf Vector3#
    //  *
    //  * @returns {PIEVector4} 返回相乘后的结果
    //  *
    //  */
    // multiply: function (matrix) {
    //     var v = new PIEVector4(this.x, this.y, this.z, 1.0);
    //     var m11 = 0, m12 = 0, m13 = 0, ml4 = 0;
    //
    //     m11 = v.x * matrix.m[0] + v.y * matrix.m[4] + v.z * matrix.m[8] + v.w * matrix.m[12];
    //     m12 = v.x * matrix.m[1] + v.y * matrix.m[5] + v.z * matrix.m[9] + v.w * matrix.m[13];
    //     m13 = v.x * matrix.m[2] + v.y * matrix.m[6] + v.z * matrix.m[10] + v.w * matrix.m[14];
    //     ml4 = v.x * matrix.m[3] + v.y * matrix.m[7] + v.z * matrix.m[11] + v.w * matrix.m[15];
    //     return new PIEVector4(m11, m12, m13, ml4);
    // },

    /**
     * 向量相乘
     * @param {PIEVector3} v -向量
     * @memberOf Vector3#
     * @returns {PIEVector3} 返回相乘后的结果
     *
     */
    multiply: function multiply(v) {
      this.x *= v.x;
      this.y *= v.y;
      this.z *= v.z;
      return this;
    },

    /**
     * 将空间坐标转换成windows坐标
     * @param {PIEVector4} viewport -视口
     * @param {PIEMatrix4} projection -投影矩阵
     * @param {PIEMatrix4} view -视图矩阵
     * @param {PIEMatrix4} world -世界矩阵
     * @memberOf Vector3#
     *
     */
    project: function project(viewport, projection, view, world) {
      var m = PIEMatrix4.multiply(projection, view);
      m = PIEMatrix4.multiply(m, world);
      var v = new PIEVector4(this.x, this.y, this.z, 1.0);
      v.applyMatrix4(m);

      if (v.w == 0) {
        return;
      }

      v.x /= v.w;
      v.y /= v.w;
      v.z /= v.w;
      /* Map x, y and z to range 0-1 */

      v.x = v.x * 0.5 + 0.5;
      v.y = v.y * 0.5 + 0.5;
      v.z = v.z * 0.5 + 0.5;
      /* Map x,y to viewport */

      v.x = v.x * viewport.z + viewport.x;
      v.y = v.y * viewport.w + viewport.y;
      this.x = v.x;
      this.y = v.y;
      this.z = v.z;
    },

    /**
     * 将window坐标转换成空间坐标
     * @param {PIEVector4} viewport -视口
     * @param {PIEMatrix4} projection -投影矩阵
     * @param {PIEMatrix4} view -视图矩阵
     * @param {PIEMatrix4} world -世界矩阵
     * @memberOf Vector3#
     *
     */
    unProject: function unProject(viewport, projection, view, world) {
      var m = PIEMatrix4.multiply(projection, view);
      m = PIEMatrix4.multiply(m, world);
      m = m.invert();
      var v = new PIEVector4();
      v.x = 2.0 * (this.x - viewport.x) / viewport.z - 1.0;
      v.y = 2.0 * (this.y - viewport.y) / viewport.w - 1.0;
      v.z = 2.0 * this.z - 1.0;
      v.w = 1.0;
      v.applyMatrix4(m);

      if (v.w == 0.0) {
        return;
      }

      this.x = v.x / v.w;
      this.y = v.y / v.w;
      this.z = v.z / v.w;
    },
    toArray: function toArray() {
      var array = [this.x, this.y, this.z];
      return array;
    }
  });
  /**
   * 向量与矩阵相乘
   * @param {PIEVector3} v -向量
   * @param {PIEMatrix4} matrix -矩阵
   *
   * @memberOf Vector3
   * @returns {PIEVector3} 返回结果
   */

  PIEVector3.multiplyMatrix4 = function (v, matrix) {
    var w = 1;
    var m11 = 0,
        m12 = 0,
        m13 = 0,
        m14 = 0;
    m11 = v.x * matrix.m[0] + v.y * matrix.m[4] + v.z * matrix.m[8] + w * matrix.m[12];
    m12 = v.x * matrix.m[1] + v.y * matrix.m[5] + v.z * matrix.m[9] + w * matrix.m[13];
    m13 = v.x * matrix.m[2] + v.y * matrix.m[6] + v.z * matrix.m[10] + w * matrix.m[14];
    m14 = v.x * matrix.m[3] + v.y * matrix.m[7] + v.z * matrix.m[11] + w * matrix.m[15];
    return new PIEVector3(m11 / m14, m12 / m14, m13 / m14);
  };
  /**
   * 向量与矩阵相乘
   * @param {PIEVector3} v -向量
   * @param {PIEMatrix3d} matrix -矩阵
   *
   * @memberOf Vector3
   * @returns {PIEVector3} 返回结果
   */


  PIEVector3.multiplyMatrix3 = function (v, matrix) {
    var m11 = 0,
        m12 = 0,
        m13 = 0;
    m11 = v.x * matrix.m[0] + v.y * matrix.m[3] + v.z * matrix.m[6];
    m12 = v.x * matrix.m[1] + v.y * matrix.m[4] + v.z * matrix.m[7];
    m13 = v.x * matrix.m[2] + v.y * matrix.m[5] + v.z * matrix.m[8];
    return new PIEVector3(m11, m12, m13);
  };
  /**
   * 球面坐标转笛卡尔坐标
   * @param {Number} dLongitude -经度
   * @param {Number} dLatitude -纬度
   * @param {Number} dRadius -半径
   *
   * @memberOf Vector3
   * @returns {PIEVector3} 返回笛卡尔坐标
   */


  PIEVector3.sphericalToCartesian = function (dLongitude, dLatitude, dRadius) {
    var dRadCosLat = dRadius * Math.cos(dLatitude);
    return new PIEVector3(dRadCosLat * Math.sin(dLongitude), dRadius * Math.sin(dLatitude), dRadCosLat * Math.cos(dLongitude));
  };
  /**
   * 笛卡尔坐标转球面坐标
   * @param {Number} x -x值
   * @param {Number} y -y值
   * @param {Number} z -z值
   *
   * @memberOf Vector3
   * @returns {PIEVector3} 返回球面坐标
   */


  PIEVector3.cartesianToSpherical = function (x, y, z) {
    var rho = Math.sqrt(x * x + y * y + z * z);

    if (PIEMath.isZero(rho)) {
      return new PIEVector3(0, 0, 0);
    }

    var longitude = Math.atan2(x, z);
    var latitude = Math.asin(y / rho);
    return new PIEVector3(longitude, latitude, rho);
  };
  /**
   * 向量与平面的交点
   * @param {PIEVector3} vecStart -向量起点
   * @param {PIEVector3} vecEnd -向量终点
   *
   * @memberOf Vector3
   * @returns {PIEVector3} 返回交点
   */


  PIEVector3.rayIntersectionWithPlane = function (vecStart, vecEnd) {
    var vecLineVector = new PIEVector3();
    vecLineVector.x = vecEnd.x - vecStart.x;
    vecLineVector.y = vecEnd.y - vecStart.y;
    vecLineVector.z = vecEnd.z - vecStart.z;
    vecLineVector.normalize();
    var vecPlaneNormal = new PIEVector3();
    vecPlaneNormal.x = 0;
    vecPlaneNormal.y = 0;
    vecPlaneNormal.z = 1;
    var vecPlanePoint = new PIEVector3();
    vecPlanePoint.x = 0;
    vecPlanePoint.y = 0;
    vecPlanePoint.z = 0;
    new PIEVector3();
    var vp1, vp2, vp3, n1, n2, n3, v1, v2, v3, m1, m2, m3, t, vpt;
    vp1 = vecPlaneNormal.x;
    vp2 = vecPlaneNormal.y;
    vp3 = vecPlaneNormal.z;
    n1 = vecPlanePoint.x;
    n2 = vecPlanePoint.y;
    n3 = vecPlanePoint.z;
    v1 = vecLineVector.x;
    v2 = vecLineVector.y;
    v3 = vecLineVector.z;
    m1 = vecStart.x;
    m2 = vecStart.y;
    m3 = vecStart.z;
    vpt = v1 * vp1 + v2 * vp2 + v3 * vp3;

    if (vpt == 0) {
      return null;
    } else {
      t = ((n1 - m1) * vp1 + (n2 - m2) * vp2 + (n3 - m3) * vp3) / vpt;
      var vecIntersect = new PIEVector3();
      vecIntersect.x = m1 + v1 * t;
      vecIntersect.y = m2 + v2 * t;
      vecIntersect.z = m3 + v3 * t;
      return vecIntersect;
    }
  };
  /**
   * 向量与球体的交点
   * @param {PIEVector3} vecStart -向量起点
   * @param {PIEVector3} vecEnd -向量终点
   * @param {Number} dRadius -半径
   *
   * @memberOf Vector3
   * @returns {PIEVector3} 返回交点
   */


  PIEVector3.rayIntersectionWithSphere = function (vecStart, vecEnd, dRadius) {
    var p1 = vecStart;
    var p2 = vecEnd;
    p2.x * p2.x + p2.y * p2.y + p2.z * p2.z;
    var a = (p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y) + (p2.z - p1.z) * (p2.z - p1.z);
    var b = 2.0 * ((p2.x - p1.x) * p1.x + (p2.y - p1.y) * p1.y + (p2.z - p1.z) * p1.z);
    var c = p1.x * p1.x + p1.y * p1.y + p1.z * p1.z - dRadius * dRadius;
    var discriminant = b * b - 4 * a * c;

    if (discriminant <= 0) {
      return null;
    }

    var t1 = (-1.0 * b - Math.sqrt(b * b - 4 * a * c)) / (2 * a);
    var vecIntersect = new PIEVector3(p1.x + t1 * (p2.x - p1.x), p1.y + t1 * (p2.y - p1.y), p1.z + t1 * (p2.z - p1.z));
    return vecIntersect;
  };

  var PIEArrayType = {
    Int8: 0,
    UInt8: 1,
    UInt16: 2,
    Int16: 3,
    UInt32: 4,
    Int32: 5,
    Float32: 6,
    Float64: 7
  };

  function PIEArray(value, type) {
    var array = value;
    this.type = type;

    if (value instanceof Array) {
      if (type == PIEArrayType.Int8) {
        array = new Int8Array(value);
      } else if (type == PIEArrayType.UInt8) {
        array = new Uint8Array(value);
      } else if (type == PIEArrayType.UInt16) {
        array = new Uint16Array(value);
      } else if (type == PIEArrayType.Int16) {
        array = new Int16Array(value);
      } else if (type == PIEArrayType.UInt32) {
        array = new Uint32Array(value);
      } else if (type == PIEArrayType.Int32) {
        array = new Int32Array(value);
      } else if (type == PIEArrayType.Float32) {
        array = new Float32Array(value);
      } else if (type == PIEArrayType.Float64) {
        array = new Float64Array(value);
      }
    } else if (value instanceof Number || typeof value == "number") {
      if (type == PIEArrayType.Int8) {
        array = new Int8Array(value);
      } else if (type == PIEArrayType.UInt8) {
        array = new Uint8Array(value);
      } else if (type == PIEArrayType.UInt16) {
        array = new Uint16Array(value);
      } else if (type == PIEArrayType.Int16) {
        array = new Int16Array(value);
      } else if (type == PIEArrayType.UInt32) {
        array = new Uint32Array(value);
      } else if (type == PIEArrayType.Int32) {
        array = new Int32Array(value);
      } else if (type == PIEArrayType.Float32) {
        array = new Float32Array(value);
      } else if (type == PIEArrayType.Float64) {
        array = new Float64Array(value);
      }
    }

    if (array != null) {
      this.array = array; // this.handle = Module._malloc(this.array.length * this.array.BYTES_PER_ELEMENT);

      this.handle = Module._Array_Create(this.array, this.array.length, type);
    }

    if (array instanceof Int8Array) {
      //Module.HEAP8.set(this.array, this.handle);
      Module.GROWABLE_HEAP_I8().set(this.array, this.handle); // Module.heapObjectForWebGLType(5120).set(this.array, this.handle);
    } else if (array instanceof Uint8Array) {
      //Module.HEAPU8.set(this.array, this.handle);
      Module.GROWABLE_HEAP_U8().set(this.array, this.handle); // Module.heapObjectForWebGLType(5121).set(this.array, this.handle);
    } else if (array instanceof Int16Array) {
      //Module.HEAP16.set(this.array, this.handle >> 1);
      Module.GROWABLE_HEAP_I16().set(this.array, this.handle >> 1); // Module.heapObjectForWebGLType(5122).set(this.array, this.handle >> 1);
    } else if (array instanceof Uint16Array) {
      //Module.HEAPU16.set(this.array, this.handle >> 1);
      Module.GROWABLE_HEAP_U16().set(this.array, this.handle >> 1); // Module.heapObjectForWebGLType(0).set(this.array, this.handle >> 1);
    } else if (array instanceof Int32Array) {
      //Module.HEAP32.set(this.array, this.handle >> 2);
      Module.GROWABLE_HEAP_I32().set(this.array, this.handle >> 2); // Module.heapObjectForWebGLType(5124).set(this.array, this.handle >> 2);
    } else if (array instanceof Uint32Array) {
      //Module.HEAPU32.set(this.array, this.handle >> 2);
      Module.GROWABLE_HEAP_U32().set(this.array, this.handle >> 2); // Module.heapObjectForWebGLType(5125).set(this.array, this.handle >> 2);
    } else if (array instanceof Float32Array) {
      //Module.HEAPF32.set(this.array, this.handle >> 2);
      Module.GROWABLE_HEAP_F32().set(this.array, this.handle >> 2); // Module.heapObjectForWebGLType(5126).set(this.array, this.handle >> 2);
    } else if (array instanceof Float64Array) {
      //Module.HEAPF64.set(this.array, this.handle >> 3);
      Module.GROWABLE_HEAP_F64().set(this.array, this.handle >> 3); // Module.heapObjectForWebGLType(5127).set(this.array, this.handle >> 3);
    }
  }

  Object.assign(PIEArray.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.handle != null) {
        // Module._free(this.handle);
        Module._Array_Delete(this.handle, this.type);

        this.handle = null;
      }
    },
    toArrayBuffer: function toArrayBuffer() {
      return this.array;
    },
    toArray: function toArray() {
      return Array.apply([], this.array);
    },
    updateData: function updateData() {
      var type = this.type;

      if (type == PIEArrayType.Int8) {
        var ptr = this.getHandle();
        var buffer = Module.HEAP8.subarray(ptr, ptr + this.array.length);
        this.array = new Int8Array(buffer);
      } else if (type == PIEArrayType.UInt8) {
        var ptr = this.getHandle();
        var buffer = Module.HEAPU8.subarray(ptr, ptr + this.array.length);
        this.array = new Uint8Array(buffer);
      } else if (type == PIEArrayType.UInt16) {
        var ptr = this.getHandle() >> 1;
        var buffer = Module.HEAPU16.subarray(ptr, ptr + this.array.length);
        this.array = new Uint16Array(buffer);
      } else if (type == PIEArrayType.Int16) {
        var ptr = this.getHandle() >> 1;
        var buffer = Module.HEAP16.subarray(ptr, ptr + this.array.length);
        this.array = new Int16Array(buffer);
      } else if (type == PIEArrayType.UInt32) {
        var ptr = this.getHandle() >> 2;
        var buffer = Module.HEAPU32.subarray(ptr, ptr + this.array.length);
        this.array = new Uint32Array(buffer);
      } else if (type == PIEArrayType.Int32) {
        var ptr = this.getHandle() >> 2;
        var buffer = Module.HEAP32.subarray(ptr, ptr + this.array.length);
        this.array = new Int32Array(buffer);
      } else if (type == PIEArrayType.Float32) {
        var ptr = this.getHandle() >> 3;
        var buffer = Module.HEAPF32.subarray(ptr, ptr + this.array.length);
        this.array = new Float32Array(buffer);
      } else if (type == PIEArrayType.Float64) {
        var ptr = this.getHandle() >> 3;
        var buffer = Module.HEAPF64.subarray(ptr, ptr + this.array.length);
        this.array = new Float64Array(buffer);
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 旋转动画对象操作函数
   * @name RotationToAction
   * @class RotationToAction
   * 创建旋转动画对象
   * @param {Object} options -
   * @param {Number} options.duration -运行时间
   * @param {(Array/PIEVector3)} options.rotation -渲染角度
   *
   * @extends MoveableAction
   */

  function PIERotationToAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration;
      var rotation = options.rotation;
      var rotArray = null;

      if (rotation instanceof Array) {
        rotArray = rotation;
      } else if (rotation instanceof PIEVector3) {
        rotArray = rotation.toArray();
      }

      if (rotation) {
        var arrayRotation = new PIEArray(rotArray, PIEArrayType.Float64);
        handle = Module._RotationToAction_Create(duration, arrayRotation.getHandle());
        arrayRotation.dispose();
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEMoveableAction.call(this, handle, autoRelease);
  }

  PIERotationToAction.prototype = Object.assign(Object.create(PIEMoveableAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 移动动画操作函数
   *
   *
   * @name MoveToAction
   * @param {Object} options -
   * @param {(PIEVector3/Array)} options.position -移动位置
   * @param {Number} options.duration -运行时间
   * @param {(PIEVector3/Array)} options.rotate -旋转角度
   * @class MoveToAction
   * 创建移动动画对象
   * @extends MoveableAction
   */

  function PIEMoveToAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var position = options.position;
      var duration = options.duration;
      var rotate = options.rotate;
      var posArray = null;
      var rotateArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (rotate instanceof Array) {
        rotateArray = rotate;
      } else if (rotate instanceof PIEVector3) {
        rotateArray = rotate.toArray();
      }

      if (posArray && rotateArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);
        var arrayRotate = new PIEArray(rotateArray, PIEArrayType.Float64);
        handle = Module._MoveToAction_Create(arrayPos.getHandle(), duration, arrayRotate.getHandle());
        arrayPos.dispose();
        arrayRotate.dispose();
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEMoveableAction.call(this, handle, autoRelease);
  }

  PIEMoveToAction.prototype = Object.assign(Object.create(PIEMoveableAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 顺序执行组合动画
   * @name SequenceAction
   * @class SequenceAction
   *
   * @param {Object} options -
   * @param {Number} options.actions -动画对象数组
   *
   * @extends Action
   */

  function PIESequenceAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var actions = options.actions;
      var arrayactions = [];

      for (var i = 0; i < actions.length; ++i) {
        var actionTem = actions[i];
        arrayactions.push(actionTem.getHandle());
      }

      var arrayActions = new PIEArray(arrayactions, PIEArrayType.Int32);
      handle = Module._SequenceAction_Create(arrayActions.getHandle(), arrayactions.length);

      for (var _i = 0; _i < arrayactions.length; ++_i) {
        arrayactions.pop();
      }

      autoRelease = true;
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEAction.call(this, handle, autoRelease);
  }

  PIESequenceAction.prototype = Object.assign(Object.create(PIEAction.prototype), {
    getHandle: function getHandle() {
      return this.handle;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 永久重复动画
   * @name RepeatForeverAction
   * @class RepeatForeverAction
   * 创建永久重复动画
   * @param {Object} options -
   * @param {PIEAction} options.action -动画对象
   *
   * @extends Action
   */

  function PIERepeatForeverAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var intervalAction = options.action;

      if (intervalAction) {
        handle = Module._RepeatForeverAction_Create(intervalAction.getHandle());
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEAction.call(this, handle, autoRelease);
  }

  PIERepeatForeverAction.prototype = Object.assign(Object.create(PIEAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 加速动画
   * @name SpeedAction
   * @class SpeedAction
   *
   * @param {Object} options -
   * @param {Number} options.speed -加速比
   * @param {PIEAction} options.action -动画对象
   *
   * @extends Action
   */

  function PIESpeedAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var speed = options.speed;
      var action = options.action;

      if (action) {
        handle = Module._SpeedAction_Create(action.getHandle(), speed);
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEAction.call(this, handle, autoRelease);
  }

  PIESpeedAction.prototype = Object.assign(Object.create(PIEAction.prototype), {
    getHandle: function getHandle() {
      return this.handle;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *  标绘动画类型枚举
   * @readonly
   * @enum {String}
   */
  var PIEPlotActionType = {
    /** GeoJson数据源  */
    NULL: 0,

    /** 渐变 */
    Gradually: 1,

    /** 生长动画  */
    Grow: 2,

    /** 移动动画  */
    Move: 3,

    /** 旋转动画  */
    Rotate: 4,

    /** 比例动画  */
    Scale: 5,

    /** 擦动动画  */
    Wipe: 6
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *  逐渐动画类型枚举
   * @readonly
   * @enum {Number}
   */
  var PIEGraduallyActionType = {
    /** 逐渐出现 */
    Appear: 0,

    /** 逐渐消失 */
    Disappear: 1,

    /** 慢慢闪烁 */
    Blink: 2
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *  擦入擦出动画类型枚举
   * @readonly
   * @enum {Number}
   */
  var PIEWipeActionType = {
    /** 擦入 */
    Appear: 0,

    /** 擦出 */
    Disappear: 1
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 标绘动画基础操作函数
   * @name PlotAction
   * @extends Action
   */

  function PIEPlotAction(handle, autoRelease) {
    PIEAction.call(this, handle, autoRelease);
  }

  PIEPlotAction.prototype = Object.assign(Object.create(PIEAction.prototype), {
    /**
     *  获取动画类型
     *  @memberOf PlotAction#
     *  @returns {PIEPlotActionType} 返回标绘动画类型
     */
    getType: function getType() {
      return Module._PlotAction_GetType(this.handle);
    },

    /**
     *  获取开始时间
     *  @memberOf PlotAction#
     *  @returns {Number} 返回开始时间
     */
    getBeginTime: function getBeginTime() {
      return Module._PlotAction_GetBeginTime(this.handle);
    },

    /**
     *  设置开始时间
     *  @param {Number} options.beginTime -开始时间
     *  @memberOf PlotAction#
     */
    setBeginTime: function setBeginTime(beginTime) {
      Module._PlotAction_SetBeginTime(this.handle, beginTime);
    },

    /**
     *  获取动画ID
     *  @memberOf PlotAction#
     *  @returns {Number} 返回动画ID
     */
    getActionID: function getActionID() {
      return Module._PlotAction_GetActionID(this.handle);
    },

    /**
     *  获取标绘ID
     *  @memberOf PlotAction#
     *  @returns {Number} 返回标绘ID
     */
    getPlotID: function getPlotID() {
      return Module._PlotAction_GetPlotID(this.handle);
    },

    /**
     *  设置标绘ID
     *  @param {Number} options.plotID -标绘ID
     *  @memberOf PlotAction#
     */
    setPlotID: function setPlotID(plotID) {
      Module._PlotAction_SetPlotID(this.handle, plotID);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘渐变动画对象
   * @name PlotGraduallyAction
   * @class PlotGraduallyAction
   *
   * @param {Object} options -
   * @param {Number} options.duration -相机运行时间
   * @param {PIEGraduallyActionType} options.type -渐变类型
   *
   * @extends PlotAction
   */

  function PIEPlotGraduallyAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      var type = options.type;

      if (type > 2 || type < 0) {
        handle = null;
      } else {
        handle = Module._PlotGraduallyAction_Create(duration, type);
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotGraduallyAction.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘闪烁动画对象
   * @name PlotGraduallyActionEx
   * @class PlotGraduallyActionEx
   *
   * @param {Object} options -
   * @param {Number} options.duration -相机运行时间
   * @param {Number} options.blinkSpeed -闪烁速度
   * @param {PIEGraduallyActionType} options.type -渐变类型
   * @extends PlotAction
   */

  function PIEPlotGraduallyActionEx(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      var type = options.type;
      var blinkSpeed = options.blinkSpeed;

      if (!type || type > 2 || type < 0) {
        handle = null;
      } else {
        handle = Module._PlotGraduallyActionEx_Create(duration, blinkSpeed, type);
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotGraduallyActionEx.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘生长动画对象
   * @name PlotGrowAction
   * @class PlotGrowAction
   *
   * @param {Object} options -
   * @param {Number} options.duration - 相机运行时间
   *
   * @extends PlotAction
   */

  function PIEPlotGrowAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      if (duration > 0) {
        handle = Module._PlotGrowAction_Create(duration);
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotGrowAction.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建卷击，钳击、多箭头军标生长动画对象
   * @name PlotGrowActionEx
   * @param {Object} options -
   * @param {Number} options.duration -生长时间
   * @param {Array} options.arrowTimes - 每个箭头的生长时间
   * @extends PlotAction
   */

  function PIEPlotGrowActionEx(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var dDuration = options.duration; //生长时间

      var arrowTimes = options.arrowTimes;
      var arrowTimesArray = null;

      if (arrowTimes instanceof Array) {
        arrowTimesArray = arrowTimes;
      }

      if (arrowTimesArray) {
        var arrayArrowTimes = new PIEArray(arrowTimesArray, PIEArrayType.Float64);
        handle = Module._PlotGrowActionEx_Create(dDuration, arrayArrowTimes.getHandle(), arrowTimes.length);
        arrayArrowTimes.dispose();
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotGrowActionEx.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘移动动画对象
   * @name PlotMoveAction
   * @class PlotMoveAction
   *
   * @param {Object} options -
   * @param {Number} options.duration -相机运行时间
   * @param {(Array/PIEVector3)} options.position -目标位置
   *
   * @extends PlotAction
   */

  function PIEPlotMoveAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      var points = options.position;
      var pointsArray = null;

      if (points instanceof Array) {
        pointsArray = points;
      } else if (points instanceof PIEVector3) {
        pointsArray = points.toArray();
      }

      if (pointsArray) {
        var arrayPoints = new PIEArray(pointsArray, PIEArrayType.Float64);
        handle = Module._PlotTranslateAction_Create(duration, arrayPoints.getHandle());
        arrayPoints.dispose();
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotMoveAction.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘旋转动画对象
   * @name PlotRotateAction
   * @class PlotRotateAction
   *
   * @param {Object} options -
   * @param {Number} options.duration -相机运行时间
   * @param {(Array/PIEVector3)} options.rotate -旋转角度
   *
   * @extends PlotAction
   */

  function PIEPlotRotateAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      var rotate = options.rotate;
      var rotateArray = null;

      if (rotate instanceof Array) {
        rotateArray = rotate;
      } else if (rotate instanceof PIEVector3) {
        rotateArray = rotate.toArray();
      }

      if (rotateArray) {
        var arrayRotate = new PIEArray(rotateArray, PIEArrayType.Float64);
        handle = Module._PlotRotateAction_Create(duration, arrayRotate.getHandle());
        arrayRotate.dispose();
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotRotateAction.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘比例动画对象
   * @name PlotScaleAction
   * @class PlotScaleAction
   *
   * @param {Object} options -
   * @param {Number} options.duration -相机运行时间
   * @param {(Array/PIEVector3)} options.scale -比例
   *
   * @extends PlotAction
   */

  function PIEPlotScaleAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      var scale = options.scale;
      var scaleArray = null;

      if (scale instanceof Array) {
        scaleArray = scale;
      } else if (scale instanceof PIEVector3) {
        scaleArray = scale.toArray();
      }

      if (scaleArray) {
        var arrayScale = new PIEArray(scaleArray, PIEArrayType.Float64);
        handle = Module._PlotScaleAction_Create(duration, arrayScale.getHandle());
        arrayScale.dispose();
        autoRelease = true;
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotScaleAction.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 动画模块
   * ---
   */

  /**
   *
   * 创建标绘擦动动画对象
   * @name PlotWipeAction
   * @class PlotWipeAction
   *
   * @param {Object} options -
   * @param {Number} options.duration -相机运行时间
   * @param {PIEWipeActionType} options.type -擦动类型
   *
   * @extends PlotAction
   */

  function PIEPlotWipeAction(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var duration = options.duration; //生长时间

      var type = options.type;
      handle = Module._PlotWipeAction_Create(duration, type);
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEPlotAction.call(this, handle, autoRelease);
  }

  PIEPlotWipeAction.prototype = Object.assign(Object.create(PIEPlotAction.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 尺寸类
   * @name Size
   * @class Size
   *
   * @param {Number} cx -x值
   * @param {Number} cy -y值
   */
  function PIESize(cx, cy) {
    this.cx = cx;
    this.cy = cy;
  }

  Object.assign(PIESize.prototype, {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建像素范围对象
   * @name Rect
   * @class Rect
   * 像素范围类相关函数
   *
   * @param {Number} left -左值
   * @param {Number} top -上值
   * @param {Number} right -右值
   * @param {Number} bottom -下值
   */

  function PIERect(left, top, right, bottom) {
    this.left = left;
    this.top = top;
    this.right = right;
    this.bottom = bottom;
  }

  Object.assign(PIERect.prototype, {
    /**
     * 获取宽度
     * @memberOf Rect#
     * @returns {Number} -返回宽度
     */
    getWidth: function getWidth() {
      return this.right - this.left;
    },

    /**
     * 获取高度
     * @memberOf Rect#
     * @returns {Number} -返回高度
     */
    getHeight: function getHeight() {
      return this.bottom - this.top;
    },

    /**
     * 矩形合并
     * @param {Number} x
     * @param {Number} y
     * @memberOf Rect#
     *
     */
    union: function union(x, y) {
      this.left = Math.min(this.left, x);
      this.top = Math.min(this.top, y);
      this.right = Math.max(this.right, x);
      this.bottom = Math.max(this.bottom, y);
    },

    /**
     * 矩形膨胀
     * @param {Number} leftmargin -左值的膨胀尺寸
     * @param {Number} topmargin -上值的膨胀尺寸
     * @param {Number} rightmargin -右值的膨胀尺寸
     * @param {Number} bottommargin -下值的膨胀尺寸
     * @memberOf Rect#
     *
     */
    inflate: function inflate(leftmargin, topmargin, rightmargin, bottommargin) {
      this.left -= leftmargin;
      this.top -= topmargin;
      this.right += rightmargin;
      this.bottom += bottommargin;
    },

    /**
     * 矩形收缩
     * @param {Number} leftmargin -左值的收缩尺寸
     * @param {Number} topmargin -上值的收缩尺寸
     * @param {Number} rightmargin -右值的收缩尺寸
     * @param {Number} bottommargin -下值的收缩尺寸
     * @memberOf Rect#
     *
     */
    deflate: function deflate(leftmargin, topmargin, rightmargin, bottommargin) {
      this.inflate(-leftmargin, -topmargin, -rightmargin, -bottommargin);
    },
    toArray: function toArray() {
      return [this.left, this.top, this.right, this.bottom];
    }
  });

  PIERect.fromArray = function (array) {
    var arrayBuffer = array.toArrayBuffer();
    return new PIERect(arrayBuffer[0], arrayBuffer[1], arrayBuffer[2], arrayBuffer[3]);
  };

  PIERect.toArray = function (rect) {
    return new PIEArray([rect.left, rect.top, rect.right, rect.bottom], PIEArrayType.Int32);
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 文件操作
   * @name File
   *
   *
   */
  function PIEFile(value, type) {}

  Object.assign(PIEFile.prototype, {});
  /**
   * 创建目录
   * @param {String} file -文件路径
   * @memberOf File
   */

  PIEFile.makeFolder = function (file) {
    if (file != null) {
      var fileNames = file.split('/');

      if (fileNames.length > 0) {
        if (fileNames[0] == '.') {
          fileNames.splice(0, 1);
        }

        if (fileNames.length > 0) {
          var lastIndex = fileNames.length - 1;

          if (fileNames[lastIndex].indexOf('.') != -1) {
            fileNames.splice(lastIndex, 1);
          }
        }

        if (fileNames.length > 0) {
          var filePath = "";

          for (var i = 0; i < fileNames.length; i++) {
            filePath += fileNames[i];
            filePath += "/";

            try {
              Module.FS.mkdir(filePath);
            } catch (e) {}
          }
        }
      }
    }
  };

  function loadFile(handler, file, url) {
    var xhr = new XMLHttpRequest();
    xhr.timeout = 0;
    xhr.withCredentials = false;
    xhr.responseType = "arraybuffer";

    xhr.onload = function () {
      var content = this.response;

      if (content != null && this.status == 200) {
        PIEFile.makeFolder(file);
        var data = new Uint8Array(content);
        var stream = Module.FS.open(file, 'w+');
        Module.FS.write(stream, data, 0, data.length, 0);
        Module.FS.close(stream);
        handler.loaded(file, url, data);
      } else {
        handler.loaded(file, url, null);
      }
    };

    xhr.open("GET", url, true);
    xhr.send(null);
  }
  /**
   * 加载文件
   * @param {String} file -文件路径
   * @param {String} url -服务路径
   * @param {PIEEvent} callback -回调函数
   * @memberOf File
   */


  PIEFile.loadFile = function (file, url, callback) {
    if (file != null && url != null) {
      var handler = {};
      handler.callback = callback;

      handler.loaded = function (file, url, data) {
        this.callback(file, url, data);
      };

      loadFile(handler, file, url);
    }
  };
  /**
   * 加载文件
   * @param {String} files -文件路径
   * @param {String} urls -服务路径
   * @param {PIEEvent} callback -回调函数
   * @memberOf File
   */


  PIEFile.loadFiles = function (files, urls, callback) {
    if (files.length == urls.length) {
      var handler = {};
      handler.count = urls.length;
      handler.files = [];
      handler.urls = [];
      handler.fileMap = {};
      handler.datas = [];
      handler.callback = callback;

      for (var i = 0; i < files.length; i++) {
        handler.fileMap[files[i]] = i;
      }

      handler.loaded = function (file, url, data) {
        this.files[handler.fileMap[file]] = file;
        this.urls[handler.fileMap[file]] = url;
        this.datas[handler.fileMap[file]] = data;
        handler.count--;

        if (handler.count == 0) {
          this.callback(this.files, this.urls, this.datas);
        }
      };

      for (var _i = 0; _i < urls.length; _i++) {
        loadFile(handler, files[_i], urls[_i]);
      }
    }
  };

  PIEFile.uuid = function (len, radix) {
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
    var uuid = [],
        i;
    radix = radix || chars.length;

    if (len) {
      // Compact form
      for (i = 0; i < len; i++) {
        uuid[i] = chars[0 | Math.random() * radix];
      }
    } else {
      // rfc4122, version 4 form
      var r; // rfc4122 requires these characters

      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
      uuid[14] = '4'; // Fill in random data.  At i==19 set the high bits of clock sequence as
      // per rfc4122, sec. 4.1.5

      for (i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random() * 16;
          uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];
        }
      }
    }

    return uuid.join('');
  };

  PIEFile.getFileName = function (url) {
    if (url.indexOf('?') > -1) {
      var filePath = url.split('?');
      url = filePath[0];
    }

    var pos1 = url.lastIndexOf('/');
    var pos2 = url.lastIndexOf('\\');
    var pos = Math.max(pos1, pos2);
    if (pos < 0) return url;else return url.substring(pos + 1);
  };

  PIEFile.getExtFromName = function (fileName) {
    if (fileName.indexOf('.') > -1) {
      var fileMsg = fileName.split('.');
      var fileExt = fileMsg[fileMsg.length - 1];
      return fileExt;
    }

    return "";
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 新添加颜色对象
   * @name Color
   * @class Color
   * 颜色类
   *
   * @param {Number} r -红 -范围(0~255)
   * @param {Number} g -绿 -范围(0~255)
   * @param {Number} b -蓝 -范围(0~255)
   * @param {Number} a -透明 -范围(0~255)
   * @example
   * let color = new PIE.Color(255,0,0,255);//红色
   */

  function PIEColor(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
  }

  Object.assign(PIEColor.prototype, {
    /**
     * color对象克隆
     * @memberOf Color#
     * @returns {PIEColor} 返回克隆的color对象
     *
     */
    clone: function clone() {
      return new PIEColor(this.r, this.g, this.b, this.a);
    },
    toArray: function toArray() {
      var array = [this.r, this.g, this.b, this.a];
      return array;
    }
  });

  function defined(value) {
    return value !== undefined && value !== null;
  }

  function defaultValue(a, b) {
    if (a !== undefined && a !== null) {
      return a;
    }

    return b;
  }

  function hue2rgb(m1, m2, h) {
    if (h < 0) {
      h += 1;
    }

    if (h > 1) {
      h -= 1;
    }

    if (h * 6 < 1) {
      return m1 + (m2 - m1) * 6 * h;
    }

    if (h * 2 < 1) {
      return m2;
    }

    if (h * 3 < 2) {
      return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    }

    return m1;
  } //#rgba


  var rgbaMatcher = /^#([0-9a-f])([0-9a-f])([0-9a-f])([0-9a-f])?$/i; //#rrggbbaa

  var rrggbbaaMatcher = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})?$/i; //rgb(), rgba(), or rgb%()

  var rgbParenthesesMatcher = /^rgba?\(\s*([0-9.]+%?)\s*,\s*([0-9.]+%?)\s*,\s*([0-9.]+%?)(?:\s*,\s*([0-9.]+))?\s*\)$/i; //hsl() or hsla()

  var hslParenthesesMatcher = /^hsla?\(\s*([0-9.]+)\s*,\s*([0-9.]+%)\s*,\s*([0-9.]+%)(?:\s*,\s*([0-9.]+))?\s*\)$/i;

  PIEColor.clone = function (color, result) {
    if (!defined(color)) {
      return undefined;
    }

    if (!defined(result)) {
      return new PIEColor(color.r, color.g, color.b, color.a);
    }

    result.r = color.r;
    result.g = color.g;
    result.b = color.b;
    result.a = color.a;
    return result;
  };

  PIEColor.fromHsl = function (hue, saturation, lightness, alpha, result) {
    hue = defaultValue(hue, 0.0) % 1.0;
    saturation = defaultValue(saturation, 0.0);
    lightness = defaultValue(lightness, 0.0);
    alpha = defaultValue(alpha, 1.0);
    var red = lightness;
    var green = lightness;
    var blue = lightness;

    if (saturation !== 0) {
      var m2;

      if (lightness < 0.5) {
        m2 = lightness * (1 + saturation);
      } else {
        m2 = lightness + saturation - lightness * saturation;
      }

      var m1 = 2.0 * lightness - m2;
      red = hue2rgb(m1, m2, hue + 1 / 3);
      green = hue2rgb(m1, m2, hue);
      blue = hue2rgb(m1, m2, hue - 1 / 3);
    }

    if (!defined(result)) {
      return new PIEColor(red * 255, green * 255, blue * 255, alpha * 255);
    }

    result.r = red * 255;
    result.g = green * 255;
    result.b = blue * 255;
    result.a = alpha * 255;
    return result;
  };

  PIEColor.fromCssColorString = function (color, result) {
    //>>includeStart('debug', pragmas.debug);
    // Check.typeOf.string("color", color);
    //>>includeEnd('debug');
    if (!defined(result)) {
      result = new PIEColor();
    } // Remove all whitespaces from the color string


    color = color.replace(/\s/g, "");
    var namedColor = PIEColor[color.toUpperCase()];

    if (defined(namedColor)) {
      PIEColor.clone(namedColor, result);
      return result;
    }

    var matches = rgbaMatcher.exec(color);

    if (matches !== null) {
      result.r = parseInt(matches[1], 16) / 15.0 * 255;
      result.g = parseInt(matches[2], 16) / 15.0 * 255;
      result.b = parseInt(matches[3], 16) / 15.0 * 255;
      result.a = parseInt(defaultValue(matches[4], "f"), 16) / 15.0 * 255;
      return result;
    }

    matches = rrggbbaaMatcher.exec(color);

    if (matches !== null) {
      result.r = parseInt(matches[1], 16);
      result.g = parseInt(matches[2], 16);
      result.b = parseInt(matches[3], 16);
      result.a = parseInt(defaultValue(matches[4], "ff"), 16);
      return result;
    }

    matches = rgbParenthesesMatcher.exec(color);

    if (matches !== null) {
      result.r = parseFloat(matches[1]) * ("%" === matches[1].substring(-1) ? 2.55 : 1);
      result.g = parseFloat(matches[2]) * ("%" === matches[2].substring(-1) ? 2.55 : 1);
      result.b = parseFloat(matches[3]) * ("%" === matches[3].substring(-1) ? 2.55 : 1);
      result.a = parseFloat(defaultValue(matches[4], "1.0")) * 255;
      return result;
    }

    matches = hslParenthesesMatcher.exec(color);

    if (matches !== null) {
      return PIEColor.fromHsl(parseFloat(matches[1]) / 360.0, parseFloat(matches[2]) / 100.0, parseFloat(matches[3]) / 100.0, parseFloat(defaultValue(matches[4], "1.0")), result);
    }

    result = undefined;
    return result;
  };
  /**
   * An immutable Color instance initialized to CSS color #F0F8FF
   * <span class="colorSwath" style="background: #F0F8FF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */


  PIEColor.ALICEBLUE = Object.freeze(PIEColor.fromCssColorString("#F0F8FF"));
  /**
   * An immutable Color instance initialized to CSS color #FAEBD7
   * <span class="colorSwath" style="background: #FAEBD7;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.ANTIQUEWHITE = Object.freeze(PIEColor.fromCssColorString("#FAEBD7"));
  /**
   * An immutable Color instance initialized to CSS color #00FFFF
   * <span class="colorSwath" style="background: #00FFFF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.AQUA = Object.freeze(PIEColor.fromCssColorString("#00FFFF"));
  /**
   * An immutable Color instance initialized to CSS color #7FFFD4
   * <span class="colorSwath" style="background: #7FFFD4;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.AQUAMARINE = Object.freeze(PIEColor.fromCssColorString("#7FFFD4"));
  /**
   * An immutable Color instance initialized to CSS color #F0FFFF
   * <span class="colorSwath" style="background: #F0FFFF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.AZURE = Object.freeze(PIEColor.fromCssColorString("#F0FFFF"));
  /**
   * An immutable Color instance initialized to CSS color #F5F5DC
   * <span class="colorSwath" style="background: #F5F5DC;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BEIGE = Object.freeze(PIEColor.fromCssColorString("#F5F5DC"));
  /**
   * An immutable Color instance initialized to CSS color #FFE4C4
   * <span class="colorSwath" style="background: #FFE4C4;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BISQUE = Object.freeze(PIEColor.fromCssColorString("#FFE4C4"));
  /**
   * An immutable Color instance initialized to CSS color #000000
   * <span class="colorSwath" style="background: #000000;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BLACK = Object.freeze(PIEColor.fromCssColorString("#000000"));
  /**
   * An immutable Color instance initialized to CSS color #FFEBCD
   * <span class="colorSwath" style="background: #FFEBCD;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BLANCHEDALMOND = Object.freeze(PIEColor.fromCssColorString("#FFEBCD"));
  /**
   * An immutable Color instance initialized to CSS color #0000FF
   * <span class="colorSwath" style="background: #0000FF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BLUE = Object.freeze(PIEColor.fromCssColorString("#0000FF"));
  /**
   * An immutable Color instance initialized to CSS color #8A2BE2
   * <span class="colorSwath" style="background: #8A2BE2;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BLUEVIOLET = Object.freeze(PIEColor.fromCssColorString("#8A2BE2"));
  /**
   * An immutable Color instance initialized to CSS color #A52A2A
   * <span class="colorSwath" style="background: #A52A2A;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BROWN = Object.freeze(PIEColor.fromCssColorString("#A52A2A"));
  /**
   * An immutable Color instance initialized to CSS color #DEB887
   * <span class="colorSwath" style="background: #DEB887;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.BURLYWOOD = Object.freeze(PIEColor.fromCssColorString("#DEB887"));
  /**
   * An immutable Color instance initialized to CSS color #5F9EA0
   * <span class="colorSwath" style="background: #5F9EA0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CADETBLUE = Object.freeze(PIEColor.fromCssColorString("#5F9EA0"));
  /**
   * An immutable Color instance initialized to CSS color #7FFF00
   * <span class="colorSwath" style="background: #7FFF00;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CHARTREUSE = Object.freeze(PIEColor.fromCssColorString("#7FFF00"));
  /**
   * An immutable Color instance initialized to CSS color #D2691E
   * <span class="colorSwath" style="background: #D2691E;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CHOCOLATE = Object.freeze(PIEColor.fromCssColorString("#D2691E"));
  /**
   * An immutable Color instance initialized to CSS color #FF7F50
   * <span class="colorSwath" style="background: #FF7F50;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CORAL = Object.freeze(PIEColor.fromCssColorString("#FF7F50"));
  /**
   * An immutable Color instance initialized to CSS color #6495ED
   * <span class="colorSwath" style="background: #6495ED;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CORNFLOWERBLUE = Object.freeze(PIEColor.fromCssColorString("#6495ED"));
  /**
   * An immutable Color instance initialized to CSS color #FFF8DC
   * <span class="colorSwath" style="background: #FFF8DC;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CORNSILK = Object.freeze(PIEColor.fromCssColorString("#FFF8DC"));
  /**
   * An immutable Color instance initialized to CSS color #DC143C
   * <span class="colorSwath" style="background: #DC143C;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CRIMSON = Object.freeze(PIEColor.fromCssColorString("#DC143C"));
  /**
   * An immutable Color instance initialized to CSS color #00FFFF
   * <span class="colorSwath" style="background: #00FFFF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.CYAN = Object.freeze(PIEColor.fromCssColorString("#00FFFF"));
  /**
   * An immutable Color instance initialized to CSS color #00008B
   * <span class="colorSwath" style="background: #00008B;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKBLUE = Object.freeze(PIEColor.fromCssColorString("#00008B"));
  /**
   * An immutable Color instance initialized to CSS color #008B8B
   * <span class="colorSwath" style="background: #008B8B;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKCYAN = Object.freeze(PIEColor.fromCssColorString("#008B8B"));
  /**
   * An immutable Color instance initialized to CSS color #B8860B
   * <span class="colorSwath" style="background: #B8860B;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKGOLDENROD = Object.freeze(PIEColor.fromCssColorString("#B8860B"));
  /**
   * An immutable Color instance initialized to CSS color #A9A9A9
   * <span class="colorSwath" style="background: #A9A9A9;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKGRAY = Object.freeze(PIEColor.fromCssColorString("#A9A9A9"));
  /**
   * An immutable Color instance initialized to CSS color #006400
   * <span class="colorSwath" style="background: #006400;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKGREEN = Object.freeze(PIEColor.fromCssColorString("#006400"));
  /**
   * An immutable Color instance initialized to CSS color #A9A9A9
   * <span class="colorSwath" style="background: #A9A9A9;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKGREY = PIEColor.DARKGRAY;
  /**
   * An immutable Color instance initialized to CSS color #BDB76B
   * <span class="colorSwath" style="background: #BDB76B;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKKHAKI = Object.freeze(PIEColor.fromCssColorString("#BDB76B"));
  /**
   * An immutable Color instance initialized to CSS color #8B008B
   * <span class="colorSwath" style="background: #8B008B;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKMAGENTA = Object.freeze(PIEColor.fromCssColorString("#8B008B"));
  /**
   * An immutable Color instance initialized to CSS color #556B2F
   * <span class="colorSwath" style="background: #556B2F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKOLIVEGREEN = Object.freeze(PIEColor.fromCssColorString("#556B2F"));
  /**
   * An immutable Color instance initialized to CSS color #FF8C00
   * <span class="colorSwath" style="background: #FF8C00;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKORANGE = Object.freeze(PIEColor.fromCssColorString("#FF8C00"));
  /**
   * An immutable Color instance initialized to CSS color #9932CC
   * <span class="colorSwath" style="background: #9932CC;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKORCHID = Object.freeze(PIEColor.fromCssColorString("#9932CC"));
  /**
   * An immutable Color instance initialized to CSS color #8B0000
   * <span class="colorSwath" style="background: #8B0000;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKRED = Object.freeze(PIEColor.fromCssColorString("#8B0000"));
  /**
   * An immutable Color instance initialized to CSS color #E9967A
   * <span class="colorSwath" style="background: #E9967A;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKSALMON = Object.freeze(PIEColor.fromCssColorString("#E9967A"));
  /**
   * An immutable Color instance initialized to CSS color #8FBC8F
   * <span class="colorSwath" style="background: #8FBC8F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKSEAGREEN = Object.freeze(PIEColor.fromCssColorString("#8FBC8F"));
  /**
   * An immutable Color instance initialized to CSS color #483D8B
   * <span class="colorSwath" style="background: #483D8B;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKSLATEBLUE = Object.freeze(PIEColor.fromCssColorString("#483D8B"));
  /**
   * An immutable Color instance initialized to CSS color #2F4F4F
   * <span class="colorSwath" style="background: #2F4F4F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKSLATEGRAY = Object.freeze(PIEColor.fromCssColorString("#2F4F4F"));
  /**
   * An immutable Color instance initialized to CSS color #2F4F4F
   * <span class="colorSwath" style="background: #2F4F4F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKSLATEGREY = PIEColor.DARKSLATEGRAY;
  /**
   * An immutable Color instance initialized to CSS color #00CED1
   * <span class="colorSwath" style="background: #00CED1;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKTURQUOISE = Object.freeze(PIEColor.fromCssColorString("#00CED1"));
  /**
   * An immutable Color instance initialized to CSS color #9400D3
   * <span class="colorSwath" style="background: #9400D3;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DARKVIOLET = Object.freeze(PIEColor.fromCssColorString("#9400D3"));
  /**
   * An immutable Color instance initialized to CSS color #FF1493
   * <span class="colorSwath" style="background: #FF1493;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DEEPPINK = Object.freeze(PIEColor.fromCssColorString("#FF1493"));
  /**
   * An immutable Color instance initialized to CSS color #00BFFF
   * <span class="colorSwath" style="background: #00BFFF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DEEPSKYBLUE = Object.freeze(PIEColor.fromCssColorString("#00BFFF"));
  /**
   * An immutable Color instance initialized to CSS color #696969
   * <span class="colorSwath" style="background: #696969;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DIMGRAY = Object.freeze(PIEColor.fromCssColorString("#696969"));
  /**
   * An immutable Color instance initialized to CSS color #696969
   * <span class="colorSwath" style="background: #696969;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DIMGREY = PIEColor.DIMGRAY;
  /**
   * An immutable Color instance initialized to CSS color #1E90FF
   * <span class="colorSwath" style="background: #1E90FF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.DODGERBLUE = Object.freeze(PIEColor.fromCssColorString("#1E90FF"));
  /**
   * An immutable Color instance initialized to CSS color #B22222
   * <span class="colorSwath" style="background: #B22222;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.FIREBRICK = Object.freeze(PIEColor.fromCssColorString("#B22222"));
  /**
   * An immutable Color instance initialized to CSS color #FFFAF0
   * <span class="colorSwath" style="background: #FFFAF0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.FLORALWHITE = Object.freeze(PIEColor.fromCssColorString("#FFFAF0"));
  /**
   * An immutable Color instance initialized to CSS color #228B22
   * <span class="colorSwath" style="background: #228B22;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.FORESTGREEN = Object.freeze(PIEColor.fromCssColorString("#228B22"));
  /**
   * An immutable Color instance initialized to CSS color #FF00FF
   * <span class="colorSwath" style="background: #FF00FF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.FUCHSIA = Object.freeze(PIEColor.fromCssColorString("#FF00FF"));
  /**
   * An immutable Color instance initialized to CSS color #DCDCDC
   * <span class="colorSwath" style="background: #DCDCDC;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GAINSBORO = Object.freeze(PIEColor.fromCssColorString("#DCDCDC"));
  /**
   * An immutable Color instance initialized to CSS color #F8F8FF
   * <span class="colorSwath" style="background: #F8F8FF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GHOSTWHITE = Object.freeze(PIEColor.fromCssColorString("#F8F8FF"));
  /**
   * An immutable Color instance initialized to CSS color #FFD700
   * <span class="colorSwath" style="background: #FFD700;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GOLD = Object.freeze(PIEColor.fromCssColorString("#FFD700"));
  /**
   * An immutable Color instance initialized to CSS color #DAA520
   * <span class="colorSwath" style="background: #DAA520;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GOLDENROD = Object.freeze(PIEColor.fromCssColorString("#DAA520"));
  /**
   * An immutable Color instance initialized to CSS color #808080
   * <span class="colorSwath" style="background: #808080;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GRAY = Object.freeze(PIEColor.fromCssColorString("#808080"));
  /**
   * An immutable Color instance initialized to CSS color #008000
   * <span class="colorSwath" style="background: #008000;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GREEN = Object.freeze(PIEColor.fromCssColorString("#008000"));
  /**
   * An immutable Color instance initialized to CSS color #ADFF2F
   * <span class="colorSwath" style="background: #ADFF2F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GREENYELLOW = Object.freeze(PIEColor.fromCssColorString("#ADFF2F"));
  /**
   * An immutable Color instance initialized to CSS color #808080
   * <span class="colorSwath" style="background: #808080;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.GREY = PIEColor.GRAY;
  /**
   * An immutable Color instance initialized to CSS color #F0FFF0
   * <span class="colorSwath" style="background: #F0FFF0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.HONEYDEW = Object.freeze(PIEColor.fromCssColorString("#F0FFF0"));
  /**
   * An immutable Color instance initialized to CSS color #FF69B4
   * <span class="colorSwath" style="background: #FF69B4;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.HOTPINK = Object.freeze(PIEColor.fromCssColorString("#FF69B4"));
  /**
   * An immutable Color instance initialized to CSS color #CD5C5C
   * <span class="colorSwath" style="background: #CD5C5C;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.INDIANRED = Object.freeze(PIEColor.fromCssColorString("#CD5C5C"));
  /**
   * An immutable Color instance initialized to CSS color #4B0082
   * <span class="colorSwath" style="background: #4B0082;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.INDIGO = Object.freeze(PIEColor.fromCssColorString("#4B0082"));
  /**
   * An immutable Color instance initialized to CSS color #FFFFF0
   * <span class="colorSwath" style="background: #FFFFF0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.IVORY = Object.freeze(PIEColor.fromCssColorString("#FFFFF0"));
  /**
   * An immutable Color instance initialized to CSS color #F0E68C
   * <span class="colorSwath" style="background: #F0E68C;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.KHAKI = Object.freeze(PIEColor.fromCssColorString("#F0E68C"));
  /**
   * An immutable Color instance initialized to CSS color #E6E6FA
   * <span class="colorSwath" style="background: #E6E6FA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LAVENDER = Object.freeze(PIEColor.fromCssColorString("#E6E6FA"));
  /**
   * An immutable Color instance initialized to CSS color #FFF0F5
   * <span class="colorSwath" style="background: #FFF0F5;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LAVENDAR_BLUSH = Object.freeze(PIEColor.fromCssColorString("#FFF0F5"));
  /**
   * An immutable Color instance initialized to CSS color #7CFC00
   * <span class="colorSwath" style="background: #7CFC00;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LAWNGREEN = Object.freeze(PIEColor.fromCssColorString("#7CFC00"));
  /**
   * An immutable Color instance initialized to CSS color #FFFACD
   * <span class="colorSwath" style="background: #FFFACD;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LEMONCHIFFON = Object.freeze(PIEColor.fromCssColorString("#FFFACD"));
  /**
   * An immutable Color instance initialized to CSS color #ADD8E6
   * <span class="colorSwath" style="background: #ADD8E6;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTBLUE = Object.freeze(PIEColor.fromCssColorString("#ADD8E6"));
  /**
   * An immutable Color instance initialized to CSS color #F08080
   * <span class="colorSwath" style="background: #F08080;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTCORAL = Object.freeze(PIEColor.fromCssColorString("#F08080"));
  /**
   * An immutable Color instance initialized to CSS color #E0FFFF
   * <span class="colorSwath" style="background: #E0FFFF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTCYAN = Object.freeze(PIEColor.fromCssColorString("#E0FFFF"));
  /**
   * An immutable Color instance initialized to CSS color #FAFAD2
   * <span class="colorSwath" style="background: #FAFAD2;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTGOLDENRODYELLOW = Object.freeze(PIEColor.fromCssColorString("#FAFAD2"));
  /**
   * An immutable Color instance initialized to CSS color #D3D3D3
   * <span class="colorSwath" style="background: #D3D3D3;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTGRAY = Object.freeze(PIEColor.fromCssColorString("#D3D3D3"));
  /**
   * An immutable Color instance initialized to CSS color #90EE90
   * <span class="colorSwath" style="background: #90EE90;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTGREEN = Object.freeze(PIEColor.fromCssColorString("#90EE90"));
  /**
   * An immutable Color instance initialized to CSS color #D3D3D3
   * <span class="colorSwath" style="background: #D3D3D3;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTGREY = PIEColor.LIGHTGRAY;
  /**
   * An immutable Color instance initialized to CSS color #FFB6C1
   * <span class="colorSwath" style="background: #FFB6C1;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTPINK = Object.freeze(PIEColor.fromCssColorString("#FFB6C1"));
  /**
   * An immutable Color instance initialized to CSS color #20B2AA
   * <span class="colorSwath" style="background: #20B2AA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTSEAGREEN = Object.freeze(PIEColor.fromCssColorString("#20B2AA"));
  /**
   * An immutable Color instance initialized to CSS color #87CEFA
   * <span class="colorSwath" style="background: #87CEFA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTSKYBLUE = Object.freeze(PIEColor.fromCssColorString("#87CEFA"));
  /**
   * An immutable Color instance initialized to CSS color #778899
   * <span class="colorSwath" style="background: #778899;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTSLATEGRAY = Object.freeze(PIEColor.fromCssColorString("#778899"));
  /**
   * An immutable Color instance initialized to CSS color #778899
   * <span class="colorSwath" style="background: #778899;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTSLATEGREY = PIEColor.LIGHTSLATEGRAY;
  /**
   * An immutable Color instance initialized to CSS color #B0C4DE
   * <span class="colorSwath" style="background: #B0C4DE;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTSTEELBLUE = Object.freeze(PIEColor.fromCssColorString("#B0C4DE"));
  /**
   * An immutable Color instance initialized to CSS color #FFFFE0
   * <span class="colorSwath" style="background: #FFFFE0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIGHTYELLOW = Object.freeze(PIEColor.fromCssColorString("#FFFFE0"));
  /**
   * An immutable Color instance initialized to CSS color #00FF00
   * <span class="colorSwath" style="background: #00FF00;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIME = Object.freeze(PIEColor.fromCssColorString("#00FF00"));
  /**
   * An immutable Color instance initialized to CSS color #32CD32
   * <span class="colorSwath" style="background: #32CD32;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LIMEGREEN = Object.freeze(PIEColor.fromCssColorString("#32CD32"));
  /**
   * An immutable Color instance initialized to CSS color #FAF0E6
   * <span class="colorSwath" style="background: #FAF0E6;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.LINEN = Object.freeze(PIEColor.fromCssColorString("#FAF0E6"));
  /**
   * An immutable Color instance initialized to CSS color #FF00FF
   * <span class="colorSwath" style="background: #FF00FF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MAGENTA = Object.freeze(PIEColor.fromCssColorString("#FF00FF"));
  /**
   * An immutable Color instance initialized to CSS color #800000
   * <span class="colorSwath" style="background: #800000;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MAROON = Object.freeze(PIEColor.fromCssColorString("#800000"));
  /**
   * An immutable Color instance initialized to CSS color #66CDAA
   * <span class="colorSwath" style="background: #66CDAA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMAQUAMARINE = Object.freeze(PIEColor.fromCssColorString("#66CDAA"));
  /**
   * An immutable Color instance initialized to CSS color #0000CD
   * <span class="colorSwath" style="background: #0000CD;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMBLUE = Object.freeze(PIEColor.fromCssColorString("#0000CD"));
  /**
   * An immutable Color instance initialized to CSS color #BA55D3
   * <span class="colorSwath" style="background: #BA55D3;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMORCHID = Object.freeze(PIEColor.fromCssColorString("#BA55D3"));
  /**
   * An immutable Color instance initialized to CSS color #9370DB
   * <span class="colorSwath" style="background: #9370DB;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMPURPLE = Object.freeze(PIEColor.fromCssColorString("#9370DB"));
  /**
   * An immutable Color instance initialized to CSS color #3CB371
   * <span class="colorSwath" style="background: #3CB371;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMSEAGREEN = Object.freeze(PIEColor.fromCssColorString("#3CB371"));
  /**
   * An immutable Color instance initialized to CSS color #7B68EE
   * <span class="colorSwath" style="background: #7B68EE;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMSLATEBLUE = Object.freeze(PIEColor.fromCssColorString("#7B68EE"));
  /**
   * An immutable Color instance initialized to CSS color #00FA9A
   * <span class="colorSwath" style="background: #00FA9A;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMSPRINGGREEN = Object.freeze(PIEColor.fromCssColorString("#00FA9A"));
  /**
   * An immutable Color instance initialized to CSS color #48D1CC
   * <span class="colorSwath" style="background: #48D1CC;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMTURQUOISE = Object.freeze(PIEColor.fromCssColorString("#48D1CC"));
  /**
   * An immutable Color instance initialized to CSS color #C71585
   * <span class="colorSwath" style="background: #C71585;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MEDIUMVIOLETRED = Object.freeze(PIEColor.fromCssColorString("#C71585"));
  /**
   * An immutable Color instance initialized to CSS color #191970
   * <span class="colorSwath" style="background: #191970;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MIDNIGHTBLUE = Object.freeze(PIEColor.fromCssColorString("#191970"));
  /**
   * An immutable Color instance initialized to CSS color #F5FFFA
   * <span class="colorSwath" style="background: #F5FFFA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MINTCREAM = Object.freeze(PIEColor.fromCssColorString("#F5FFFA"));
  /**
   * An immutable Color instance initialized to CSS color #FFE4E1
   * <span class="colorSwath" style="background: #FFE4E1;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MISTYROSE = Object.freeze(PIEColor.fromCssColorString("#FFE4E1"));
  /**
   * An immutable Color instance initialized to CSS color #FFE4B5
   * <span class="colorSwath" style="background: #FFE4B5;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.MOCCASIN = Object.freeze(PIEColor.fromCssColorString("#FFE4B5"));
  /**
   * An immutable Color instance initialized to CSS color #FFDEAD
   * <span class="colorSwath" style="background: #FFDEAD;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.NAVAJOWHITE = Object.freeze(PIEColor.fromCssColorString("#FFDEAD"));
  /**
   * An immutable Color instance initialized to CSS color #000080
   * <span class="colorSwath" style="background: #000080;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.NAVY = Object.freeze(PIEColor.fromCssColorString("#000080"));
  /**
   * An immutable Color instance initialized to CSS color #FDF5E6
   * <span class="colorSwath" style="background: #FDF5E6;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.OLDLACE = Object.freeze(PIEColor.fromCssColorString("#FDF5E6"));
  /**
   * An immutable Color instance initialized to CSS color #808000
   * <span class="colorSwath" style="background: #808000;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.OLIVE = Object.freeze(PIEColor.fromCssColorString("#808000"));
  /**
   * An immutable Color instance initialized to CSS color #6B8E23
   * <span class="colorSwath" style="background: #6B8E23;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.OLIVEDRAB = Object.freeze(PIEColor.fromCssColorString("#6B8E23"));
  /**
   * An immutable Color instance initialized to CSS color #FFA500
   * <span class="colorSwath" style="background: #FFA500;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.ORANGE = Object.freeze(PIEColor.fromCssColorString("#FFA500"));
  /**
   * An immutable Color instance initialized to CSS color #FF4500
   * <span class="colorSwath" style="background: #FF4500;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.ORANGERED = Object.freeze(PIEColor.fromCssColorString("#FF4500"));
  /**
   * An immutable Color instance initialized to CSS color #DA70D6
   * <span class="colorSwath" style="background: #DA70D6;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.ORCHID = Object.freeze(PIEColor.fromCssColorString("#DA70D6"));
  /**
   * An immutable Color instance initialized to CSS color #EEE8AA
   * <span class="colorSwath" style="background: #EEE8AA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PALEGOLDENROD = Object.freeze(PIEColor.fromCssColorString("#EEE8AA"));
  /**
   * An immutable Color instance initialized to CSS color #98FB98
   * <span class="colorSwath" style="background: #98FB98;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PALEGREEN = Object.freeze(PIEColor.fromCssColorString("#98FB98"));
  /**
   * An immutable Color instance initialized to CSS color #AFEEEE
   * <span class="colorSwath" style="background: #AFEEEE;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PALETURQUOISE = Object.freeze(PIEColor.fromCssColorString("#AFEEEE"));
  /**
   * An immutable Color instance initialized to CSS color #DB7093
   * <span class="colorSwath" style="background: #DB7093;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PALEVIOLETRED = Object.freeze(PIEColor.fromCssColorString("#DB7093"));
  /**
   * An immutable Color instance initialized to CSS color #FFEFD5
   * <span class="colorSwath" style="background: #FFEFD5;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PAPAYAWHIP = Object.freeze(PIEColor.fromCssColorString("#FFEFD5"));
  /**
   * An immutable Color instance initialized to CSS color #FFDAB9
   * <span class="colorSwath" style="background: #FFDAB9;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PEACHPUFF = Object.freeze(PIEColor.fromCssColorString("#FFDAB9"));
  /**
   * An immutable Color instance initialized to CSS color #CD853F
   * <span class="colorSwath" style="background: #CD853F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PERU = Object.freeze(PIEColor.fromCssColorString("#CD853F"));
  /**
   * An immutable Color instance initialized to CSS color #FFC0CB
   * <span class="colorSwath" style="background: #FFC0CB;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PINK = Object.freeze(PIEColor.fromCssColorString("#FFC0CB"));
  /**
   * An immutable Color instance initialized to CSS color #DDA0DD
   * <span class="colorSwath" style="background: #DDA0DD;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PLUM = Object.freeze(PIEColor.fromCssColorString("#DDA0DD"));
  /**
   * An immutable Color instance initialized to CSS color #B0E0E6
   * <span class="colorSwath" style="background: #B0E0E6;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.POWDERBLUE = Object.freeze(PIEColor.fromCssColorString("#B0E0E6"));
  /**
   * An immutable Color instance initialized to CSS color #800080
   * <span class="colorSwath" style="background: #800080;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.PURPLE = Object.freeze(PIEColor.fromCssColorString("#800080"));
  /**
   * An immutable Color instance initialized to CSS color #FF0000
   * <span class="colorSwath" style="background: #FF0000;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.RED = Object.freeze(PIEColor.fromCssColorString("#FF0000"));
  /**
   * An immutable Color instance initialized to CSS color #BC8F8F
   * <span class="colorSwath" style="background: #BC8F8F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.ROSYBROWN = Object.freeze(PIEColor.fromCssColorString("#BC8F8F"));
  /**
   * An immutable Color instance initialized to CSS color #4169E1
   * <span class="colorSwath" style="background: #4169E1;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.ROYALBLUE = Object.freeze(PIEColor.fromCssColorString("#4169E1"));
  /**
   * An immutable Color instance initialized to CSS color #8B4513
   * <span class="colorSwath" style="background: #8B4513;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SADDLEBROWN = Object.freeze(PIEColor.fromCssColorString("#8B4513"));
  /**
   * An immutable Color instance initialized to CSS color #FA8072
   * <span class="colorSwath" style="background: #FA8072;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SALMON = Object.freeze(PIEColor.fromCssColorString("#FA8072"));
  /**
   * An immutable Color instance initialized to CSS color #F4A460
   * <span class="colorSwath" style="background: #F4A460;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SANDYBROWN = Object.freeze(PIEColor.fromCssColorString("#F4A460"));
  /**
   * An immutable Color instance initialized to CSS color #2E8B57
   * <span class="colorSwath" style="background: #2E8B57;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SEAGREEN = Object.freeze(PIEColor.fromCssColorString("#2E8B57"));
  /**
   * An immutable Color instance initialized to CSS color #FFF5EE
   * <span class="colorSwath" style="background: #FFF5EE;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SEASHELL = Object.freeze(PIEColor.fromCssColorString("#FFF5EE"));
  /**
   * An immutable Color instance initialized to CSS color #A0522D
   * <span class="colorSwath" style="background: #A0522D;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SIENNA = Object.freeze(PIEColor.fromCssColorString("#A0522D"));
  /**
   * An immutable Color instance initialized to CSS color #C0C0C0
   * <span class="colorSwath" style="background: #C0C0C0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SILVER = Object.freeze(PIEColor.fromCssColorString("#C0C0C0"));
  /**
   * An immutable Color instance initialized to CSS color #87CEEB
   * <span class="colorSwath" style="background: #87CEEB;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SKYBLUE = Object.freeze(PIEColor.fromCssColorString("#87CEEB"));
  /**
   * An immutable Color instance initialized to CSS color #6A5ACD
   * <span class="colorSwath" style="background: #6A5ACD;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SLATEBLUE = Object.freeze(PIEColor.fromCssColorString("#6A5ACD"));
  /**
   * An immutable Color instance initialized to CSS color #708090
   * <span class="colorSwath" style="background: #708090;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SLATEGRAY = Object.freeze(PIEColor.fromCssColorString("#708090"));
  /**
   * An immutable Color instance initialized to CSS color #708090
   * <span class="colorSwath" style="background: #708090;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SLATEGREY = PIEColor.SLATEGRAY;
  /**
   * An immutable Color instance initialized to CSS color #FFFAFA
   * <span class="colorSwath" style="background: #FFFAFA;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SNOW = Object.freeze(PIEColor.fromCssColorString("#FFFAFA"));
  /**
   * An immutable Color instance initialized to CSS color #00FF7F
   * <span class="colorSwath" style="background: #00FF7F;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.SPRINGGREEN = Object.freeze(PIEColor.fromCssColorString("#00FF7F"));
  /**
   * An immutable Color instance initialized to CSS color #4682B4
   * <span class="colorSwath" style="background: #4682B4;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.STEELBLUE = Object.freeze(PIEColor.fromCssColorString("#4682B4"));
  /**
   * An immutable Color instance initialized to CSS color #D2B48C
   * <span class="colorSwath" style="background: #D2B48C;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.TAN = Object.freeze(PIEColor.fromCssColorString("#D2B48C"));
  /**
   * An immutable Color instance initialized to CSS color #008080
   * <span class="colorSwath" style="background: #008080;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.TEAL = Object.freeze(PIEColor.fromCssColorString("#008080"));
  /**
   * An immutable Color instance initialized to CSS color #D8BFD8
   * <span class="colorSwath" style="background: #D8BFD8;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.THISTLE = Object.freeze(PIEColor.fromCssColorString("#D8BFD8"));
  /**
   * An immutable Color instance initialized to CSS color #FF6347
   * <span class="colorSwath" style="background: #FF6347;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.TOMATO = Object.freeze(PIEColor.fromCssColorString("#FF6347"));
  /**
   * An immutable Color instance initialized to CSS color #40E0D0
   * <span class="colorSwath" style="background: #40E0D0;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.TURQUOISE = Object.freeze(PIEColor.fromCssColorString("#40E0D0"));
  /**
   * An immutable Color instance initialized to CSS color #EE82EE
   * <span class="colorSwath" style="background: #EE82EE;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.VIOLET = Object.freeze(PIEColor.fromCssColorString("#EE82EE"));
  /**
   * An immutable Color instance initialized to CSS color #F5DEB3
   * <span class="colorSwath" style="background: #F5DEB3;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.WHEAT = Object.freeze(PIEColor.fromCssColorString("#F5DEB3"));
  /**
   * An immutable Color instance initialized to CSS color #FFFFFF
   * <span class="colorSwath" style="background: #FFFFFF;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.WHITE = Object.freeze(PIEColor.fromCssColorString("#FFFFFF"));
  /**
   * An immutable Color instance initialized to CSS color #F5F5F5
   * <span class="colorSwath" style="background: #F5F5F5;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.WHITESMOKE = Object.freeze(PIEColor.fromCssColorString("#F5F5F5"));
  /**
   * An immutable Color instance initialized to CSS color #FFFF00
   * <span class="colorSwath" style="background: #FFFF00;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.YELLOW = Object.freeze(PIEColor.fromCssColorString("#FFFF00"));
  /**
   * An immutable Color instance initialized to CSS color #9ACD32
   * <span class="colorSwath" style="background: #9ACD32;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.YELLOWGREEN = Object.freeze(PIEColor.fromCssColorString("#9ACD32"));
  /**
   * An immutable Color instance initialized to CSS transparent.
   * <span class="colorSwath" style="background: transparent;"></span>
   *
   * @constant
   * @type {PIEColor}
   */

  PIEColor.TRANSPARENT = Object.freeze(new PIEColor(0, 0, 0, 0));

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建四至范围
   * @name Bounds
   * @class Bounds
   * 四至范围类
   *
   * @param {Number} left -左值
   * @param {Number} top -上值
   * @param {Number} right -右值
   * @param {Number} bottom -下值
   */

  function PIEBounds(left, top, right, bottom) {
    this.left = left;
    this.top = top;
    this.right = right;
    this.bottom = bottom;
  }

  Object.assign(PIEBounds.prototype, {
    /**
     * 设置为空
     * @memberOf Bounds#
     *
     */
    setEmpty: function setEmpty() {
      this.left = this.top = this.right = this.bottom = 0;
    },

    /**
     * 判断是否为空
     * @memberOf Bounds#
     * @returns {Boolean} 返回是否为空
     *
     */
    isEmpty: function isEmpty() {
      return this.left >= this.right || this.bottom >= this.top;
    },

    /**
     * 判断是否为空
     * @memberOf Bounds#
     * @returns {Boolean} 返回是否为空
     */
    isNull: function isNull() {
      return PIEMath.isZero(this.left) && PIEMath.isZero(this.right) && PIEMath.isZero(this.bottom) && PIEMath.isZero(this.top);
    },

    /**
     * 获取宽度
     * @memberOf Bounds#
     * @returns {Number} 返回宽度
     */
    getWidth: function getWidth() {
      return this.right - this.left;
    },

    /**
     * 获取高度
     * @memberOf Bounds#
     * @returns {Number} 返回高度
     *
     */
    getHeight: function getHeight() {
      return this.top - this.bottom;
    },

    /**
     * 点扩充
     * @param {PIEVector2} point -点
     * @memberOf Bounds#
     *
     */
    unionPoint: function unionPoint(point) {
      if (this.left > point.x) {
        this.left = point.x;
      }

      if (this.right < point.x) {
        this.right = point.x;
      }

      if (this.top < point.y) {
        this.top = point.y;
      }

      if (this.bottom > point.y) {
        this.bottom = point.y;
      }
    },

    /**
     * 范围扩充
     * @param {PIEBounds} bounds -范围
     * @memberOf Bounds#
     *
     */
    unionBounds: function unionBounds(bounds) {
      if (this.left > bounds.left) {
        this.left = bounds.left;
      }

      if (this.right < bounds.right) {
        this.right = bounds.right;
      }

      if (this.top < bounds.top) {
        this.top = bounds.top;
      }

      if (this.bottom > bounds.bottom) {
        this.bottom = bounds.bottom;
      }
    },

    /**
     * 范围扩大
     * @param {Number} leftmargin -左值的膨胀尺寸
     * @param {Number} topmargin -上值的膨胀尺寸
     * @param {Number} rightmargin -右值的膨胀尺寸
     * @param {Number} bottommargin -下值的膨胀尺寸
     * @memberOf Bounds#
     *
     */
    inflate: function inflate(leftmargin, topmargin, rightmargin, bottommargin) {
      this.left -= leftmargin;
      this.top += topmargin;
      this.right += rightmargin;
      this.bottom -= bottommargin;
    },

    /**
     * 范围缩小
     * @param {Number} leftmargin -左值的收缩尺寸
     * @param {Number} topmargin -上值的收缩尺寸
     * @param {Number} rightmargin -右值的收缩尺寸
     * @param {Number} bottommargin -下值的收缩尺寸
     * @memberOf Bounds#
     *
     */
    deflate: function deflate(leftmargin, topmargin, rightmargin, bottommargin) {
      this.inflate(-leftmargin, -topmargin, -rightmargin, -bottommargin);
    },

    /**
     * 范围是否相交
     * @param {PIEBounds} bounds -范围
     * @memberOf Bounds#
     * @returns {Boolean} 返回是否相交
     *
     */
    isIntersect: function isIntersect(bounds) {
      return this.right >= bounds.left && this.left <= bounds.right && this.top >= bounds.bottom && this.bottom <= bounds.top;
    },

    /**
     * 获取中心点
     * @memberOf Bounds#
     * @returns {PIEVector2} 返回中心点
     *
     */
    getCenter: function getCenter() {
      return new PIEVector2((this.right + this.left) / 2, (this.top + this.bottom) / 2);
    },

    /**
     * 拷贝数据
     * @param {PIEBounds} bounds -范围
     * @memberOf Bounds#
     *
     */
    copy: function copy(bounds) {
      this.left = bounds.left;
      this.top = bounds.top;
      this.right = bounds.right;
      this.bottom = bounds.bottom;
    },
    toArray: function toArray() {
      var array = [this.left, this.top, this.right, this.bottom];
      return array;
    }
  });

  PIEBounds.fromArray = function (array) {
    var arrayBuffer = null;

    if (array instanceof PIEArray) {
      arrayBuffer = array.toArrayBuffer();
    } else if (array instanceof Array) {
      arrayBuffer = array;
    }

    return new PIEBounds(arrayBuffer[0], arrayBuffer[1], arrayBuffer[2], arrayBuffer[3]);
  };

  PIEBounds.toArray = function (rect) {
    return new PIEArray([rect.left, rect.top, rect.right, rect.bottom], PIEArrayType.Float64);
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建三维矩阵
   * @name Matrix3
   * @class Matrix3
   * 三维矩阵操作函数
   */

  function PIEMatrix3() {
    this.m = new Float32Array(9);
    {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 1;
      this.m[5] = 0;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 1;
    }
  }

  Object.assign(PIEMatrix3.prototype, {
    /**
     * 创建矩阵
     * @param {Number} m0
     * @param {Number} m1
     * @param {Number} m2
     * @param {Number} m3
     * @param {Number} m4
     * @param {Number} m5
     * @param {Number} m6
     * @param {Number} m7
     * @param {Number} m8
     * @returns {PIEMatrix3} 返回创建的矩阵
     * @memberOf Matrix3#
     */
    create: function create(m0, m1, m2, m3, m4, m5, m6, m7, m8) {
      this.m[0] = m0;
      this.m[1] = m1;
      this.m[2] = m2;
      this.m[3] = m3;
      this.m[4] = m4;
      this.m[5] = m5;
      this.m[6] = m6;
      this.m[7] = m7;
      this.m[8] = m8;
      return this;
    },

    /**
     * 构造3*3单位矩阵
     *@returns {PIEMatrix3} 返回单位矩阵
     * @memberOf Matrix3#
     */
    identity: function identity() {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 1;
      this.m[5] = 0;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 1;
      return this;
    },

    /**
     * 初始化3*3的单位矩阵
     * @returns {PIEMatrix3} 返回初始化的矩阵
     * @memberOf Matrix3#
     */
    zero: function zero() {
      this.m[0] = 0;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 0;
      this.m[5] = 0;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 0;
      return this;
    },

    /**
     * 平移矩阵
     * @param {Number} x
     * @param {Number} y
     * @param {Number} z
     * @returns {PIEMatrix3} 返回平移后的矩阵
     * @memberOf Matrix3#
     */
    translation: function translation(x, y, z) {
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = 1;
      this.m[5] = 0;
      this.m[6] = x;
      this.m[7] = y;
      this.m[8] = 1;
      return this;
    },

    /**
     * 缩放矩阵
     * @param {Number} x
     * @param {Number} y
     * @param {Number} z
     * @returns {PIEMatrix3} 返回缩放后的矩阵
     * @memberOf Matrix3#
     */
    scaling: function scaling(x, y, z) {
      this.m[0] = x;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = y;
      this.m[5] = 0;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = z;
      return this;
    },

    /**
     * 以X轴旋转
     * @param {Number} radian -顺时针旋转角度
     * @returns {PIEMatrix3} 返回旋转后的矩阵
     * @memberOf Matrix3#
     */
    rotationX: function rotationX(radian) {
      var s = Math.sin(radian);
      var c = Math.cos(radian);
      this.m[0] = 1;
      this.m[1] = 0;
      this.m[2] = 0;
      this.m[3] = 0;
      this.m[4] = c;
      this.m[5] = s;
      this.m[6] = 0;
      this.m[7] = -s;
      this.m[8] = c;
      return this;
    },

    /**
     * 以Y轴旋转
     * @param {Number} radian -顺时针旋转角度
     * @returns {PIEMatrix3} 返回旋转后的矩阵
     * @memberOf Matrix3#
     */
    rotationY: function rotationY(radian) {
      var s = Math.sin(radian);
      var c = Math.cos(radian);
      this.m[0] = c;
      this.m[1] = 0;
      this.m[2] = -s;
      this.m[3] = 0;
      this.m[4] = 1;
      this.m[5] = 0;
      this.m[6] = s;
      this.m[7] = 0;
      this.m[8] = c;
      return this;
    },

    /**
     * 以Z轴旋转
     * @param {Number} radian -顺时针旋转角度
     * @returns {PIEMatrix3} 返回旋转后的矩阵
     * @memberOf Matrix3#
     */
    rotationZ: function rotationZ(radian) {
      var s = Math.sin(radian);
      var c = Math.cos(radian);
      this.m[0] = c;
      this.m[1] = s;
      this.m[2] = 0;
      this.m[3] = -s;
      this.m[4] = c;
      this.m[5] = 0;
      this.m[6] = 0;
      this.m[7] = 0;
      this.m[8] = 1;
      return this;
    },
    // /**
    //  * 把矩阵分解成位置、缩放和四元数
    //  * @param {PIEMatrix3} kQ
    //  * @param {PIEVector3} kD
    //  * @param {PIEVector3} kU
    //  *
    //  * @memberOf Matrix3#
    //  */
    // decomposition: function (kQ, kD, kU) {
    //     var kM = this;
    //
    //     var fInvLength = this.invertSqrt(kM.m[0] * kM.m[0] + kM.m[3] * kM.m[3] + kM.m[6] * kM.m[6]);
    //     kQ.m[0] = kM.m[0] * fInvLength;
    //     kQ.m[3] = kM.m[3] * fInvLength;
    //     kQ.m[6] = kM.m[6] * fInvLength;
    //
    //     var fDot = kQ.m[0] * kM.m[1] + kQ.m[3] * kM.m[4] + kQ.m[6] * kM.m[7];
    //     kQ.m[1] = kM.m[1] - fDot * kQ.m[0];
    //     kQ.m[4] = kM.m[4] - fDot * kQ.m[3];
    //     kQ.m[7] = kM.m[7] - fDot * kQ.m[6];
    //     fInvLength = this.invertSqrt(kQ.m[1] * kQ.m[1] + kQ.m[4] * kQ.m[4] + kQ.m[7] * kQ.m[7]);
    //     kQ.m[1] *= fInvLength;
    //     kQ.m[4] *= fInvLength;
    //     kQ.m[7] *= fInvLength;
    //
    //     fDot = kQ.m[0] * kM.m[2] + kQ.m[3] * kM.m[5] + kQ.m[6] * kM.m[8];
    //     kQ.m[2] = kM.m[2] - fDot * kQ.m[0];
    //     kQ.m[5] = kM.m[5] - fDot * kQ.m[3];
    //     kQ.m[8] = kM.m[8] - fDot * kQ.m[6];
    //     fDot = kQ.m[1] * kM.m[2] + kQ.m[4] * kM.m[5] + kQ.m[7] * kM.m[8];
    //     kQ.m[2] -= fDot * kQ.m[1];
    //     kQ.m[5] -= fDot * kQ.m[4];
    //     kQ.m[8] -= fDot * kQ.m[7];
    //     fInvLength = this.invertSqrt(kQ.m[2] * kQ.m[2] + kQ.m[5] * kQ.m[5] + kQ.m[8] * kQ.m[8]);
    //     kQ.m[2] *= fInvLength;
    //     kQ.m[5] *= fInvLength;
    //     kQ.m[8] *= fInvLength;
    //
    //     // guarantee that orthogonal matrix has determinant 1 (no reflections)
    //     var fDet = kQ.m[0] * kQ.m[4] * kQ.m[8] + kQ.m[1] * kQ.m[5] * kQ.m[6] +
    //         kQ.m[2] * kQ.m[3] * kQ.m[7] - kQ.m[2] * kQ.m[4] * kQ.m[6] -
    //         kQ.m[1] * kQ.m[3] * kQ.m[8] - kQ.m[0] * kQ.m[5] * kQ.m[7];
    //
    //     if (fDet < 0.0) {
    //         for (var iRow = 0; iRow < 3; iRow++) {
    //             for (var iCol = 0; iCol < 3; iCol++) {
    //                 kQ.m[3 * iRow + iCol] = -kQ.m[3 * iRow + iCol];
    //             }
    //         }
    //     }
    //
    //     // build "right" matrix R
    //     var kR = new PIEMatrix3();
    //     kR.m[0] = kQ.m[0] * kM.m[0] + kQ.m[3] * kM.m[3] + kQ.m[6] * kM.m[6];
    //     kR.m[1] = kQ.m[0] * kM.m[1] + kQ.m[3] * kM.m[4] + kQ.m[6] * kM.m[7];
    //     kR.m[4] = kQ.m[1] * kM.m[1] + kQ.m[4] * kM.m[4] + kQ.m[7] * kM.m[7];
    //     kR.m[2] = kQ.m[0] * kM.m[2] + kQ.m[3] * kM.m[5] + kQ.m[6] * kM.m[8];
    //     kR.m[5] = kQ.m[1] * kM.m[2] + kQ.m[4] * kM.m[5] + kQ.m[7] * kM.m[8];
    //     kR.m[8] = kQ.m[2] * kM.m[2] + kQ.m[5] * kM.m[5] + kQ.m[8] * kM.m[8];
    //
    //     // the scaling component
    //     kD.x = kR.m[0];
    //     kD.y = kR.m[4];
    //     kD.z = kR.m[8];
    //
    //     // the shear component
    //     var fInvD0 = 1.0 / kD.x;
    //     kU.x = kR.m[1] * fInvD0;
    //     kU.y = kR.m[2] * fInvD0;
    //     kU.z = kR.m[5] / kD.y;
    // },

    /**
     * 计算机矩阵转置矩阵
     * @returns {PIEMatrix3} 返回转置矩阵
     * @memberOf Matrix3#
     */
    transpose: function transpose() {
      var tmp;
      var m = this.m;
      tmp = m[1];
      m[1] = m[3];
      m[3] = tmp;
      tmp = m[2];
      m[2] = m[6];
      m[6] = tmp;
      tmp = m[5];
      m[5] = m[7];
      m[7] = tmp;
      return this;
    }
  });
  /**
   * 向量和矩阵相乘
   * @param {PIEVector3} v -向量
   * @param {PIEMatrix3} matrix -矩阵
   * @returns {PIEVector3} 返回相乘后的结果
   * @memberOf Matrix3
   */

  PIEMatrix3.prototype.multiplyMV = function (v, matrix) {
    var m11 = 0,
        m12 = 0,
        m13 = 0;
    m11 = v.x * matrix.m[0] + v.y * matrix.m[3] + v.z * matrix.m[6];
    m12 = v.x * matrix.m[1] + v.y * matrix.m[4] + v.z * matrix.m[7];
    m13 = v.x * matrix.m[2] + v.y * matrix.m[5] + v.z * matrix.m[8];
    return new PIEVector3(m11, m12, m13);
  };

  function PIEProductVersion(handle, autoRelease) {
    if (handle == null) {
      this.handle = Module._ProductVersion_Create();
      this.autoRelease = true;
    }
  }

  Object.assign(PIEProductVersion.prototype, {
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._ProductVersion_Delete(this.handle);
      }

      this.handle = null;
    },
    getProductInfo: function getProductInfo() {
      var strProductInfo = new PIEString$1(256);

      Module._ProductVersion_GetProductInfo(this.handle, strProductInfo.getHandle());

      var info = strProductInfo.toString();
      strProductInfo.dispose();
      return info;
    },
    getProductName: function getProductName() {
      var ProductName = new PIEString$1(256);

      Module._ProductVersion_GetProductName(this.handle, ProductName.getHandle());

      var Name = ProductName.toString();
      ProductName.dispose();
      return Name;
    },
    getCompanyName: function getCompanyName() {
      var CompanyName = new PIEString$1(256);

      Module._ProductVersion_GetCompanyName(this.handle, CompanyName.getHandle());

      var Name = CompanyName.toString();
      CompanyName.dispose();
      return Name;
    },
    getProductVersion: function getProductVersion() {
      var ProductVersion = new PIEString$1(256);

      Module._ProductVersion_GetProductVersion(this.handle, ProductVersion.getHandle());

      var Version = ProductVersion.toString();
      ProductVersion.dispose();
      return Version;
    },
    getReleaseData: function getReleaseData() {
      var ReleaseData = new PIEString$1(256);

      Module._ProductVersion_GetReleaseData(this.handle, ReleaseData.getHandle());

      var Data = ReleaseData.toString();
      ReleaseData.dispose();
      return Data;
    },
    getSvnVersion: function getSvnVersion() {
      var SvnVersion = new PIEString$1(256);

      Module._PIE_ProductVersion_GetSvnVersion(this.handle, SvnVersion.getHandle());

      var Version = SvnVersion.toString();
      SvnVersion.dispose();
      return Version;
    },
    getDescribeInfo: function getDescribeInfo() {
      var DescribeInfo = new PIEString$1(256);

      Module._ProductVersion_GetDescribeInfo(this.handle, DescribeInfo.getHandle());

      var beInfo = DescribeInfo.toString();
      DescribeInfo.dispose();
      return beInfo;
    },
    getHistoryVersion: function getHistoryVersion() {
      var HistoryVersion = new PIEString$1(256);

      Module._ProductVersion_GetHistoryVersion(this.handle, HistoryVersion.getHandle());

      var Version = HistoryVersion.toString();
      HistoryVersion.dispose();
      return Version;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 新建颜色表对象
   * @name ColorRange
   * @class ColorRange
   * 颜色表操作函数
   *
   * @example
   * let colorRange = new PIE.ColorRange()
   */

  function PIEColorRange(handle, autoRelease) {
    if (handle == null) {
      this.handle = Module._ColorRange_Create();
      this.autoRelease = true;
    }
  }

  Object.assign(PIEColorRange.prototype, {
    /**
     * 设置颜色集中的最大值
     * @param {Number} value -颜色值
     * @memberOf ColorRange#
     *
     */
    setCeiling: function setCeiling(value) {
      Module._ColorRange_SetCeiling(this.handle, value);
    },

    /**
     * 设置颜色集中的最小值
     * @param {Number} value -颜色值
     * @memberOf ColorRange#
     */
    setFloor: function setFloor(value) {
      Module._ColorRange_SetFloor(this.handle, value);
    },

    /**
     * 添加颜色
     * @param {(PIEColor/Array)} color -添加新的颜色
     * @memberOf ColorRange#
     */
    addColor: function addColor(color) {
      var arrayColor = [];

      if (color instanceof Array) {
        arrayColor = color;
      } else if (color instanceof PIEColor) {
        arrayColor = color.toArray();
      }

      if (arrayColor) {
        var colorArray = new PIEArray(arrayColor, PIEArrayType.UInt8);

        Module._ColorRange_AddColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.autoRelease) ;

      this.handle = null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */
  /**
   * 创建包围盒
   * @name BoundingBox
   * @class BoundingBox
   * 包围盒类
   *
   * @param {Number} minX -最小x
   * @param {Number} minY -最小y
   * @param {Number} minZ -最小z
   * @param {Number} maxX -最大x
   * @param {Number} MaxY -最大y
   * @param {Number} MaxZ -最大z
   */

  function PIEBoundingBox(minX, minY, minZ, maxX, MaxY, MaxZ) {
    this.mx = minX;
    this.my = minY;
    this.mz = minZ;
    this.Mx = maxX;
    this.My = MaxY;
    this.Mz = MaxZ;
  }

  Object.assign(PIEBoundingBox.prototype, {
    toArray: function toArray() {
      var array = [this.mx, this.my, this.mz, this.Mx, this.My, this.Mz];
      return array;
    },

    /**
     * 获取中心点
     * @memberOf BoundingBox#
     * @returns {PIEVector3} 返回中心点
     */
    getCenter: function getCenter() {
      return new PIEVector3((this.mx + this.Mx) / 2, (this.my + this.My) / 2, (this.mz + this.Mz) / 2);
    },

    /**
     * 获取半径
     * @memberOf BoundingBox#
     * @returns {Number} 返回半径
     */
    getRadius: function getRadius() {
      var x = this.Mx - this.mx;
      var y = this.My - this.my;
      var z = this.Mz - this.mz;
      return Math.sqrt(x * x + y * y + z * z) / 2;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 纹理过滤模式
   * @readonly
   * @enum {Number}
   */
  var PIETextureFilterMode = {
    NEAREST: 0x2600,
    LINEAR: 0x2601,
    NEAREST_MIPMAP_NEAREST: 0x2700,
    LINEAR_MIPMAP_NEAREST: 0x2701,
    NEAREST_MIPMAP_LINEAR: 0x2702,
    LINEAR_MIPMAP_LINEAR: 0x2703
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 纹理覆盖模式
   * @readonly
   * @enum {Number}
   */
  var PIETextureWrapMode = {
    CLAMP: 0x2900,
    REPEAT: 0x2901,
    MIRRORED_REPEAT: 0x8370,
    CLAMP_TO_EDGE: 0x812F,
    CLAMP_TO_BORDER: 0x812D
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 纹理对象操作函数
   * @name Texture
   * @class Texture
   *
   */

  function PIETexture(handle, autoRelease) {
    if (!handle) {
      handle = Module._TEX_Generate();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIETexture.prototype, {
    // /**
    //  * 创建纹理对象
    //  * @memberOf Texture#
    //  * @param {PIETexture} context WebGL上下文环境
    //  */
    create: function create() {
      this.handle = Module._TEX_Generate();
      this.autoRelease = true;
    },

    /**
     * 删除纹理对象
     * @memberOf Texture#
     */
    dispose: function dispose() {
      Module._TEX_Delete(this.handle);
    },

    /**
     * 绑定纹理对象
     * @memberOf Texture#
     * @param {PIETexture} isBind 是否绑定纹理对象
     */
    bind: function bind(isBind) {
      Module._TEX_Bind(this.handle, isBind);
    },

    /**
     * 更新纹理对象
     * @memberOf Texture#
     * @param {PIETexture} isBind 是否绑定纹理对象
     */
    updateImage: function updateImage(context, image) {
      var gl = context;
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
    },

    /**
     * 更新纹理对象像素
     * @param {Number} btBitsPixel -像素位深
     * @param {Number} width -像素宽
     * @param {Number} height -像素高
     * @param {String} buffer -纹理数据
     * @memberOf Texture
     */
    update: function update(btBitsPixel, width, height, buffer) {
      var strBuffer = new PIEString$1(buffer);

      Module._TEX_Update(this.handle, btBitsPixel, width, height, strBuffer.getHandle());

      strBuffer.dispose();
    },
    getHandle: function getHandle() {
      return this.handle;
    }
  }); // /**
  //  * 通过纹理路径创建纹理对象
  //  * @param {String} filePath -创建纹理路径
  //  * @param {PIETextureWrapMode} wrapMode -纹理覆盖模式，默认REPEAT
  //  * @param {PIETextureFilterMode} filterMode -纹理过滤模式，默认LINEAR
  //  * @param {Number} pixelFormat -像素格式
  //  *
  //  * @memberOf Texture
  //  * @returns {PIETexture} 返回纹理对象
  //  */

  PIETexture.fromFile = function (filePath, wrapMode, filterMode) {
    var pixelFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 32;
    var strFilePath = new PIEString$1(filePath);

    if (!wrapMode) {
      wrapMode = PIETextureWrapMode.TWM_REPEAT;
    }

    if (!filterMode) {
      filterMode = PIETextureFilterMode.TFM_LINEAR;
    }

    var handle = Module._TEX_FromFile(strFilePath.getHandle(), wrapMode, filterMode, pixelFormat);

    strFilePath.dispose();

    if (handle) {
      return new PIETexture(handle, true);
    }

    return null;
  };
  /**
   * 通过纹理数据创建纹理对象
   * @param {Number} width -像素宽
   * @param {Number} height -像素高
   * @param {number} btBitsPixel -像素位深
   * @param {String} buffer -纹理数据
   * @param {PIETextureWrapMode} wrapMode -纹理覆盖模式，默认REPEAT
   * @param {PIETextureFilterMode} filterMode -纹理过滤模式，默认LINEAR
   *
   * @memberOf Texture
   * @returns {PIETexture} 纹理对象
   */


  PIETexture.fromBuffer = function (width, height, btBitsPixel, buffer, wrapMode, filterMode) {
    var strBuffer = new PIEString$1(buffer);

    var handle = Module._TEX_Create(strBuffer.getHandle(), width, height, btBitsPixel, wrapMode, filterMode);

    strBuffer.dispose();

    if (handle) {
      return new PIETexture(handle, true);
    }

    return null;
  };
  /**
   * 通过纹理路径加载纹理对象
   * @param {Object} options -
   * @param {String} options.file -从服务上获取的数据存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
   * @param {String} options.url -纹理路径
   * @param {PIETextureWrapMode} options.wrapMode -纹理覆盖模式，默认REPEAT
   * @param {PIETextureFilterMode} options.filterMode -纹理过滤模式，默认LINEAR
   * @param {Number} options.pixelFormat -像素格式
   * @memberOf Texture
   * @returns {Promise} 返回一个promise，在value中存放数据源数据
   * @example
   *  PIE.Texture.load({url:strRootUrl+"Resource/Icons/roadcross.jpg",wrapMode:PIE.TextureWrapMode.CLAMP_TO_EDGE, filterMode:PIE.TextureFilterMode.LINEAR, pixelFormat:24}).then((value) => {
   *          //vaule就是load之后创建的Texture, 可以用来添加到渲染对象中
   *          var myTexture = value;
   */


  PIETexture.load = function (options) {
    return new Promise(function (resolve, reject) {
      var wrapMode = options.wrapMode;
      var filterMode = options.filterMode;
      var pixelFormat = options.pixelFormat;
      var file = options.file;
      var url = options.url;

      if (url == null) {
        return null;
      }

      var name = PIEFile.getFileName(url);

      if (!file) {
        file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
      }

      var filesPicks = [];
      filesPicks.push(file);
      var urlsPicks = [];
      urlsPicks.push(url);

      function callBack(filelist, urllist, datalist) {
        var texture = PIETexture.fromFile(filesPicks[0], wrapMode, filterMode, pixelFormat);

        if (texture) {
          resolve(texture);
        }
      }

      PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
    });
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 顶点数据对象操作函数
   * @name VertexData
   * @class VertexData
   * 创建顶点数据对象
   *
   */
  function PIEVertexData(handle, autoRelease) {
    if (handle == null) {
      handle = Module._VertexData_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEVertexData.prototype, {
    /**
     * 删除顶点数据对象
     * @memberOf VertexData#
     */
    "delete": function _delete() {
      Module._VertexData_Delete(this.handle);
    },

    /**
     * 设置顶点类型
     * @param {Number} type -顶点数据类型
     * @memberOf VertexData#
     */
    setVertexType: function setVertexType(type) {
      Module._VertexData_SetVertexType(this.handle, type);
    },

    /**
     * 获取顶点类型
     *
     * @memberOf VertexData#
     * @returns {Number} 返回顶点数据类型
     */
    getVertexType: function getVertexType() {
      return Module._VertexData_GetVertexType(this.handle);
    },

    /**
     * 设置顶点大小
     * @param {Number} size -顶点大小
     * @memberOf VertexData#
     */
    setVertexSize: function setVertexSize(size) {
      Module._VertexData_SetVertexSize(this.handle, size);
    },

    /**
     * 删除所有顶点数据
     * @memberOf VertexData#
     */
    removeAllElements: function removeAllElements() {
      Module._VertexData_RemoveAllElements(this.handle);
    },

    /**
     * 删除所有顶点元素说明
     * @memberOf VertexData#
     */
    removeAllVertexs: function removeAllVertexs() {
      Module._VertexData_RemoveAllVertexs(this.handle);
    },

    /**
     * 获取顶点大小
     *
     * @memberOf VertexData#
     * @returns {Number} 返回顶点大小
     */
    getVertexSize: function getVertexSize() {
      return Module._VertexData_GetVertexSize(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 通道操作函数
   * @name Pass
   *
   */

  function PIEPass(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEPass.prototype, {
    /**
     * 设置通道对象名称
     * @param {String} name -通道名称
     * @memberOf Pass#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._Pass_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取通道对象名称
     *
     * @memberOf Pass#
     * @returns {String} 返回通道名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Pass_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置通道对象Program类型
     * @param {String} program -Program类型
     * @memberOf Pass#
     */
    setProgram: function setProgram(program) {
      var strProgram = new PIEString$1(program);

      Module._Pass_SetProgram(this.handle, strProgram.getHandle());

      strProgram.dispose();
    },

    /**
     * 设置是否启用AutoProgram
     * @param {Boolean} enabled -是否已启用AutoProgram
     * @memberOf Pass#
     */
    setAutoProgramEnabled: function setAutoProgramEnabled(enabled) {
      Module._Pass_SetAutoProgramEnabled(this.handle, enabled);
    },

    /**
     * 判断是否启用AutoProgram
     * @memberOf Pass#
     * @returns {Boolean} 是否已启用AutoProgram
     */
    isAutoProgramEnabled: function isAutoProgramEnabled() {
      return Boolean(Module._Pass_IsAutoProgramEnabled(this.handle));
    },

    /**
     * 设置漫射光
     * @param {PIEVector4} diffuse -漫射光
     * @memberOf Pass#
     */
    setDiffuse: function setDiffuse(diffuse) {
      var arrayDiffuse = new PIEArray(diffuse, PIEArrayType.Float32);

      Module._Pass_SetDiffuse(this.handle, arrayDiffuse.getHandle());

      arrayDiffuse.dispose();
    },

    /**
     * 获取漫射光
     * @memberOf Pass#
     * @returns {PIEVector4} 返回漫射光
     */
    getDiffuse: function getDiffuse() {
      var arrayDiffuse = new PIEArray(4, PIEArrayType.Float32);

      Module._Pass_GetDiffuse(this.handle, arrayDiffuse.getHandle());

      var diffuse = arrayDiffuse.toArray();
      arrayDiffuse.dispose();
      return diffuse;
    },

    /**
     * 设置环境光
     * @param {PIEVector4} ambient -环境光
     * @memberOf Pass#
     */
    setAmbient: function setAmbient(ambient) {
      var arrayAmbient = new PIEArray(ambient, PIEArrayType.Float32);

      Module._Pass_SetAmbient(this.handle, arrayAmbient.getHandle());

      arrayAmbient.dispose();
    },

    /**
     * 获取环境光
     *
     * @memberOf Pass#
     * @returns {PIEVector4} 返回环境光
     */
    getAmbient: function getAmbient() {
      var arrayAmbient = new PIEArray(4, PIEArrayType.Float32);

      Module._Pass_GetAmbient(this.handle, arrayAmbient.getHandle());

      var ambient = arrayAmbient.toArray();
      arrayAmbient.dispose();
      return ambient;
    },

    /**
     * 设置反射光
     * @param {PIEVector4} specular -反射光
     * @memberOf Pass#
     */
    setSpecular: function setSpecular(specular) {
      var arraySpeclar = new PIEArray(specular, PIEArrayType.Float32);

      Module._Pass_SetSpecular(this.handle, arraySpeclar.getHandle());

      arraySpeclar.dispose();
    },

    /**
     * 获取反射光
     *
     * @memberOf Pass#
     * @returns {PIEVector4} 返回反射光
     */
    getSpecular: function getSpecular() {
      var arraySpeclar = new PIEArray(4, PIEArrayType.Float32);

      Module._Pass_GetSpecular(this.handle, arraySpeclar.getHandle());

      var speclar = arraySpeclar.toArray();
      arraySpeclar.dispose();
      return speclar;
    },

    /**
     * 设置发射因子
     * @param {PIEVector4} emmissive -发射因子
     * @memberOf Pass#
     */
    setEmmissive: function setEmmissive(emmissive) {
      var arrayEmmissive = new PIEArray(emmissive, PIEArrayType.Float32);

      Module._Pass_SetEmmissive(this.handle, arrayEmmissive.getHandle());

      arrayEmmissive.dispose();
    },

    /**
     * 获取发射因子
     *
     * @memberOf Pass#
     * @returns {PIEVector4} 返回发射因子
     */
    getEmmissive: function getEmmissive() {
      var arrayEmmissive = new PIEArray(4, PIEArrayType.Float32);

      Module._Pass_GetEmmissive(this.handle, arrayEmmissive.getHandle());

      var emmissive = arrayEmmissive.toArray();
      arrayEmmissive.dispose();
      return emmissive;
    },

    /**
     * 设置光照强度
     * @param {Number} shininess -光照强度
     * @memberOf Pass#
     */
    setShininess: function setShininess(shininess) {
      Module._Pass_SetShininess(this.handle, shininess);
    },

    /**
     * 获取光照强度
     *
     * @memberOf Pass#
     * @returns {Number} 返回光照强度
     */
    getShininess: function getShininess() {
      return Module._Pass_GetShininess(this.handle);
    },

    /**
     * 设置是否启用灯光
     * @param {Boolean} enabled -是否启用灯光
     * @memberOf Pass#
     */
    setLightingEnabled: function setLightingEnabled(enabled) {
      Module._Pass_SetLightingEnabled(this.handle, enabled);
    },

    /**
     * 判断是否启用灯光
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否启用灯光
     */
    isLightingEnabled: function isLightingEnabled() {
      return Boolean(Module._Pass_IsLightingEnabled(this.handle));
    },

    /**
     * 判断是否透明
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否透明
     */
    isTransparent: function isTransparent() {
      return Boolean(Module._Pass_IsTransparent(this.handle));
    },

    /**
     * 设置是否透明排序
     * @param {Boolean} transSort -是否透明排序
     * @memberOf Pass#
     */
    setTransparentSortingEnabled: function setTransparentSortingEnabled(transSort) {
      Module._Pass_SetTransparentSortingEnabled(this.handle, transSort);
    },

    /**
     * 判断是否透明排序
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否透明排序
     */
    isTransparentSortingEnabled: function isTransparentSortingEnabled() {
      return Boolean(Module._Pass_IsTransparentSortingEnabled(this.handle));
    },

    /**
     * 设置是否强制透明排序
     * @param {Boolean} transSortForce -是否强制透明排序
     * @memberOf Pass#
     */
    setTransparentSortingForced: function setTransparentSortingForced(transSortForce) {
      Module._Pass_SetTransparentSortingForced(this.handle, transSortForce);
    },

    /**
     * 判断是否强制透明排序
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否强制透明排序
     */
    isTransparentSortingForced: function isTransparentSortingForced() {
      return Boolean(Module._Pass_IsTransparentSortingForced(this.handle));
    },

    /**
     * 设置是否自动深度
     *
     * @memberOf Pass#
     * @param {Boolean} enabled -是否自动深度
     */
    setAutoDepthEnabled: function setAutoDepthEnabled(enabled) {
      Module._Pass_SetAutoDepthEnabled(this.handle, enabled);
    },

    /**
     * 是否启用自动深度
     *
     * @memberOf Pass#
     * @returns {Boolean} true 启用自动深度
     */
    isAutoDepthEnabled: function isAutoDepthEnabled() {
      return Boolean(Module._Pass_IsAutoDepthEnabled(this.handle));
    },

    /**
     * 设置是否启用深度写功能
     * @param {Boolean} enabled -是否启用深度写功能
     * @memberOf Pass#
     */
    setDepthWriteEnabled: function setDepthWriteEnabled(enabled) {
      Module._Pass_SetDepthWriteEnabled(this.handle, enabled);
    },

    /**
     * 判断是否启用深度写功能
     * @memberOf Pass#
     * @returns {Boolean} 返回是否启用深度写功能
     */
    isDepthWriteEnabled: function isDepthWriteEnabled() {
      return Boolean(Module._Pass_IsDepthWriteEnabled(this.handle));
    },

    /**
     * 设置是否启用深度检验功能
     * @param {Boolean} enabled -是否启用深度检验功能
     * @memberOf Pass#
     */
    setDepthCheckEnabled: function setDepthCheckEnabled(enabled) {
      Module._Pass_SetDepthCheckEnabled(this.handle, enabled);
    },

    /**
     * 判断是否启用深度检验功能
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否启用深度检验功能
     */
    isDepthCheckEnabled: function isDepthCheckEnabled() {
      return Boolean(Module._Pass_IsDepthCheckEnabled(this.handle));
    },

    /**
     * 设置深度偏差
     * @param {Number} biasConstant -深度偏差
     * @memberOf Pass#
     */
    setDepthBiasConstant: function setDepthBiasConstant(biasConstant) {
      Module._Pass_SetDepthBiasConstant(this.handle, biasConstant);
    },

    /**
     * 获取深度偏差
     *
     * @memberOf Pass#
     * @returns {Number} 返回深度偏差
     */
    getDepthBiasConstant: function getDepthBiasConstant() {
      return Module._Pass_GetDepthBiasConstant(this.handle);
    },

    /**
     * 设置深度偏差坡度值
     * @param {Number} biasSlopeScale -深度偏差坡度值
     * @memberOf Pass#
     */
    setDepthBiasSlopeScale: function setDepthBiasSlopeScale(biasSlopeScale) {
      Module._Pass_SetDepthBiasSlopeScale(this.handle, biasSlopeScale);
    },

    /**
     * 获取深度偏差坡度值
     *
     * @memberOf Pass#
     * @returns {Number} 返回深度偏差坡度值
     */
    getDepthBiasSlopeScale: function getDepthBiasSlopeScale() {
      return Module._Pass_GetDepthBiasSlopeScale(this.handle);
    },

    /**
     * 设置是否启用颜色写入
     * @param {Boolean} enabled -是否启用颜色写入
     * @memberOf Pass#
     */
    setColorWriteEnabled: function setColorWriteEnabled(enabled) {
      Module._Pass_SetColorWriteEnabled(this.handle, enabled);
    },

    /**
     * 判断是否启用颜色写入
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否启用颜色写入
     */
    hasColorWriteDisabled: function hasColorWriteDisabled() {
      return Boolean(Module._Pass_HasColorWriteDisabled(this.handle));
    },

    /**
     * 是否有独立的集合
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否有独立的集合
     */
    hasSeparateBlending: function hasSeparateBlending() {
      return Boolean(Module._Pass_HasSeparateBlending(this.handle));
    },

    /**
     * 获取 AlphaReject值
     *
     * @memberOf Pass#
     * @returns {Number} 返回AlphaReject值
     */
    getAlphaRejectValue: function getAlphaRejectValue() {
      return Module._Pass_GetAlphaRejectValue(this.handle);
    },

    /**
     * 设置是否启用线平滑模式
     * @param {Boolean} lineSmoothMode -是否启用线平滑模式
     * @memberOf Pass#
     */
    setLineSmoothMode: function setLineSmoothMode(lineSmoothMode) {
      Module._Pass_SetLineSmoothMode(this.handle, lineSmoothMode);
    },

    /**
     * 判断是否启用线平滑模式
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否启用线平滑模式
     */
    isLineSmoothMode: function isLineSmoothMode() {
      return Boolean(Module._Pass_IsLineSmoothMode(this.handle));
    },

    /**
     * 设置线宽
     * @param {Number} lineWidth -线宽
     * @memberOf Pass#
     */
    setLineWidth: function setLineWidth(lineWidth) {
      Module._Pass_SetLineWidth(this.handle, lineWidth);
    },

    /**
     * 获取线宽
     *
     * @memberOf Pass#
     * @returns {Number} 返回线宽
     */
    getLineWidth: function getLineWidth() {
      return Module._Pass_GetLineWidth(this.handle);
    },

    /**
     * 设置点的大小
     * @param {Number} pointSize -点的大小
     * @memberOf Pass#
     */
    setPointSize: function setPointSize(pointSize) {
      Module._Pass_SetPointSize(this.handle, pointSize);
    },

    /**
     * 获取点的大小
     *
     * @memberOf Pass#
     * @returns {Number} 返回点的大小
     */
    getPointSize: function getPointSize() {
      return Module._Pass_GetPointSize(this.handle);
    },

    /**
     * 设置雾颜色
     * @param {PIEVector4} color -雾颜色
     * @memberOf Pass#
     */
    setFogColor: function setFogColor(color) {
      var arrayColor = new PIEArray(color, PIEArrayType.Float32);

      Module._Pass_SetFogColor(this.handle, arrayColor.getHandle());

      arrayColor.dispose();
    },

    /**
     * 获取雾颜色
     *
     * @memberOf Pass#
     * @returns {PIEVector4} 返回雾颜色
     */
    getFogColor: function getFogColor() {
      var arrayColor = new PIEArray(4, PIEArrayType.Float32);

      Module._Pass_GetFogColor(this.handle, arrayColor.getHandle());

      var color = arrayColor.toArray();
      arrayColor.dispose();
      return color;
    },

    /**
     * 设置雾开始时间
     * @param {Number} fogStart -雾开始时间
     * @memberOf Pass#
     */
    setFogStart: function setFogStart(fogStart) {
      Module._Pass_SetFogStart(this.handle, fogStart);
    },

    /**
     * 获取雾开始时间
     *
     * @memberOf Pass#
     * @returns {Number} 返回雾开始时间
     */
    getFogStart: function getFogStart() {
      return Module._Pass_GetFogStart(this.handle);
    },

    /**
     * 设置雾结束时间
     * @param {Number} fogEnd -雾结束时间
     * @memberOf Pass#
     */
    setFogEnd: function setFogEnd(fogEnd) {
      Module._Pass_SetFogEnd(this.handle, fogEnd);
    },

    /**
     * 获取雾结束时间
     *
     * @memberOf Pass#
     * @returns {Number} 返回雾结束时间
     */
    getFogEnd: function getFogEnd() {
      return Module._Pass_GetFogEnd(this.handle);
    },

    /**
     * 设置雾的密集程度
     * @param {Number} fogDensity -雾的密集程度
     * @memberOf Pass#
     */
    setFogDensity: function setFogDensity(fogDensity) {
      Module._Pass_SetFogDensity(this.handle, fogDensity);
    },

    /**
     * 获取雾的密集程度
     *
     * @memberOf Pass#
     * @returns {Number} 返回雾的密集程度
     */
    getFogDensity: function getFogDensity() {
      return Module._Pass_GetFogDensity(this.handle);
    },

    /**
     * 获取是否为面裁剪模式
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否为面裁剪模式
     */
    isCullFaceMode: function isCullFaceMode() {
      return Boolean(Module._Pass_IsCullFaceMode(this.handle));
    },

    /**
     * 是否设置投影密度
     * @param {Boolean} autoMipMap -是否设置投影密度
     * @memberOf Pass#
     */
    setAutoMipMap: function setAutoMipMap(autoMipMap) {
      Module._Pass_SetAutoMipMap(this.handle, autoMipMap);
    },

    /**
     * 获取是否设置投影密度
     *
     * @memberOf Pass#
     * @returns {Boolean} 返回是否设置投影密度
     */
    isAutoMipMap: function isAutoMipMap() {
      return Boolean(Module._Pass_IsAutoMipMap(this.handle));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * Int索引数据对象操作函数
   * @name IntIndexData
   * @class IntIndexData
   * 创建索引数据对象
   *
   */
  function PIEIntIndexData(handle, autoRelease) {
    if (handle == null) {
      handle = Module._IntIndexData_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEIntIndexData.prototype, {
    /**
     * 删除索引数据对象
     * @memberOf IntIndexData#
     */
    "delete": function _delete() {
      Module._IntIndexData_Delete(this.handle);
    },

    /**
     * 删除所有索引数据
     * @memberOf IntIndexData#
     */
    removeAllIndexs: function removeAllIndexs() {
      Module._IntIndexData_RemoveAllIndexs(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 材质操作函数
   * @name Material
   * @class Material
   * 创建材质对象
   *
   */

  function PIEMaterial(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Material_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEMaterial.prototype, {
    /**
     * 删除材质对象
     * @memberOf Material#
     */
    "delete": function _delete() {
      Module._Material_Delete(this.handle);
    },

    /**
     * 设置名称
     * @param {String} name -Mesh名称
     * @memberOf Material#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._Material_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取名称
     *
     * @memberOf Material#
     * @returns {String} 返回Material名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Material_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置漫射光
     * @param {PIEVector4} diffuse -漫射光
     * @memberOf Material#
     */
    setDiffuse: function setDiffuse(diffuse) {
      var arrayDiffuse = new PIEArray(diffuse, PIEArrayType.Float32);

      Module._Material_SetDiffuse(this.handle, arrayDiffuse.getHandle());

      arrayDiffuse.dispose();
    },

    /**
     * 设置环境光
     * @param {PIEVector4} ambient -环境光
     * @memberOf Material#
     */
    setAmbient: function setAmbient(ambient) {
      var arrayAmbient = new PIEArray(ambient, PIEArrayType.Float32);

      Module._Material_SetAmbient(this.handle, arrayAmbient.getHandle());

      arrayAmbient.dispose();
    },

    /**
     * 设置反射光
     * @param {PIEVector4} specular -反射光
     * @memberOf Material#
     */
    setSpecular: function setSpecular(specular) {
      var arraySpeclar = new PIEArray(specular, PIEArrayType.Float32);

      Module._Material_SetSpecular(this.handle, arraySpeclar.getHandle());

      arraySpeclar.dispose();
    },

    /**
     * 设置发射因子
     * @param {PIEVector4} emmissive -发射因子
     * @memberOf Material#
     */
    setEmmissive: function setEmmissive(emmissive) {
      var arrayEmmissive = new PIEArray(emmissive, PIEArrayType.Float32);

      Module._Material_SetEmmissive(this.handle, arrayEmmissive.getHandle());

      arrayEmmissive.dispose();
    },

    /**
     * 设置光照强度
     * @param {Number} shniniess -光照强度
     * @memberOf Material#
     */
    setShininess: function setShininess(shniniess) {
      Module._Material_SetShininess(this.handle, shniniess);
    },

    /**
     * 设置深度写开关
     * @param {Boolean} enabled -深度写打开与关闭
     * @memberOf Material#
     */
    setDepthWriteEnabled: function setDepthWriteEnabled(enabled) {
      Module._Material_SetDepthWriteEnabled(this.handle, enabled);
    },

    /**
     * 设置深度检测
     * @param {Boolean} enabled -深度检查打开与关闭
     * @memberOf Material#
     */
    setDepthCheckEnabled: function setDepthCheckEnabled(enabled) {
      Module._Material_SetDepthCheckEnabled(this.handle, enabled);
    },

    /**
     * 获取深度检测
     *
     * @memberOf Material#
     * @returns {Boolean} true开启，false关闭
     */
    isDepthCheckEnabled: function isDepthCheckEnabled() {
      return Module._Material_IsDepthCheckEnabled(this.handle);
    },

    /**
     * 设置颜色可写开关
     * @param {Boolean} enabled -颜色写开关
     * @memberOf Material#
     */
    setColourWriteEnabled: function setColourWriteEnabled(enabled) {
      Module._Material_SetColourWriteEnabled(this.handle, enabled);
    },

    /**
     * 是否透明
     *
     * @memberOf Material#
     * @returns {Boolean} 返回材质是否透明
     */
    isTransparent: function isTransparent() {
      return Module._Material_IsTransparent(this.handle);
    },

    /**
     * 是否开启透明排序
     *
     * @memberOf Material#
     * @returns {Boolean} 返回是否开启透明排序
     */
    isTransparentSortingEnabled: function isTransparentSortingEnabled() {
      return Module._Material_IsTransparentSortingEnabled(this.handle);
    },

    /**
     * 是否强制开启透明排序
     *
     * @memberOf Material#
     * @returns {Boolean} 返回是否强制开启透明排序
     */
    isTransparentSortingForced: function isTransparentSortingForced() {
      return Module._Material_IsTransparentSortingForced(this.handle);
    },

    /**
     * 是否具有纹理单元
     *
     * @memberOf Material#
     * @returns {Boolean} 返回是否具有纹理单元
     */
    hasTextureUnit: function hasTextureUnit() {
      return Module._Material_HasTextureUnit(this.handle);
    },

    /**
     * 创建通道对象
     *
     * @memberOf Material#
     * @returns {PIEPass} 返回通道对象
     */
    createPass: function createPass() {
      var handle = Module._Material_CreatePass(this.handle);

      if (handle) {
        return new PIEPass(handle);
      }
    },

    /**
     * 根据序列号获取通道对象
     *
     * @memberOf Material#
     * @returns {PIEPass} 返回通道对象
     */
    getPass: function getPass() {
      var handle = Module._Material_GetPass(this.handle);

      if (handle) {
        return new PIEPass(handle);
      }
    },

    /**
     * 获取通道数量
     *
     * @memberOf Material#
     * @returns {Number} 返回通道数量
     */
    getPassCount: function getPassCount() {
      return Module._Material_GetPassCount(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * Short索引数据对象操作函数
   * @name ShortIndexData
   * @class ShortIndexData
   * 创建索引数据对象
   *
   */
  function PIEShortIndexData(handle, autoRelease) {
    if (handle == null) {
      handle = Module._ShortIndexData_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEShortIndexData.prototype, {
    /**
     * 删除索引数据对象
     * @memberOf IntIndexData#
     */
    "delete": function _delete() {
      Module._ShortIndexData_Delete(this.handle);
    },

    /**
     * 删除所有索引数据
     * @memberOf IntIndexData#
     */
    removeAllIndexs: function removeAllIndexs() {
      Module._ShortIndexData_RemoveAllIndexs(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 编码格式
   * @readonly
   * @enum {number}
   */
  var PIECharsetType = {
    /** Default编码 */
    Default: 1,

    /** GB18030编码*/
    GB18030: 134,

    /** UTF8编码*/
    UTF8: 250,

    /** Windows默认的Unicode编码*/
    UTF16LE: 251,

    /** UCS2BE编码*/
    UTF16BE: 252,

    /** Windows1252编码*/
    Windows1252: 137,

    /** UTF32编码*/
    UTF32LE: 8,

    /** UTF32BE编码*/
    UTF32BE: 9
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 数据集类型枚举
   * @readonly
   * @enum {Number}
   */
  var PIEDatasetType = {
    /**未知数据集*/
    UnKnown: -1,

    /**属性数据集*/
    Attribute: 0,

    /**点数据集*/
    Point: 1,

    /**线数据集*/
    Line: 3,

    /**面数据集*/
    Region: 5,

    /**文本数据集*/
    Text: 7,

    /**路线数据集*/
    LineM: 35,

    /**复杂数据集*/
    Complex: 149,

    /**栅格数据集*/
    Raster: 170,

    /**瓦片数据集*/
    Tile: 200,

    /**模型数据集*/
    Model: 210,

    /**Tiles3D数据集*/
    Tiles3D: 220,

    /**mapbox数据集*/
    MVT: 224,

    /**GE数据集*/
    GEDataModel: 300
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 空间参考系模块
   * ---
   */

  /**
   *
   *空间参考系操作函数
   * @name SpatialReference
   */

  function PIESpatialReference(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESpatialReference.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 删除坐标系统对象
     * @memberOf SpatialReference#
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._SpatialReference_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 将坐标系统输出为WKT格式
     *
     * @memberOf SpatialReference#
     * @returns {String} 返回是否成功将坐标系统输出为WKT字符串
     */
    toWKT: function toWKT() {
      var strWkt = new PIEString$1(600);

      Module._SpatialReference_ToWKT(this.handle, strWkt.getHandle());

      var wkt = strWkt.toString();
      strWkt.dispose();
      return wkt;
    },

    /**
     * 经纬度坐标转投影坐标
     * @param {(Array/PIEVector2)} point -待转换的经纬度坐标点
     * @memberOf SpatialReference#
     *
     * @returns {(Array/PIEVector2)} 返回转换后的投影坐标点
     */
    forward: function forward(point) {
      var pointArray = null;

      if (point instanceof Array) {
        pointArray = new PIEArray(point, PIEArrayType.Float64);
      } else if (point instanceof PIEVector2) {
        pointArray = new PIEArray([point.x, point.y], PIEArrayType.Float64);
      }

      if (!pointArray) {
        return null;
      }

      var forwardPoint = new PIEArray(2, PIEArrayType.Float64);

      Module._SpatialReference_Forward(this.handle, pointArray.getHandle(), forwardPoint.getHandle());

      forwardPoint.updateData();
      var retArray = forwardPoint.toArray();
      pointArray.dispose();
      forwardPoint.dispose();

      if (point instanceof Array) {
        return retArray;
      } else if (point instanceof PIEVector2) {
        var retPoint = new PIEVector2(retArray[0], retArray[1]);
        return retPoint;
      }
    },

    /**
     * 投影坐标转经纬度坐标
     * @param {(Array/PIEVector2)} point -待转换的投影坐标点
     * @memberOf SpatialReference#
     *
     * @returns {(Array/PIEVector2)} 返回转换后的经纬度坐标点
     */
    inverse: function inverse(point) {
      var pointArray = null;

      if (point instanceof Array) {
        pointArray = new PIEArray(point, PIEArrayType.Float64);
      } else if (point instanceof PIEVector2) {
        pointArray = new PIEArray([point.x, point.y], PIEArrayType.Float64);
      }

      if (!pointArray) {
        return null;
      }

      var inversePoint = new PIEArray(2, PIEArrayType.Float64);

      Module._SpatialReference_Inverse(this.handle, pointArray.getHandle(), inversePoint.getHandle());

      inversePoint.updateData();
      var retArray = inversePoint.toArray();
      pointArray.dispose();
      inversePoint.dispose();

      if (point instanceof Array) {
        return retArray;
      } else if (point instanceof PIEVector2) {
        var retPoint = new PIEVector2(retArray[0], retArray[1]);
        return retPoint;
      }
    },

    /**
     * 经纬度范围转投影范围
     * @param {(Array/PIEBounds)} bounds -待转换的范围
     * @memberOf SpatialReference#
     * @returns {(Array/PIEBounds)} 返回转换后的范围
     */
    forwardBounds: function forwardBounds(bounds) {
      var boundsArray = null;

      if (bounds instanceof Array) {
        boundsArray = new PIEArray(bounds, PIEArrayType.Float64);
      } else if (bounds instanceof PIEBounds) {
        boundsArray = new PIEArray([bounds.left, bounds.top, bounds.right, bounds.bottom], PIEArrayType.Float64);
      }

      if (!boundsArray) {
        return null;
      }

      var forwardBounds = new PIEArray(4, PIEArrayType.Float64);

      Module._SpatialReference_ForwardBounds(this.handle, boundsArray.getHandle(), forwardBounds.getHandle());

      forwardBounds.updateData();
      var retArray = forwardBounds.toArray();
      boundsArray.dispose();
      forwardBounds.dispose();

      if (bounds instanceof Array) {
        return retArray;
      } else if (bounds instanceof PIEBounds) {
        var retBounds = new PIEBounds(retArray[0], retArray[1], retArray[2], retArray[3]);
        return retBounds;
      }
    },

    /**
     * 投影范围转经纬度范围
     * @param {(Array/PIEBounds)} bounds -待转换的范围
     * @memberOf SpatialReference#
     * @returns {(Array/PIEBounds)} 返回转换后的范围
     */
    inverseBounds: function inverseBounds(bounds) {
      var boundsArray = null;

      if (bounds instanceof Array) {
        boundsArray = new PIEArray(bounds, PIEArrayType.Float64);
      } else if (bounds instanceof PIEBounds) {
        boundsArray = new PIEArray([bounds.left, bounds.top, bounds.right, bounds.bottom], PIEArrayType.Float64);
      }

      if (!boundsArray) {
        return null;
      }

      var inverseBounds = new PIEArray(4, PIEArrayType.Float64);

      Module._SpatialReference_InverseBounds(this.handle, boundsArray.getHandle(), inverseBounds.getHandle());

      inverseBounds.updateData();
      var retArray = inverseBounds.toArray();
      boundsArray.dispose();
      inverseBounds.dispose();

      if (bounds instanceof Array) {
        return retArray;
      } else if (bounds instanceof PIEBounds) {
        var retBounds = new PIEBounds(retArray[0], retArray[1], retArray[2], retArray[3]);
        return retBounds;
      }
    },

    /**
     * 获取坐标系统的空间坐标系类型
     *
     * @memberOf SpatialReference#
     * @returns {PIESpatialRefType} 返回的空间坐标系类型
     */
    getType: function getType() {
      return Module._SpatialReference_GetType(this.handle);
    },

    /**
     * 获取坐标系名称
     *
     * @memberOf SpatialReference#
     * @returns {String} 返回的坐标系名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._SpatialReference_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },
    // /**
    //  * 设置坐标系统的地图投影
    //  * @param {PIEProjection} projection -坐标系统的地图投影
    //  * @memberOf SpatialReference#
    //  *
    //  * @returns {Boolean} 返回是否成功设置坐标系统的地图投影(true表示设置成功，false表示设置失败)
    //  */
    // setProjection: function (projection) {
    //     return Module._SpatialReference_SetProjection(this.handle, projection.getHandle());
    // },
    // /**
    //  * 获取坐标系统的地图投影
    //  * @memberOf SpatialReference#
    //  * @returns {PIEProjection} 返回坐标系统的地图投影
    //  */
    // getProjection: function () {
    //     var hProjection = Module._SpatialReference_GetProjection(this.handle);
    //     return new PIEProjection(hProjection);
    // },

    /**
     * 判断两个坐标系统是否相同
     * @param {PIESpatialReference} SpatialReference -目标坐标系统对象
     * @memberOf SpatialReference#
     *
     * @returns {Boolean} true表示相同，false表示不相同
     */
    isSame: function isSame(SpatialReference) {
      return Boolean(Module._SpatialReference_IsSame(this.handle, SpatialReference.getHandle()));
    }
  });
  /**
   * 根据EPSG代码从CRS库中读取坐标系统
   * @param {Number} code -EPSG代码
   * @memberOf SpatialReference
   * @returns {PIESpatialReference} 返回坐标系统对象
   * @example
   * var spatialReference = PIE.SpatialReference.fromEpsg(3857);//创建web墨卡托投影坐标系
   */

  PIESpatialReference.fromEpsg = function (code) {
    var handle = Module._SpatialReference_FromEPSG(code);

    return new PIESpatialReference(handle, true);
  };
  /**
   * 创建Web Mercator坐标系统对象
   *
   * @memberOf SpatialReference
   * @returns {PIESpatialReference} 返回新建的坐标系统对象
   */


  PIESpatialReference.createWebMercator = function () {
    var handle = Module._SpatialReference_CreateWebMercator();

    return new PIESpatialReference(handle, true);
  };
  /**
   * 创建CGCS2000坐标系统对象
   *
   * @memberOf SpatialReference
   * @returns {PIESpatialReference} 返回新建的坐标系统对象
   */


  PIESpatialReference.createChina2000 = function () {
    var handle = Module._SpatialReference_CreateChina2000();

    return new PIESpatialReference(handle, true);
  };
  /**
   * 创建WGS84坐标系统对象
   *
   * @memberOf SpatialReference
   * @returns {PIESpatialReference} 返回新建的坐标系统对象
   */


  PIESpatialReference.createWGS1984 = function () {
    var handle = Module._SpatialReference_CreateWGS1984();

    return new PIESpatialReference(handle, true);
  };
  /**
   * 创建AlbersConicEqualArea坐标系统对象
   * @param {Number} left -bounds
   * @param {Number} right -bounds
   * @param {Number} top -bounds
   * @param {Number} bottom -bounds
   * @memberOf SpatialReference
   * @returns {PIESpatialReference} 返回新建的坐标系统对象
   */


  PIESpatialReference.CreateAlbersConicEqualArea = function (spatialReference, left, right, top, bottom) {
    var handle = Module._SpatialReference_CreateAlbersConicEqualArea(spatialReference.getHandle(), left, right, top, bottom);

    return new PIESpatialReference(handle, true);
  };
  /**
   * 从WKT中读取坐标系统
   * @param {String} wkt -WKT字符串
   * @memberOf SpatialReference
   *
   * @returns {PIESpatialReference} 返回坐标系统对象
   */


  PIESpatialReference.fromWKT = function (wkt) {
    var strWkt = new PIEString$1(wkt);

    var handle = Module._SpatialReference_FromWKT(strWkt.getHandle());

    strWkt.dispose();
    return new PIESpatialReference(handle, true);
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *  数据源枚举
   * @readonly
   * @enum {String}
   */
  var PIEDataSourceType = {
    /** GeoJson数据源  */
    GeoJson: 'GeoJsonDataSource',

    /** GSF数据源  */
    Gsf: 'GsfDataSource',

    /** OSGB数据源  */
    Osgb: 'OsgbDataSource',

    /** Tiles3D数据源  */
    Tiles3D: 'DataSource3DTiles',

    /** Shp数据源  */
    Shp: 'ShpDataSource',

    /** GE数据源  */
    GE: 'DataSourceGE',

    /** 栅格数据源  */
    Raster: 'GdalRasterDataSource',

    /** 矢量数据源  */
    Feature: 'GdalFeatureDataSource',

    /** Mapbox矢量数据源  */
    MVT: 'MVTDataSource'
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 矢量数据源对象
   * @name FeatureDataSource
   * @extends DataSource
   */

  function PIEFeatureDataSource(handle, autoRelease) {
    PIEDataSource.call(this, handle, autoRelease);
  }

  PIEFeatureDataSource.prototype = Object.assign(Object.create(PIEDataSource.prototype), {// /**
    //  * 获取数据集中要素对象个数
    //  * @memberOf FeatureDataSource#
    //  * @returns {Number} 返回对象个数
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.getObjectCount()
    //  */
    // getObjectCount: function () {
    //     return Module._PIE_FDataset_GetObjectCount(this.dataset);
    // },
    //
    // /**
    //  * 获取数据集中字段个数
    //  * @memberOf FeatureDataSource#
    //  * @returns {Number} 返回字段个数
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.getFieldCount()
    //  */
    // getFieldCount: function () {
    //     return Module._PIE_FDataset_GetFieldCount(this.dataset);
    // },
    //
    // /**
    //  * 通过数据集字段名删除数据集字段
    //  * @param {String} field -字段名称
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果删除成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.deleteField(field)
    //  */
    // deleteField: function (field) {
    //     var strName = new PIEString(field);
    //     var result = Module._PIE_FDataset_DeleteField(this.dataset, strName.getHandle());
    //     strName.dispose();
    //     return result;
    // },
    //
    // /**
    //  * 通过数据集字段索引删除数据集字段
    //  * @param {Number} index -索引值
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果删除成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.deleteFieldByIndex(index)
    //  */
    // deleteFieldByIndex: function (index) {
    //     return Module._PIE_FDataset_DeleteFieldByIndex(this.dataset, index);
    // },
    //
    // /**
    //  * 通过指定ID数组查询要素集
    //  * @param {Array} ids -查询时的ID数组
    //  * @param {Number} count -查询时的ID个数
    //  * @memberOf FeatureDataSource#
    //  * @returns {PIEFeature} 如果查询成功返回要素集对象，否则返回NULL
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.queryByID(ids, count)
    //  */
    // queryByID: function (ids, count) {
    //     var pIDs = new PIEArray(ids, PIEArrayType.Int32);
    //     var result = Module._PIE_FDataset_QueryByID(this.dataset, pIDs.getHandle(), count);
    //     pIDs.dispose();
    //     return result;
    // },
    //
    // /**
    //  * 通过属性数据查询条件查询要素集
    //  * @param {String} general -属性数据查询条件
    //  * @memberOf FeatureDataSource#
    //  * @returns {PIEFeature} 如果查询成功返回要素集对象，否则返回NULL
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.queryByGeneral(general)
    //  */
    // queryByGeneral: function (general) {
    //     var strFilter = new PIEString(general);
    //     var result = Module._PIE_FDataset_QueryByGeneral(this.dataset, general.getHandle());
    //     strFilter.dispose();
    //     return result;
    // },
    //
    // /**
    //  * 通过数据范围查询要素集
    //  * @param {PIERect} bounds -矩形对象
    //  * @memberOf FeatureDataSource#
    //  * @returns {PIEFeature} 如果查询成功返回要素集对象，否则返回NULL
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.queryByBounds(bounds)
    //  */
    // queryByBounds: function (bounds) {
    //     let bbox = [];
    //     if (bounds instanceof PIEBounds) {
    //         bbox = bounds.toArray();
    //     } else if (bounds instanceof Array) {
    //         bbox = bounds;
    //     }
    //     return Module._PIE_FDataset_QueryByBounds(this.dataset, bbox[0], bbox[1], bbox[2], bbox[3]);
    // },
    //
    // /**
    //  * 通过要素集句柄释放要素集内存空间
    //  * @param {PIEFeature} featureSet -矢量要素集句柄
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果释放成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.releaseFeatureSet(featureSet)
    //  */
    // releaseFeatureSet: function (featureSet) {
    //     return Module._PIE_FDataset_ReleaseFeatureSet(this.dataset, featureSet.getHandle());
    // },
    //
    // /**
    //  *根据索引设置数据集字段别名
    //  * @param {Number} index -牵引值
    //  * @param {String} name -字段别名
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果设置成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.setFieldForignNameAt(index, name)
    //  */
    // setFieldForignNameAt: function (index, name) {
    //     var strName = new PIEString(name);
    //     var result = Module._PIE_FDataset_SetFieldForignNameAt(this.dataset, index, strName.getHandle());
    //     strName.dispose();
    //     return result;
    // },
    //
    // /**
    //  * 同一空间参考系正转换
    //  * @param {PIESpatialReference} spatialReference 空间参考坐标系
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果转换成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.forward(spatialReference)
    //  */
    // forward: function (spatialReference) {
    //     return Module._PIE_FDataset_PJForward(this.dataset, spatialReference.getHandle());
    // },
    //
    // /**
    //  * 同一空间参考系反转换
    //  * @param {PIESpatialReference} spatialReference -空间参考坐标系
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果转换成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.inverse(spatialReference)
    //  */
    // inverse: function (spatialReference) {
    //     return Module._PIE_FDataset_PJInverse(this.dataset, spatialReference.getHandle());
    // },
    //
    // /**
    //  * 不同空间坐标系转换
    //  * @param {PIEReferenceTranslator} refTranslator -参考系转换器
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果转换成功返回true, 否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.convert(refTranslator)
    //  */
    // convert: function (refTranslator) {
    //     return Module._PIE_FDataset_PJConvert(this.dataset, refTranslator.getHandle());
    // },
    //
    // /**
    //  * 创建空间坐标系
    //  * @param {PIESpatialReference} spatialReference -空间参考坐标系
    //  * @memberOf FeatureDataSource#
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.setSpatialReference(spatialReference)
    //  */
    // setSpatialReference:function(spatialReference) {
    //     var patialReference = new PIESpatialReference(spatialReference);
    //     Module._DataSource_SetSpatialReference(this.handle,patialReference.getHandle());
    // },
    //
    // /**
    //  * 获取空间参考系
    //  * @memberOf FeatureDataSource#
    //  * @returns {PIESpatialReference} 如果获取成功返回空间参考系，否则返回NULL
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.getSpatialReference()
    //  */
    // getSpatialReference: function () {
    //     var hSpatialReference = Module._PIE_FDataset_GetSpatialReference(this.dataset);
    //     if(hSpatialReference){
    //         return new PIESpatialReference(hSpatialReference);
    //     }
    //     return null;
    // },
    //
    // /**
    //  * 建立空间索引
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果索引创建成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.buildSpatialIndex()
    //  */
    // buildSpatialIndex: function () {
    //     return Module._PIE_FDataset_BuildSpatialIndex(this.dataset);
    // },
    //
    // /**
    //  * 删除空间索引
    //  * @memberOf FeatureDataSource#
    //  * @returns {Boolean} 如果索引删除成功返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.dropSpatialIndex()
    //  */
    // dropSpatialIndex: function () {
    //     return Module._PIE_FDataset_DropSpatialIndex(this.dataset);
    // },
    //
    // /**
    //  * 返回数据集字符编码方式
    //  * @memberOf FeatureDataSource#
    //  * @returns {Number} 如果索引删除返回true，否则返回false
    //  *
    //  * @example
    //  * let featureDataSource = new PIE.FeatureDataSource()
    //  * featureDataSource.getCharset()
    //  */
    // getCharset: function () {
    //     return Module._PIE_FDataset_GetCharset(this.dataset);
    // }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建GeoJson数据源
   * @name GeoJsonDataSource
   * @class GeoJsonDataSource
   * GeoJson数据源操作函数
   * @extends FeatureDataSource
   */

  function PIEGeoJsonDataSource(handle, autoRelease) {
    PIEFeatureDataSource.call(this, handle, autoRelease);
  }

  function isJson(obj) {
    if (_typeof(obj) == "object" && obj != null) {
      return true;
    }

    return false;
  }

  PIEGeoJsonDataSource.prototype = Object.assign(Object.create(PIEFeatureDataSource.prototype), {
    /**
     * 通过数据源路径加载并打开数据源
     * @param {Object} options -
     * @param {String} options.file -数据源从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -数据源的服务地址
     * @param {String} options.alias -数据源名称
     * @param {PIECharsetType} options.charset -数据集编码(默认PIE.CharsetType.UTF8)
     *
     * @memberOf GeoJsonDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     * @example
     * let options = {
        file: 'data/geojson.json',
        url: 'http://127.0.0.1:8080/data/geojson.json',
      };
     let workspace = viewer.getGlobe().getDocument();
     let dataSource = new PIE.GeoJsonDataSource();
     dataSource.load(options).then((value)=>{
           //vaule就是load之后的被成功打开的dataSource 可以用来添加到工作空间中，然后与layer绑定
            workspace.getDataSourceManager().addDataSource(value);
       })
     */
    load: function load(options) {
      var that = this;
      var datasetCharset = options.charset == null ? PIECharsetType.UTF8 : options.charset;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var url = options.url;
        var filesPicks = [];

        if (!url || url == "") {
          reject(new Error('PIE.GeoJsonDataSource.load: input url is NULL'));
          return;
        }

        var name = PIEFile.getFileName(url);
        var index = name.lastIndexOf(".");

        if (index < 0) {
          name = name + ".json";
        }

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        filesPicks.push(file);
        var urlsPicks = [];
        urlsPicks.push(options.url);

        function callBack(filelist, urllist, datalist) {
          if (that.open({
            database: filesPicks[0],
            alias: options.alias
          })) {
            var dataset = that.getDataset();

            if (dataset != null) {
              dataset.setCharset(datasetCharset);
            }

            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },

    /**
     * 通过json对象数据加载并打开数据源
     * @param {Object} options -
     * @param {String} options.jsonData -json数据
     * @param {String} options.alias -数据源名称
     * @param {PIECharsetType} options.charset -数据集编码(默认PIE.CharsetType.UTF8)
     *
     * @memberOf GeoJsonDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     *
     */
    loadJsonData: function loadJsonData(options) {
      var that = this;
      var datasetCharset = options.charset == null ? PIECharsetType.UTF8 : options.charset;
      return new Promise(function (resolve, reject) {
        if (isJson(options.jsonData)) {
          var file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + "cacheData.geojson"; //设置生成json文件路径

          PIEFile.makeFolder(file);
          var data = JSON.stringify(options.jsonData);
          var stream = Module.FS.open(file, 'w+');
          var blob = new Blob([data], {
            type: "text/json"
          });
          blob.arrayBuffer().then(function (buffer) {
            var dataArray = new Uint8Array(buffer);
            Module.FS.write(stream, dataArray, 0, dataArray.length, 0);
            Module.FS.close(stream);

            if (that.open({
              database: file,
              alias: options.alias
            })) {
              var dataset = that.getDataset();

              if (dataset != null) {
                dataset.setCharset(datasetCharset);
              }

              resolve(that);
            }
          });
        } else {
          resolve(null);
        }
      });
    },
    toGeojson: function toGeojson() {
      var strGeojson = new PIEString$1(10240);

      Module._DataSource_GetGeojson(this.handle, strGeojson.getHandle());

      var geojson = strGeojson.toString();
      strGeojson.dispose();
      return geojson;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建Shp数据源
   * @name ShpDataSource
   * @class ShpDataSource
   * Shp数据源操作函数
   * @extends FeatureDataSource
   */

  function PIEShpDataSource(handle, autoRelease) {
    PIEFeatureDataSource.call(this, handle, autoRelease);
  }

  PIEShpDataSource.prototype = Object.assign(Object.create(PIEFeatureDataSource.prototype), {
    /**
     * 通过数据源路径加载并打开数据源
     * @param {Object} options -
     * @param {String} options.file -数据源从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -数据源的服务地址
     * @param {String} options.alias -数据源名称
     * @param {PIECharsetType} options.charset -数据集编码(默认PIE.CharsetType.UTF8)
     *
     * @memberOf ShpDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     * @example
     * let options = {
        file: 'data/provice.shp',
        url: 'http://127.0.0.1:8080/data/provice.shp',
      };
     let workspace = viewer.getGlobe().getDocument();
     let dataSource = new PIE.ShpDataSource();
     dataSource.load(options).then((value)=>{
           //vaule就是load之后的被成功打开的dataSource 可以用来添加到工作空间中，然后与layer绑定
            workspace.getDataSourceManager().addDataSource(value);
       })
     */
    load: function load(options) {
      var that = this;
      var datasetCharset = options.charset == null ? PIECharsetType.UTF8 : options.charset;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var shpUrl = options.url;

        if (shpUrl == null || shpUrl == "") {
          reject(new Error('PIE.ShpDataSource.load: input url is NULL'));
          return;
        }

        var name = PIEFile.getFileName(shpUrl);

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        var filesPicks = [];
        filesPicks.push(file);
        filesPicks.push(file.slice(0, -4) + '.dbf');
        filesPicks.push(file.slice(0, -4) + '.prj');
        filesPicks.push(file.slice(0, -4) + '.qix');
        filesPicks.push(file.slice(0, -4) + '.shx');
        filesPicks.push(file.slice(0, -4) + '.cpg');
        var urlsPicks = [];
        urlsPicks.push(shpUrl);
        urlsPicks.push(shpUrl.slice(0, -4) + '.dbf');
        urlsPicks.push(shpUrl.slice(0, -4) + '.prj');
        urlsPicks.push(shpUrl.slice(0, -4) + '.qix');
        urlsPicks.push(shpUrl.slice(0, -4) + '.shx');
        urlsPicks.push(shpUrl.slice(0, -4) + '.cpg');

        function callBack(filelist, urllist, datalist) {
          if (that.open({
            database: filesPicks[0],
            alias: options.alias
          })) {
            var dataset = that.getDataset();
            dataset.setCharset(datasetCharset);
            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建GSF数据源
   * @name GSFDataSource
   * @class GSFDataSource
   * GSF数据源操作函数
   * @extends FeatureDataSource
   */

  function PIEGSFDataSource(handle, autoRelease) {
    PIEFeatureDataSource.call(this, handle, autoRelease);
  }

  PIEGSFDataSource.prototype = Object.assign(Object.create(PIEFeatureDataSource.prototype), {
    /**
     * 通过gsf数据源路径加载并打开数据源
     * @param {Object} options -
     * @param {String} options.file -数据源从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.gsfUrl -gsf数据服务地址
     * @param {String} options.esfUrl -esf数据服务地址(可以为空，默认取与gsf数据相同路径地址)
     * @param {String} options.alias -数据源名称(可以为空，默认取文件名)
     *
     * @memberOf GSFDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     * @example
     * let options = {
        gsfUrl: 'http://127.0.0.1:8080/data/Provinces_R.gsf',
        alias: 'testGsf'
      };
     var globe = viewer.getGlobe();
     var workspace = globe.getDocument();
     let dataSource = new PIE.GSFDataSource();
     dataSource.load(options).then((value)=>{
           //vaule就是load之后的被成功打开的dataSource 可以用来添加到工作空间中，然后与layer绑定
            workspace.getDataSourceManager().addDataSource(value);
       })
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var esfFile = "";
        var gsfUrl = options.gsfUrl;

        if (gsfUrl == null || gsfUrl == "") {
          reject(new Error('PIE.GSFDataSource.load: input gsfUrl is NULL'));
          return;
        }

        var name = PIEFile.getFileName(gsfUrl);

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        esfFile = file.replace(/.gsf/, '.esf');
        var filesPicks = [];
        filesPicks.push(file);
        filesPicks.push(esfFile);
        var urlsPicks = [];
        var esfUrl = options.esfUrl;

        if (!esfUrl) {
          esfUrl = gsfUrl.replace(/.gsf/, '.esf');
        }

        urlsPicks.push(gsfUrl);
        urlsPicks.push(esfUrl);

        function callBack(filelist, urllist, datalist) {
          if (that.open({
            database: filesPicks[0],
            alias: options.alias
          })) {
            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },

    /**
     * 新建数据集
     * @param {PIEDatasetType} type -数据集类型
     * @param {String} name -数据集名称
     *
     * @memberOf GSFDataSource#
     * @returns {PIEDataset} 如果创建成功返回数据集对象，否则返回null
     */
    createDataset: function createDataset(type, name) {
      var datasetName = new PIEString$1(name);

      var hDataset = Module._DataSource_CreateDataset(this.handle, type, datasetName.getHandle());

      datasetName.dispose();

      if (hDataset) {
        return PIEDatasetFactory.CreateInstance(hDataset);
      }

      return null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 模型数据源操作函数
   * @name ModelDataSource
   *@extends DataSource
   *
   */

  function PIEModelDataSource(handle, autoRelease) {
    PIEDataSource.call(this, handle, autoRelease);
  }

  PIEModelDataSource.prototype = Object.assign(Object.create(PIEDataSource.prototype), {// /**
    //  * 设置OSGB数据集坐标
    //  * @param {(Array/PIEVector3)} position -坐标
    //  * @memberOf ModelDataSource#
    //  */
    // setPosition: function (position) {
    //     var array = null;
    //     if (position instanceof PIEVector3) {
    //         array = position.toArray();
    //     } else if (position instanceof Array) {
    //         array = position;
    //     }
    //     if(array){
    //         var positionArray = new PIEArray(array, PIEArrayType.Float64);
    //         Module._MDataset_SetPosition(this.dataset, positionArray.getHandle());
    //         positionArray.dispose();
    //     }
    // },
    //
    // /**
    //  * 获取OSGB数据集坐标
    //  * @returns {PIEVector3} 返回数据集坐标
    //  *
    //  * @memberOf ModelDataSource#
    //  */
    // getPosition: function () {
    //     var positionArray = new PIEArray(3, PIEArrayType.Float64);
    //     Module._MDataset_GetPosition(this.dataset, positionArray.getHandle());
    //     positionArray.updateData();
    //     var position = positionArray.toArray();
    //     positionArray.dispose();
    //     return new PIEVector3(position[0], position[1], position[2]);
    // }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建OSGB数据源
   * @name OSGBDataSource
   * @class OSGBDataSource
   * OSGB数据源操作函数
   * @extends ModelDataSource
   */

  function PIEOSGBDataSource(handle, autoRelease) {
    PIEModelDataSource.call(this, handle, autoRelease);
  }

  PIEOSGBDataSource.prototype = Object.assign(Object.create(PIEModelDataSource.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */
  //暂时不开放接口文档
  // /**
  //  * 创建Google数据源
  //  * @name GEDataSource
  //  * @class GEDataSource
  //  * Google数据源操作函数
  //  * @extends ModelDataSource
  //  */

  function PIEGEDataSource(handle, autoRelease) {
    PIEModelDataSource.call(this, handle, autoRelease);
  }

  PIEGEDataSource.prototype = Object.assign(Object.create(PIEModelDataSource.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * GDAL矢量数据源对象
   * @name GdalFeatureDataSource
   * @class GdalFeatureDataSource
   * @extends FeatureDataSource
   */

  function PIEGdalFeatureDataSource(handle, autoRelease) {
    PIEFeatureDataSource.call(this, handle, autoRelease);
  }

  PIEGdalFeatureDataSource.prototype = Object.assign(Object.create(PIEFeatureDataSource.prototype), {
    /**
     * 通过数据源路径加载并打开数据源
     * @param {Object} options -
     * @param {String} options.file -数据源从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -数据源的服务地址
     * @param {String} options.alias -数据源名称
     *
     * @memberOf GdalFeatureDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     * @example
     * let options = {
        file: 'data/111.000',
        url: 'http://127.0.0.1:8080/data/111.000',
      };
     let workspace = viewer.getGlobe().getDocument();
     let dataSource = new PIE.FeatureDataSource();
     dataSource.load(options).then((value)=>{
           //vaule就是load之后的被成功打开的dataSource 可以用来添加到工作空间中，然后与layer绑定
            workspace.getDataSourceManager().addDataSource(value);
       })
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var url = options.url;
        var filesPicks = [];

        if (url == null) {
          return null;
        }

        var name = PIEFile.getFileName(url);
        var index = name.lastIndexOf(".");

        if (index < 0) {
          name = name + ".000";
        }

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        filesPicks.push(file);
        var urlsPicks = [];
        urlsPicks.push(options.url);

        function callBack(filelist, urllist, datalist) {
          if (that.open({
            database: filesPicks[0],
            alias: options.alias
          })) {
            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 栅格数据源
   * @name RasterDataSource
   * @extends DataSource
   */

  function PIERasterDataSource(handle, autoRelease) {
    PIEDataSource.call(this, handle, autoRelease);
  }

  PIERasterDataSource.prototype = Object.assign(Object.create(PIEDataSource.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * GDAL栅格数据源对象
   * @name GdalRasterDataSource
   * @class GdalRasterDataSource
   * @extends RasterDataSource
   */

  function PIEGdalRasterDataSource(handle, autoRelease) {
    PIERasterDataSource.call(this, handle, autoRelease);
  }

  PIEGdalRasterDataSource.prototype = Object.assign(Object.create(PIERasterDataSource.prototype), {
    /**
     * 通过数据源路径加载并打开数据源
     * @param {Object} options -
     * @param {String} options.file -数据源从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -数据源的服务地址
     * @param {String} options.alias -数据源名称
     *
     * @memberOf GdalRasterDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var url = options.url;
        var filesPicks = [];

        if (url == null) {
          return null;
        }

        var name = PIEFile.getFileName(url);
        var ext = PIEFile.getExtFromName(name);

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        var rrdFile;
        var auxFile;

        if (ext == "tif") {
          rrdFile = file.replace('.tif', '.rrd');
          auxFile = file.replace('.tif', '.aux');
        } else if (ext == "tiff") {
          rrdFile = file.replace('.tiff', '.rrd');
          auxFile = file.replace('.tiff', '.aux');
        }

        filesPicks.push(file);
        filesPicks.push(rrdFile);
        filesPicks.push(auxFile);
        var urlsPicks = [];
        urlsPicks.push(options.url);
        var rrdUrl;
        var auxUrl;

        if (ext == "tif") {
          rrdUrl = url.replace('.tif', '.rrd');
          auxUrl = url.replace('.tif', '.aux');
        } else if (ext == "tiff") {
          rrdUrl = url.replace('.tiff', '.rrd');
          auxUrl = url.replace('.tiff', '.aux');
        }

        urlsPicks.push(rrdUrl);
        urlsPicks.push(auxUrl);

        function callBack(filelist, urllist, datalist) {
          if (that.open({
            database: filesPicks[0],
            alias: options.alias
          })) {
            that.getDataset();
            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建Mapbox瓦片数据源
   * @name MVTDataSource
   * @class MVTDataSource
   * Mapbox瓦片数据源操作函数
   * @extends DataSource
   */

  function PIEMVTDataSource(handle, autoRelease) {
    PIEDataSource.call(this, handle, autoRelease);
  }

  PIEMVTDataSource.prototype = Object.assign(Object.create(PIEDataSource.prototype), {
    /**
     * 创建矢量瓦片
     * @param {Object} options -
     * @param {String} options.server -url地址(必输)
     * @param {String} options.alias -瓦片数据源别名(必输)
     * @memberOf MVTDataSource#
     */
    create: function create(options) {
      if (options != null) {
        var serverUrl = options.server;
        var name = options.alias;
        options.cachePath;

        if (serverUrl == null || serverUrl == "") {
          return;
        }

        var strProvider = new PIEString$1(serverUrl);
        this.handle = Module._DataSource_CreateMVTDataSource(strProvider.getHandle(), null, null);

        if (this.handle) {
          this.autoRelease = true;
          this.setAlias(name);
        }

        strProvider.dispose();
      }
    },

    /**
     * 打开矢量瓦片数据源
     * @param {Object} options -
     * @param {String} options.dataBase -数据源(必填项)
     * @param {String} options.server -数据源服务地址(非必填项)
     * @param {String} options.alias -瓦片数据源别名（非必填项）
     * @memberOf MVTDataSource#
     */
    open: function open(options) {
      var dataBase = options.dataBase;
      var server = options.server;
      var name = options.alias;

      if (dataBase == null) {
        return;
      }

      var strDataBase = new PIEString$1(dataBase);
      var strServer = new PIEString$1(server);
      this.handle = Module._DataSource_OpenMVTDataSource(strDataBase.getHandle(), strServer.getHandle());
      strDataBase.dispose();
      strServer.dispose();

      if (options.alias) {
        this.setAlias(name);
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建Tiles3D数据源
   * @name Tiles3DDataSource
   * @class Tiles3DDataSource
   * Tiles3D数据源操作函数
   * @extends ModelDataSource
   */

  function PIETiles3DDataSource(handle, autoRelease) {
    PIEModelDataSource.call(this, handle, autoRelease);
  }

  PIETiles3DDataSource.prototype = Object.assign(Object.create(PIEModelDataSource.prototype), {});

  function PIEDataSourceFactory() {}

  Object.assign(PIEDataSourceFactory.prototype, {});

  PIEDataSourceFactory.CreateInstance = function (hDataSource) {
    if (hDataSource) {
      var strType = new PIEString$1(256);

      Module._DataSource_GetType(hDataSource, strType.getHandle());

      var type = strType.toString();
      strType.dispose();

      if (type == PIEDataSourceType.GeoJson) {
        return new PIEGeoJsonDataSource(hDataSource);
      } else if (type == PIEDataSourceType.Gsf) {
        return new PIEGSFDataSource(hDataSource);
      } else if (type == PIEDataSourceType.Osgb) {
        return new PIEOSGBDataSource(hDataSource);
      }

      if (type == PIEDataSourceType.Tiles3D) {
        return new PIETiles3DDataSource(hDataSource);
      } else if (type == PIEDataSourceType.GE) {
        return new PIEGEDataSource(hDataSource);
      } else if (type == PIEDataSourceType.Shp) {
        return new PIEShpDataSource(hDataSource);
      } else if (type == PIEDataSourceType.Feature) {
        return new PIEGdalFeatureDataSource(hDataSource);
      } else if (type == PIEDataSourceType.Raster) {
        return new PIEGdalRasterDataSource(hDataSource);
      } else if (type == PIEDataSourceType.MVT) {
        return new PIEMVTDataSource(hDataSource);
      } else {
        return new PIEDataSource(hDataSource);
      }
    }

    return null;
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 数据集操作函数
   * @name Dataset
   *
   */

  function PIEDataset(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEDataset.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 打开数据集
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果打开成功返回true，否则返回false
     */
    open: function open() {
      return Boolean(Module._Dataset_Open(this.handle));
    },

    /**
     * 判断数据集是否已经打开
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果已经打开返回true，否则返回false
     */
    isOpen: function isOpen() {
      return Boolean(Module._Dataset_IsOpen(this.handle));
    },

    /**
     * 关闭数据集
     * @memberOf Dataset#
     */
    close: function close() {
      Module._Dataset_Close(this.handle);
    },
    // /**
    //  * 释放数据集缓存对象(仅支持瓦片型数据源)
    //  * @memberOf Dataset#
    //     */
    // releaseCacheHandles: function () {
    //     Module._Dataset_ReleaseCacheHandles(this.handle);
    // },

    /**
     * 获取数据集类型
     *
     * @memberOf Dataset#
     * @returns {PIEDatasetType} 返回数据集类型
     */
    getType: function getType() {
      return Module._Dataset_GetType(this.handle);
    },

    /**
     * 判断数据集是否只读
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果是只读返回true，否则返回false
     */
    isReadOnly: function isReadOnly() {
      return Boolean(Module._Dataset_IsReadOnly(this.handle));
    },

    /**
     * 获取数据集名称
     *
     * @memberOf Dataset#
     * @returns {String} 返回的数据集名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Dataset_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 数据集重命名
     * @param {String} dataSetName -新命名的数据集名称
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果重命名成功返回true，否则返回false(新名称与原名称相同则返回false)
     */
    rename: function rename(dataSetName) {
      var strNewName = new PIEString$1(dataSetName);

      var res = Module._Dataset_Rename(this.handle, strNewName.getHandle());

      strNewName.toString();
      strNewName.dispose();
      return Boolean(res);
    },
    // /**
    //  * 获取数据集表名
    //  *
    //  * @memberOf Dataset#
    //  * @returns {String} 返回数据集表名称
    //  */
    // getTableName: function () {
    //     var strDataSetTableName = new PIEString(256);
    //     Module._Dataset_GetTableName(this.handle, strDataSetTableName.getHandle());
    //     var tableName = strDataSetTableName.toString();
    //     strDataSetTableName.dispose();
    //     return tableName;
    // },

    /**
     * 判断是否为矢量数据集
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果是矢量数据集返回true，否则返回false
     */
    isVector: function isVector() {
      return Boolean(Module._Dataset_IsVector(this.handle));
    },

    /**
     * 判断是否为栅格数据集
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果是栅格数据集返回true，否则返回false
     */
    isRaster: function isRaster() {
      return Boolean(Module._Dataset_IsRaster(this.handle));
    },

    /**
     * 判断是否为瓦片数据集
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果是瓦片数据集返回true，否则返回false
     */
    isTile: function isTile() {
      return Boolean(Module._Dataset_IsTile(this.handle));
    },

    /**
     * 获取数据集范围
     *
     * @memberOf Dataset#
     * @returns {PIEBounds} 返回数据集范围
     */
    getBounds: function getBounds() {
      var boundsArr = new PIEArray(4, PIEArrayType.Float64);

      Module._Dataset_GetBounds(this.handle, boundsArr.getHandle());

      boundsArr.updateData();
      var array = boundsArr.toArray();
      var bounds = new PIEBounds(array[0], array[1], array[2], array[3]);
      boundsArr.dispose();
      return bounds;
    },

    /**
     * 获取数据集的空间参考系
     *
     * @memberOf Dataset#
     * @returns {PIESpatialReference} 如果获取成功返回数据集的空间参考系对象，否则返回NULL
     */
    getSpatialReference: function getSpatialReference() {
      var handle = Module._Dataset_GetSpatialReference(this.handle);

      if (handle) {
        return new PIESpatialReference(handle);
      }
    },

    /**
     * 设置数据集的空间参考系
     * @param {PIESpatialReference} spatialReference -空间参考系对象
     *
     * @memberOf Dataset#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setSpatialReference: function setSpatialReference(spatialReference) {
      return Boolean(Module._Dataset_SetSpatialReference(this.handle, spatialReference.getHandle()));
    },

    /**
     * 获取数据集对应的数据源
     *
     * @memberOf Dataset#
     * @returns {PIEDataSource} 如果获取成功返回数据源对象，否则返回NULL
     */
    getDataSource: function getDataSource() {
      var hDataSource = Module._Dataset_GetDataSource(this.handle);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 风格类型枚举
   * @readonly
   * @enum {number}
   */
  var PIEStyleType = {
    /**空类型*/
    Null: 0,

    /**矢量风格类型*/
    Vector: 1,

    /**文本风格类型*/
    Text: 2,

    /**复合风格类型*/
    Symbol: 3 // /**模型风格类型*/
    // Model: 4

  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 风格基类操作函数
   * @name Style
   *
   */

  function PIEStyle(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEStyle.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 删除对象
     * @memberOf Style#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._Style_Delete(this.handle);
      }

      this.handle = null;
    },
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },

    /**
     * 获取风格类型
     *
     * @memberOf Style#
     * @returns {PIEStyleType} 返回风格类型
     */
    getType: function getType() {
      return Module._Style_GetType(this.handle);
    },

    /**
     * 获取风格名称
     *
     * @memberOf Style#
     * @returns {String} 返回的风格名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Style_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置风格名称
     * @param {String} name -风格名称
     * @memberOf Style#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._Style_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取是否避让
    //  *
    //  * @memberOf Style#
    //  * @returns {Boolean} 是否避让
    //  */
    isCollision: function isCollision() {
      return Module._Style_IsCollision(this.handle);
    },
    // /**
    //  * 设置是否避让
    //  * @param {Boolean} isCollision -是否避让
    //  * @memberOf Style#
    //  *
    //  */
    setIsCollision: function setIsCollision(isCollision) {
      Module._Style_SetIsCollision(this.handle, isCollision);
    },

    /**
     * 克隆风格
     *
     * @memberOf Style#
     * @returns {PIEStyle} 风格对象
     */
    cloneStyle: function cloneStyle() {
      var hStyle = Module._Style_CloneStyle(this.handle);

      return PIEStyleFactory.CreateInstance(hStyle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 线符号类型
   * @readonly
   * @enum {number}
   */
  var PIELineType = {
    /** 空类型*/
    Null: 0,

    /** 符号库类型*/
    Line: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 填充符号类型
   * @readonly
   * @enum {number}
   */
  var PIEFillType = {
    /** 空类型*/
    Null: 0,

    /**符号库类型*/
    Fill: 5
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 创建几何风格对象
   * @name VectorStyle
   * @class VectorStyle
   * 几何风格操作函数
   *
   * @extends Style
   * @param {Object} options
   * @param {PIEPointType} options.pointType -点类型
   * @param {PIEVector2/Array} options.pointSize -点大小
   * @param {PIEColor/Array} options.pointColor -点颜色
   * @param {PIEPointAlignType} options.pointAlign -点对齐方式
   * @param {Number} options.pointStyle -点风格id(当type为PIE.PointType.Icon时，需要设置id)
   * @param {PIEPointAlignType} options.lineColor -线颜色
   * @param {Number} options.lineWidth -线宽
   * @param {PIEColor/Array} options.fillColor -面填充颜色
   * @param {PIEAltitudeMode} options.altitudeMode - 设置依地模式(默认为PIEAltitudeMode.ClampToGround)
   * @param {PIEClassifyMode} options.classifyMode - 设置分类显示模式(默认为PIEClassifyMode.ClassifyAll)
   */

  function PIEVectorStyle(options) {
    var handle = null;
    var autoRelease = false;

    if (options == null) {
      handle = Module._VectorStyle_Create();
      autoRelease = true;
    } else {
      if (options.handle == null) {
        handle = Module._VectorStyle_Create();
        this.handle = handle;
        autoRelease = true;

        if (options.pointColor) {
          this.setPointColor(options.pointColor);
        }

        if (options.pointSize) {
          this.setPointSize(options.pointSize);
        }

        if (options.pointType != null) {
          this.setPointType(options.pointType);
        }

        if (options.pointStyle != null) {
          this.setPointStyle(options.pointStyle);
        }

        if (options.pointAlign != null) {
          this.setPointAlign(options.pointAlign);
        }

        if (options.pointAngle != null) {
          this.setPointAngle(options.pointAngle);
        }

        if (options.lineColor) {
          this.setLineColor(options.lineColor);
        }

        if (options.lineWidth != null) {
          this.setLineWidth(options.lineWidth);
        }

        this.setLineType(PIELineType.Null);
        this.setLineStyle(0);

        if (options.fillColor) {
          this.setForeFillColor(options.fillColor);
        }

        this.setFillType(PIEFillType.Null);
        this.setFillStyle(0);

        if (options.altitudeMode != null) {
          this.setAltitudeMode(options.altitudeMode);
        }

        if (options.classifyMode != null) {
          this.setClassifyMode(options.classifyMode);
        }
      } else {
        handle = options.handle;
      }
    }

    PIEStyle.call(this, handle, autoRelease);
  }

  PIEVectorStyle.prototype = Object.assign(Object.create(PIEStyle.prototype), {
    /**
     * 获取点符号类型
     *
     * @memberOf VectorStyle#
     * @returns {PIEPointType} 返回点符号类型
     */
    getPointType: function getPointType() {
      return Module._VectorStyle_GetPointType(this.handle);
    },

    /**
     * 设置点符号类型
     * @param {PIEPointType} type -点符号类型
     * @memberOf VectorStyle#
     *
     */
    setPointType: function setPointType(type) {
      Module._VectorStyle_SetPointType(this.handle, type);
    },

    /**
     * 获取点符号风格ID
     *
     * @memberOf VectorStyle#
     * @returns {Number} 返回点符号风格ID
     *
     */
    getPointStyle: function getPointStyle() {
      return Module._VectorStyle_GetPointStyle(this.handle);
    },

    /**
     * 设置点符号风格ID
     * @param {Number} style -点符号风格ID
     * @memberOf VectorStyle#
     *
     */
    setPointStyle: function setPointStyle(style) {
      if (style != null) {
        Module._VectorStyle_SetPointStyle(this.handle, style);
      }
    },

    /**
     * 获取点符号标识角度
     *
     * @memberOf VectorStyle#
     * @returns {Number} 返回点符号标识角度
     *
     */
    getPointAngle: function getPointAngle() {
      return Module._VectorStyle_GetPointAngle(this.handle);
    },

    /**
     * 设置点符号标识角度
     * @param {Number} angle -点符号标识角度
     * @memberOf VectorStyle#
     *
     */
    setPointAngle: function setPointAngle(angle) {
      return Module._VectorStyle_SetPointAngle(this.handle, angle);
    },

    /**
     * 获取点符号标识大小
     *
     * @memberOf VectorStyle#
     * @returns {PIESize} 返回点符号标识大小
     */
    getPointSize: function getPointSize() {
      var sizeArray = new PIEArray(2, PIEArrayType.Float64);

      Module._VectorStyle_GetPointSize(this.handle, sizeArray.getHandle());

      sizeArray.updateData();
      var array = sizeArray.toArray();
      sizeArray.dispose();
      var size = new PIESize(array[0], array[1]);
      return size;
    },

    /**
     * 设置点符号标识大小
     * @param {(Array/PIESize)} size -点符号标识大小
     * @memberOf VectorStyle#
     *
     */
    setPointSize: function setPointSize(size) {
      var array = null;

      if (size instanceof Array) {
        array = size;
      } else if (size instanceof PIESize) {
        array = [size.cx, size.cy];
      }

      if (array) {
        var sizeArray = new PIEArray(array, PIEArrayType.Float64);

        Module._VectorStyle_SetPointSize(this.handle, sizeArray.getHandle());

        sizeArray.dispose();
      }
    },

    /**
     * 获取点符号对齐方式
     *
     * @memberOf VectorStyle#
     * @returns {PIEPointAlignType} 返回点符号对齐方式
     *
     */
    getPointAlign: function getPointAlign() {
      return Module._VectorStyle_GetPointAlign(this.handle);
    },

    /**
     * 设置点符号对齐方式
     * @param {PIEPointAlignType} type -点符号对齐方式
     * @memberOf VectorStyle#
     *
     */
    setPointAlign: function setPointAlign(type) {
      Module._VectorStyle_SetPointAlign(this.handle, type);
    },

    /**
     * 获取几何风格点符号颜色
     *
     * @memberOf VectorStyle#
     * @returns {PIEColor} 返回点符号颜色
     */
    getPointColor: function getPointColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._VectorStyle_GetPointColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var Color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return Color;
    },

    /**
     * 设置几何风格点符号颜色
     * @param {(PIEColor/Array)} color -点符号颜色
     * @memberOf VectorStyle#
     *
     */
    setPointColor: function setPointColor(color) {
      if (color == null) {
        return;
      }

      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._VectorStyle_SetPointColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取几何风格点符号颜色是否可修改
     *
     * @memberOf VectorStyle#
     * @returns {Boolean} 返回点符号颜色是否可用（true-可用，false-不可用）
     *
     */
    isEnablePointColor: function isEnablePointColor() {
      return Boolean(Module._VectorStyle_IsEnablePointColor(this.handle));
    },

    /**
     * 设置几何风格点符号颜色是否修改 可用状态下支持修改颜色
     * @param {Boolean} enabled -点符号颜色是否可修改
     * @param {(PIEColor/Array)} color -线型颜色
     * @memberOf VectorStyle#
     *
     *
     */
    enablePointColor: function enablePointColor(enabled, color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._VectorStyle_EnablePointColor(this.handle, enabled, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 设置点符号公告板模式
     * @param {PIEBillBoardModeType} type -点符号公告板模式
     * @memberOf VectorStyle#
     *
     */
    setBillBoardMode: function setBillBoardMode(type) {
      Module._VectorStyle_SetBillBoardMode(this.handle, type);
    },

    /**
     * 获取点符号公告板模式
     *
     * @memberOf VectorStyle#
     * @returns {PIEBillBoardModeType} 返回点符号公告板模式
     *
     */
    getBillBoardMode: function getBillBoardMode() {
      return Module._VectorStyle_GetBillBoardMode(this.handle);
    },

    /**
     * 设置线符号类型
     * @param {PIELineType} type -线符号类型
     * @memberOf VectorStyle#
     *
     */
    setLineType: function setLineType(type) {
      if (type != null) {
        Module._VectorStyle_SetLineType(this.handle, type);
      }
    },

    /**
     * 获取线符号类型
     *
     * @memberOf VectorStyle#
     * @returns {PIELineType} 返回线符号类型
     *
     */
    getLineType: function getLineType() {
      return Module._VectorStyle_GetLineType(this.handle);
    },

    /**
     * 设置线风格ID
     * @param {Number} style -线风格ID
     * @memberOf VectorStyle#
     *
     */
    setLineStyle: function setLineStyle(style) {
      if (style != null) {
        Module._VectorStyle_SetLineStyle(this.handle, style);
      }
    },

    /**
     * 获取线风格ID
     *
     * @memberOf VectorStyle#
     * @returns {Number} 返回线风格ID
     *
     */
    getLineStyle: function getLineStyle() {
      return Module._VectorStyle_GetLineStyle(this.handle);
    },

    /**
     * 获取几何风格线颜色
     *
     * @memberOf VectorStyle#
     * @returns {PIEColor} 返回线颜色
     */
    getLineColor: function getLineColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._VectorStyle_GetLineColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(array[0], array[1], array[2], array[3]);
    },

    /**
     * 设置几何风格线颜色
     * @param {(PIEColor/Array)} color -线颜色
     * @memberOf VectorStyle#
     *
     */
    setLineColor: function setLineColor(color) {
      if (color == null) {
        return;
      }

      var array = [];

      if (color instanceof PIEColor) {
        array = [color.r, color.g, color.b, color.a];
      } else if (color instanceof Array) {
        array = [color[0], color[1], color[2], color[3]];
      }

      if (array.length == 4) {
        var colorArray = new PIEArray(array, PIEArrayType.UInt8);

        Module._VectorStyle_SetLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 设置几何风格线宽
     * @param {Number} width -线宽
     * @memberOf VectorStyle#
     *
     */
    setLineWidth: function setLineWidth(width) {
      if (width != null) {
        Module._VectorStyle_SetLineWidth(this.handle, width);
      }
    },

    /**
     * 获取几何风格线宽
     *
     * @memberOf VectorStyle#
     * @returns {Number} 返回线宽
     */
    getLineWidth: function getLineWidth() {
      return Module._VectorStyle_GetLineWidth(this.handle);
    },
    // /**
    //  * 设置几何风格线段端口类型
    //  * @param {PIELineCapStyle} style -线段端口类型
    //  * @memberOf VectorStyle#
    //  */
    setLineCapStyle: function setLineCapStyle(style) {
      Module._VectorStyle_SetLineCapStyle(this.handle, style);
    },
    // /**
    //  * 获取几何风格线段端口类型
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {PIELineCapStyle} 返回线段端口类型
    //  */
    getLineCapStyle: function getLineCapStyle() {
      return Module._VectorStyle_GetLineCapStyle(this.handle);
    },
    // /**
    //  * 设置几何风格线段连接类型
    //  * @param {PIELineJoinStyle} style -线段连接类型
    //  * @memberOf VectorStyle#
    //  */
    setLineJoinStyle: function setLineJoinStyle(style) {
      Module._VectorStyle_SetLineJoinStyle(this.handle, style);
    },
    // /**
    //  * 获取几何风格线段连接类型
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {PIELineJoinStyle} 返回线段连接类型
    //  */
    getLineJoinStyle: function getLineJoinStyle() {
      return Module._VectorStyle_GetLineJoinStyle(this.handle);
    },
    // /**
    //  * 获取虚线偏移量
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {Number} 虚线偏移量
    //  */
    getDashOffset: function getDashOffset() {
      return Module._VectorStyle_GetDashOffset(this.handle);
    },
    // /**
    //  * 设置虚线偏移量
    //  * @param {Number} dashOffset -虚线偏移量
    //  * @memberOf VectorStyle#
    //  *
    //  */
    setDashOffset: function setDashOffset(dashOffset) {
      Module._VectorStyle_SetDashOffset(this.handle, dashOffset);
    },
    // /**
    //  * 获取矢量线型虚实数组数量
    //  * @memberOf VectorStyle#
    //  * @returns {Number} 返回数组数量
    //  */
    getDashCount: function getDashCount() {
      return Module._VectorStyle_GetDashCount(this.handle);
    },
    // /**
    //  * 获取线型虚实数组
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {Array} 返回线型虚实数组
    //  */
    getDashPattern: function getDashPattern() {
      var count = this.getDashCount();

      if (count > 0) {
        var dashArray = new PIEArray(count, PIEArrayType.Float32);

        Module._VectorStyle_GetDashPattern(this.handle, dashArray.getHandle());

        dashArray.updateData();
        var dashPattern = dashArray.toArray();
        dashArray.dispose();
        return dashPattern;
      }

      return null;
    },
    // /**
    //  * 设置线型虚实数组
    //  * @param {Array} dashPattern -线型虚实数组
    //  * @memberOf VectorStyle#
    //  */
    setDashPattern: function setDashPattern(dashPattern) {
      if (dashPattern instanceof Array && dashPattern.length) {
        var dashArray = new PIEArray(dashPattern, PIEArrayType.Float32);

        Module._VectorStyle_SetDashPattern(this.handle, dashArray.getHandle(), dashPattern.length);

        dashArray.dispose();
      }
    },

    /**
     * 设置几何风格填充符号类型
     * @param {PIEFillType} type -填充符号类型
     * @memberOf VectorStyle#
     *
     */
    setFillType: function setFillType(type) {
      if (type != null) {
        Module._VectorStyle_SetFillType(this.handle, type);
      }
    },

    /**
     * 获取几何风格填充符号类型
     *
     * @memberOf VectorStyle#
     * @returns {PIEFillType} 返回填充符号类型
     *
     */
    getFillType: function getFillType() {
      return Module._VectorStyle_GetFillType(this.handle);
    },

    /**
     * 设置几何风格填充风格ID
     * @param {Number} style -填充风格ID
     * @memberOf VectorStyle#
     *
     */
    setFillStyle: function setFillStyle(style) {
      if (style != null) {
        Module._VectorStyle_SetFillStyle(this.handle, style);
      }
    },

    /**
     * 获取几何风格填充ID
     *
     * @memberOf VectorStyle#
     * @returns {Number} 返回填充风格ID
     */
    getFillStyle: function getFillStyle() {
      return Module._VectorStyle_GetFillStyle(this.handle);
    },

    /**
     * 设置几何风格填充效果(三维面对象可设置)
     * @param {PIEFillEffect} effect -填充效果枚举
     * @memberOf VectorStyle#
     *
     */
    setFillEffect: function setFillEffect(effect) {
      Module._VectorStyle_SetFillEffect(this.handle, effect);
    },

    /**
     * 获取几何风格填充效果
     *
     * @memberOf VectorStyle#
     * @returns {PIEFillEffect} 返回填充效果枚举
     */
    getFillEffect: function getFillEffect() {
      return Module._VectorStyle_GetFillEffect(this.handle);
    },

    /**
     * 获取几何风格中填充前景颜色
     *
     * @memberOf VectorStyle#
     * @returns {PIEColor} 返回的填充前景颜色
     */
    getForeFillColor: function getForeFillColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._VectorStyle_GetForeFillColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(array[0], array[1], array[2], array[3]);
    },

    /**
     * 设置几何风格中填充前景颜色
     * @param {(PIEColor/Array)} color -填充前景颜色
     * @memberOf VectorStyle#
     *
     */
    setForeFillColor: function setForeFillColor(color) {
      if (color == null) {
        return;
      }

      var array = [];

      if (color instanceof PIEColor) {
        array = [color.r, color.g, color.b, color.a];
      } else if (color instanceof Array) {
        array = [color[0], color[1], color[2], color[3]];
      }

      if (array.length == 4) {
        var colorArray = new PIEArray(array, PIEArrayType.UInt8);

        Module._VectorStyle_SetForeFillColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取几何风格中填充背景颜色
     *
     * @memberOf VectorStyle#
     * @returns {PIEColor} 返回的填充背景颜色
     */
    getBackFillColor: function getBackFillColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._VectorStyle_GetBackFillColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(array[0], array[1], array[2], array[3]);
    },

    /**
     * 设置几何风格中填充背景颜色
     * @param {(PIEColor/Array)} color -填充背景颜色
     * @memberOf VectorStyle#
     *
     */
    setBackFillColor: function setBackFillColor(color) {
      var array = [];

      if (color instanceof PIEColor) {
        array = [color.r, color.g, color.b, color.a];
      } else if (color instanceof Array) {
        array = color;
      }

      if (array.length > 3) {
        var colorArray = new PIEArray(array, PIEArrayType.UInt8);

        Module._VectorStyle_SetBackFillColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },
    // /**
    //  * 获取几何风格中填充角度
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {Number} 返回填充角度
    //  */
    getFillAngle: function getFillAngle() {
      return Module._VectorStyle_GetFillAngle(this.handle);
    },
    // /**
    //  * 设置几何风格中填充角度
    //  * @param {Number} angle -填充角度
    //  * @memberOf VectorStyle#
    //  *
    //  */
    setFillAngle: function setFillAngle(angle) {
      Module._VectorStyle_SetFillAngle(this.handle, angle);
    },
    // /**
    //  * 获取几何风格填充渐变类型
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {PIEFillGradientType} 返回填充渐变类型
    //  */
    // getFillGradient: function () {
    //     return Module._VectorStyle_GetFillGradient(this.handle);
    // },
    //
    // /**
    //  * 设置几何风格填充渐变类型
    //  * @param {PIEFillGradientType} type -填充渐变类型
    //  * @memberOf VectorStyle#
    //  *
    //  */
    // setFillGradient: function (type) {
    //     Module._VectorStyle_SetFillGradient(this.handle, type);
    // },
    // /**
    //  * 获取几何风格中渐变填充中心点相对于填充范围中心点的水平偏移
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {Number} 返回水平偏移量
    //  */
    getFillOffsetX: function getFillOffsetX() {
      return Module._VectorStyle_GetFillOffsetX(this.handle);
    },
    // /**
    //  * 设置几何风格中渐变填充中心点相对于填充范围中心点的水平偏移
    //  * @param {Number} offsetX -水平偏移量
    //  * @memberOf VectorStyle#
    //  *
    //  */
    setFillOffsetX: function setFillOffsetX(offsetX) {
      Module._VectorStyle_SetFillOffsetX(this.handle, offsetX);
    },
    // /**
    //  * 获取几何风格中渐变填充中心点相对于填充范围中心点的垂直偏移
    //  *
    //  * @memberOf VectorStyle#
    //  * @returns {Number} 返回垂直偏移量
    //  */
    getFillOffsetY: function getFillOffsetY() {
      return Module._VectorStyle_GetFillOffsetY(this.handle);
    },
    // /**
    //  * 设置几何风格中渐变填充中心点相对于填充范围中心点的垂直偏移
    //  * @param {Number} offsetY -垂直偏移量
    //  * @memberOf VectorStyle#
    //  *
    //  */
    setFillOffsetY: function setFillOffsetY(offsetY) {
      Module._VectorStyle_SetFillOffsetY(this.handle, offsetY);
    },

    /**
     * 设置依地模式
     * @param {PIEAltitudeMode} mode -依地模式
     * @memberOf VectorStyle#
     *
     */
    setAltitudeMode: function setAltitudeMode(mode) {
      if (mode) {
        Module._VectorStyle_SetAltitudeMode(this.handle, mode);
      }
    },

    /**
     * 获取依地模式
     *
     * @memberOf VectorStyle#
     * @returns {PIEAltitudeMode} 返回依地模式
     */
    getAltitudeMode: function getAltitudeMode() {
      return Module._VectorStyle_GetAltitudeMode(this.handle);
    },

    /**
     * 设置分类模式
     * @param {PIEClassifyMode} mode -分类模式
     * @memberOf VectorStyle#
     *
     */
    setClassifyMode: function setClassifyMode(mode) {
      Module._VectorStyle_SetClassifyMode(this.handle, mode);
    },

    /**
     * 获取分类模式
     *
     * @memberOf VectorStyle#
     * @returns {PIEClassifyMode} 返回分类模式
     */
    getClassifyMode: function getClassifyMode() {
      return Module._VectorStyle_GetClassifyMode(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 创建几何文本风格对象
   * @name TextStyle
   * @class TextStyle
   * 文本风格操作函数
   *
   * @extends Style
   * @example
   * let textStyle = new PIE.TextStyle();
   */

  function PIETextStyle(handle, autoRelease) {
    if (handle == null) {
      handle = Module._TextStyle_Create();
      autoRelease = true;
    }

    PIEStyle.call(this, handle, autoRelease);
  }

  PIETextStyle.prototype = Object.assign(Object.create(PIEStyle.prototype), {
    /**
     * 获取文本风格字体名称
     *
     * @memberOf TextStyle#
     * @returns {String} 返回的文本字体名称
     */
    getFaceName: function getFaceName() {
      var strName = new PIEString$1(256);

      Module._TextStyle_GetFaceName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置文本风格字体名称
     * @param {String} name -文本字体名称 example "微软雅黑"
     * @memberOf TextStyle#
     *
     */
    setFaceName: function setFaceName(name) {
      var strName = new PIEString$1(name);

      Module._TextStyle_SetFaceName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取文本风格背景颜色
     *
     * @memberOf TextStyle#
     * @returns {PIEColor} 返回的文本风格背景颜色
     */
    getBackColor: function getBackColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._TextStyle_GetBackColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var color = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置文本风格背景颜色
     * @param {(PIEColor/Array)} color -文本风格背景颜色
     * @memberOf TextStyle#
     */
    setBackColor: function setBackColor(color) {
      var array = null;

      if (color instanceof PIEColor) {
        array = color.toArray();
      } else if (color instanceof Array) {
        array = color;
      }

      if (color) {
        var colorArray = new PIEArray(array, PIEArrayType.UInt8);

        Module._TextStyle_SetBackColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取文本风格前景颜色
     *
     * @memberOf TextStyle#
     * @returns {PIEColor} 如果成功返回文本前景颜色，如果失败返回NULL
     */
    getForeColor: function getForeColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._TextStyle_GetForeColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var color = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置文本风格前景颜色
     * @param {(PIEColor/Array)} color -文本前景颜色
     * @memberOf TextStyle#
     *
     */
    setForeColor: function setForeColor(color) {
      var array = null;

      if (color instanceof PIEColor) {
        array = color.toArray();
      } else if (color instanceof Array) {
        array = color;
      }

      if (color) {
        var colorArray = new PIEArray(array, PIEArrayType.UInt8);

        Module._TextStyle_SetForeColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取文本字体宽度
     *
     * @memberOf TextStyle#
     * @returns {Number} 返回的文本字体宽度
     */
    getWidth: function getWidth() {
      return Module._TextStyle_GetWidth(this.handle);
    },

    /**
     * 设置文本风格字体宽度
     * @param {Number} width -文本字体宽度
     * @memberOf TextStyle#
     *
     */
    setWidth: function setWidth(width) {
      Module._TextStyle_SetWidth(this.handle, width);
    },

    /**
     * 获取文本风格字体高度
     *
     * @memberOf TextStyle#
     * @returns {Number} 返回的文本字体高度
     */
    getHeight: function getHeight() {
      return Module._TextStyle_GetHeight(this.handle);
    },

    /**
     * 设置文本风格字体高度
     * @param {Number} height -文本字体高度
     * @memberOf TextStyle#
     */
    setHeight: function setHeight(height) {
      Module._TextStyle_SetHeight(this.handle, height);
    },

    /**
     * 获取文本对齐方式
     *
     * @memberOf TextStyle#
     * @returns {PIETextAlignType} 返回的文本对齐方式
     *
     */
    getAlign: function getAlign() {
      return Module._TextStyle_GetAlign(this.handle);
    },

    /**
     * 设置文本对齐方式
     * @param {PIETextAlignType} type -文本对齐方式
     * @memberOf TextStyle#
     *
     */
    setAlign: function setAlign(type) {
      Module._TextStyle_SetAlign(this.handle, type);
    },

    /**
     * 获取文本旋转角度
     *
     * @memberOf TextStyle#
     * @returns {Number} 返回的文本旋转角度
     */
    getAngle: function getAngle() {
      return Module._TextStyle_GetAngle(this.handle);
    },

    /**
     * 设置文本旋转角度
     * @param {Number} angle -旋转角度
     * @memberOf TextStyle#
     *
     */
    setAngle: function setAngle(angle) {
      Module._TextStyle_SetAngle(this.handle, angle);
    },

    /**
     * 获取文本偏移量
     *
     * @memberOf TextStyle#
     * @returns {PIESize} 返回的文本偏移量
     */
    getOffset: function getOffset() {
      var offsetArray = new PIEArray(2, PIEArrayType.Float64);

      Module._TextStyle_GetOffset(this.handle, offsetArray.getHandle());

      offsetArray.updateData();
      var offset = offsetArray.toArray();
      offsetArray.dispose();
      return new PIESize(offset[0], offset[1]);
    },

    /**
     * 设置文本偏移量
     * @param {(PIESize/Array)} offset -文本偏移量
     * @memberOf TextStyle#
     *
     */
    setOffset: function setOffset(offset) {
      var array = [];

      if (offset instanceof PIESize) {
        array = [offset.cx, offset.cy];
      } else if (offset instanceof Array) {
        array = offset;
      }

      var offsetArray = new PIEArray(array, PIEArrayType.Float64);

      Module._TextStyle_SetOffset(this.handle, offsetArray.getHandle());

      offsetArray.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 创建复合风格操作
   * @name SymbolStyle
   * @class SymbolStyle
   * 复合风格操作函数
   *
   * @extends Style
   * @example
   * let symbolStyle = new PIE.SymbolStyle();
   */

  function PIESymbolStyle(handle, autoRelease) {
    if (handle == null) {
      handle = Module._SymbolStyle_Create();
      autoRelease = true;
    }

    PIEStyle.call(this, handle, autoRelease);
  }

  PIESymbolStyle.prototype = Object.assign(Object.create(PIEStyle.prototype), {
    /**
     * 获取几何图形风格
     *
     * @memberOf SymbolStyle#
     * @returns {PIEVectorStyle} 获取成功返回几何图形风格对象，失败返回NULL
     *
     */
    getVectorStyle: function getVectorStyle() {
      var hVectorStyle = Module._SymbolStyle_GetVectorStyle(this.handle);

      if (hVectorStyle) {
        return new PIEVectorStyle({
          handle: hVectorStyle
        });
      }

      return null;
    },

    /**
     * 设置几何图形风格
     * @param {PIEVectorStyle} vectorStyle -几何图形风格对象(风格对象传入后内部会进行克隆，外部必须释放传入的风格对象，否则会出现内存泄露)
     * @memberOf SymbolStyle#
     *
     */
    setVectorStyle: function setVectorStyle(vectorStyle) {
      Module._SymbolStyle_SetVectorStyle(this.handle, vectorStyle.getHandle());
    },

    /**
     * 获取文本风格对象
     *
     * @memberOf SymbolStyle#
     * @returns {PIETextStyle} 如果成功返回文本风格对象,如果失败返回空
     *
     */
    getTextStyle: function getTextStyle() {
      var hTextStyle = Module._SymbolStyle_GetTextStyle(this.handle);

      if (hTextStyle) {
        return new PIETextStyle(hTextStyle);
      }

      return null;
    },

    /**
     * 设置文本风格对象
     *
     * @param {PIETextStyle} textStyle -文本风格对象(风格对象传入后内部会进行克隆，外部必须释放传入的风格对象，否则会出现内存泄露)
     * @memberOf SymbolStyle#
     *
     */
    setTextStyle: function setTextStyle(textStyle) {
      Module._SymbolStyle_SetTextStyle(this.handle, textStyle.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 创建模型风格对象
   * @name ModelStyle
   * @class ModelStyle
   * 模型风格操作函数
   *
   * @extends Style
   */

  function PIEModelStyle(handle, autoRelease) {
    if (handle == null) {
      handle = Module._ModelStyle_Create();
      autoRelease = true;
    }

    PIEStyle.call(this, handle, autoRelease);
  }

  PIEModelStyle.prototype = Object.assign(Object.create(PIEStyle.prototype), {
    /**
     * 设置模型类型
     * @param {Number} type -模型类型
     *
     * @memberOf ModelStyle#
     */
    setModelType: function setModelType(type) {
      Module._ModelStyle_SetModelType(this.handle, type);
    },

    /**
     * 获取模型类型
     *
     * @memberOf ModelStyle#
     * @returns {Number} 返回模型类型
     */
    getModelType: function getModelType() {
      return Module._ModelStyle_GetModelType(this.handle);
    },

    /**
     * 获取模型类型
     *
     * @memberOf ModelStyle#
     * @returns {Number} 返回模型类型
     */
    getModelStyle: function getModelStyle() {
      return Module._ModelStyle_GetModelStyle(this.handle);
    },

    /**
     * 设置模型ID
     * @param {Number} id -模型ID
     *
     * @memberOf ModelStyle#
     */
    setModelStyle: function setModelStyle(id) {
      Module._ModelStyle_SetModelStyle(this.handle, id);
    },

    /**
     * 设置旋转值
     * @param {(PIEVector3/Array)} rotation -旋转值
     *
     * @memberOf ModelStyle#
     */
    setRotation: function setRotation(rotation) {
      var array = null;

      if (rotation instanceof PIEVector3) {
        array = rotation.toArray();
      } else if (rotation instanceof Array) {
        array = rotation;
      }

      if (array) {
        var rotationArray = new PIEArray(array, PIEArrayType.Float64);

        Module._ModelStyle_SetRotation(this.handle, rotationArray.getHandle());

        rotationArray.dispose();
      }
    },

    /**
     * 获取旋转值
     *
     * @memberOf ModelStyle#
     * @returns {PIEVector3} 返回旋转值
     */
    getRotation: function getRotation() {
      var rotationArray = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelStyle_GetRotation(this.handle, rotationArray.getHandle());

      rotationArray.updateData();
      var array = rotationArray.toArray();
      rotationArray.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     * 设置缩放值
     * @param {(PIEVector3/Array)} scale -缩放值
     *
     * @memberOf ModelStyle#
     */
    setScale: function setScale(scale) {
      var array = null;

      if (scale instanceof PIEVector3) {
        array = scale.toArray();
      } else if (scale instanceof Array) {
        array = scale;
      }

      if (array) {
        var scaleArray = new PIEArray(array, PIEArrayType.Float64);

        Module._ModelStyle_SetScale(this.handle, scaleArray.getHandle());

        scaleArray.dispose();
      }
    },

    /**
     * 获取缩放值
     *
     * @memberOf ModelStyle#
     * @returns {PIEVector3} 返回缩放值
     */
    getScale: function getScale() {
      var scaleArray = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelStyle_GetScale(this.handle, scaleArray.getHandle());

      scaleArray.updateData();
      var array = scaleArray.toArray();
      scaleArray.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     * 设置平移值
     * @param {(PIEVector3/Array)} translation -平移值
     *
     * @memberOf ModelStyle#
     */
    setTranslation: function setTranslation(translation) {
      var array = null;

      if (translation instanceof PIEVector3) {
        array = translation.toArray();
      } else if (translation instanceof Array) {
        array = translation;
      }

      if (array) {
        var translationArray = new PIEArray(array, PIEArrayType.Float64);

        Module._ModelStyle_SetTranslation(this.handle, translationArray.getHandle());

        translationArray.dispose();
      }
    },

    /**
     * 获取平移值
     *
     * @memberOf ModelStyle#
     * @returns {PIEVector3} 返回平移值
     */
    getTranslation: function getTranslation() {
      var translationArray = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelStyle_GetTranslation(this.handle, translationArray.getHandle());

      translationArray.updateData();
      var array = translationArray.toArray();
      translationArray.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     * 设置依地模式
     * @param {PIEAltitudeMode} mode -依地模式
     * @memberOf ModelStyle#
     *
     */
    setAltitudeMode: function setAltitudeMode(mode) {
      Module._ModelStyle_SetAltitudeMode(this.handle, mode);
    },

    /**
     * 获取依地模式
     *
     * @memberOf ModelStyle#
     * @returns {PIEAltitudeMode} 返回依地模式
     */
    getAltitudeMode: function getAltitudeMode() {
      return Module._ModelStyle_GetAltitudeMode(this.handle);
    },

    /**
     * 设置是否固定大小
     * @param {Boolean} fixed -是否固定大小
     * @memberOf ModelStyle#
     *
     */
    setSizeFixed: function setSizeFixed(fixed) {
      Module._ModelStyle_SetSizeFixed(this.handle, fixed);
    },

    /**
     * 获取是否固定大小
     *
     * @memberOf ModelStyle#
     * @returns {Boolean} 返回是否固定大小
     */
    isSizeFixed: function isSizeFixed() {
      return Module._ModelStyle_IsSizeFixed(this.handle);
    }
  });

  function PIEStyleFactory() {}

  Object.assign(PIEStyleFactory.prototype, {});

  PIEStyleFactory.CreateInstance = function (hStyle) {
    var styleType = Module._Style_GetType(hStyle);

    if (styleType == PIEStyleType.Vector) {
      return new PIEVectorStyle({
        handle: hStyle
      });
    } else if (styleType == PIEStyleType.Text) {
      return new PIETextStyle(hStyle);
    } else if (styleType == PIEStyleType.Symbol) {
      return new PIESymbolStyle(hStyle);
    } // else if (styleType == PIEStyleType.Model) {
    //     return new PIEModelStyle(hStyle);
    // }


    return null;
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 依地模式
   * @readonly
   * @enum {number}
   */
  var PIEAltitudeMode = {
    /** 依地形*/
    ClampToGround: 0,

    /** 相对地形*/
    RelativeToGround: 1,

    /** 绝对高度*/
    AbsoluteAltitude: 2,

    /** 依模型*/
    ClampToModel: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 几何对象类型枚举
   * @readonly
   * @enum {number}
   */
  var PIEGeometryType = {
    Null: 0,

    /** 点类型 */
    Point: 1,

    /** 线类型 */
    Line: 3,

    /** 面类型 */
    Region: 5,

    /**复杂面类型*/
    MultiRegion: 8,

    /** 文本类型 */
    Text: 7,

    /**复合对象*/
    Compound: 1000,

    /**三维点*/
    Point3D: 2049,

    /**三维线*/
    Line3D: 2051,

    /**三维面*/
    Region3D: 2053,

    /**三维文本*/
    Text3D: 2055,

    /**三维模型*/
    Model3D: 2176,

    /** 军标类型 */
    GeoPlot: 1042
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建点对象
   * @name Point
   * @class Point
   * 二维点操作函数
   * @param {Object} options -
   * @param {(PIEVector2/Array)} options.point -点对象
   * @param {Number} options.ID -对象ID
   * @extends Geometry
   * @example
   * var pointArray = [116.39, 39.4];
   * var pointSR = patialReference.forward(pointArray);
   * var point = new PIE.Point({ID: 10, point:pointSR});
   */

  function PIEPoint(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var point = options.point;

      if (point != null) {
        if (point instanceof PIEVector2) {
          handle = Module._Point_C_Create(point.x, point.y);
        } else if (point instanceof Array) {
          handle = Module._Point_C_Create(point[0], point[1]);
        }

        autoRelease = true;
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEPoint.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 设置点对象的坐标
     * @param {Number} x -X坐标
     *  @param {Number} y -y坐标
     *  @memberOf Point#
     *
     */
    setPoint: function setPoint(x, y) {
      return Module._Point_SetPoint(this.handle, x, y);
    },

    /**
     * 获取点对象的坐标。
     * @returns {PIEVector2} 返回的对象坐标的点
     *  @memberOf Point#
     */
    getPoint: function getPoint() {
      var arrPoint = new PIEArray(2, PIEArrayType.Float64);

      Module._Point_GetPoint(this.handle, arrPoint.getHandle());

      arrPoint.updateData();
      var point = arrPoint.toArray();
      arrPoint.dispose();
      return new PIEVector2(point[0], point[1]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建简单线对象
   * @name Polyline
   * @class Polyline
   * 二维线操作函数
   * @param {Object} options -
   * @param {Array} options.points -点串数组
   * @param {Number} options.ID -线对象ID
   * @param {Array} options.subPoints -存放子对象点串数组的数组(与options.points参数选其一，当选择subPoints时，创建复杂线对象)
   *
   * @extends Geometry
   * @example
   * var point1 = [118, 42];
   * var point2 = [120, 42];
   * var point3 = [119, 41];
   * var point1SR = patialReference.forward(point1);
   * var point2SR = patialReference.forward(point2);
   * var point3SR = patialReference.forward(point3);
   * var points = [];
   * points.push.apply(points,point1SR);
   * points.push.apply(points,point2SR);
   * points.push.apply(points,point3SR);
   * var polyLine = new PIE.Polyline({points:points});
   */

  function PIEPolyline(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var points = options.points;
      var subPoints = options.subPoints;

      if (subPoints && subPoints.length > 0) {
        var subPntCounts = [];

        if (subPoints[0] instanceof Array) {
          var subCount = subPoints.length;
          var pointsX = [];
          var pointsY = [];

          for (var i = 0; i < subCount; i++) {
            var subPointsArr = subPoints[i];
            subPntCounts.push(subPoints[i].length / 2);

            for (var j = 0; j < subPointsArr.length; j++) {
              if ((j + 1) % 2 == 0) {
                pointsY.push(subPointsArr[j]);
              } else {
                pointsX.push(subPointsArr[j]);
              }
            }
          }

          var arrPointsX = new PIEArray(pointsX, PIEArrayType.Float64);
          var arrPointsY = new PIEArray(pointsY, PIEArrayType.Float64);
          var arrSubPointsCounts = new PIEArray(subPntCounts, PIEArrayType.Int32);
          handle = Module._Polyline_CreateWithSub(arrPointsX.getHandle(), arrPointsY.getHandle(), arrSubPointsCounts.getHandle(), subCount);
          autoRelease = true;
          arrPointsX.dispose();
          arrPointsY.dispose();
          arrSubPointsCounts.dispose();
        } else {
          var pointsArray = new PIEArray(subPoints, PIEArrayType.Float64);
          handle = Module._Polyline_Create_WithPoints(pointsArray.getHandle(), subPoints.length);
          pointsArray.dispose();
          autoRelease = true;
        }
      } else {
        if (points) {
          if (points instanceof Array) {
            var _pointsArray = new PIEArray(points, PIEArrayType.Float64);

            handle = Module._Polyline_Create_WithPoints(_pointsArray.getHandle(), points.length);

            _pointsArray.dispose();

            autoRelease = true;
          }
        }
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEPolyline.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 获取线对象的点数量
     *
     * @memberOf Polyline#
     * @returns {Number} 如果获取成功返回线对象个数
     */
    getPointCount: function getPointCount() {
      return Module._Polyline_GetPointCount(this.handle);
    },

    /**
     * 获取线对象中子对象的个数
     * @memberOf Polyline#
     * @returns {Number} 如果获取成功返回子对象个数
     *
     */
    getSubCount: function getSubCount() {
      return Module._Polyline_GetSubCount(this.handle);
    },

    /**
     * 获取指定序号子对象的点的个数
     * @param {Number} index -子对象的索引值
     * @memberOf Polyline#
     *
     * @returns {Number} 如果获取成功返回指定序号子对象的点的个数
     */
    getSubPointCount: function getSubPointCount(index) {
      return Module._Polyline_GetSubPointCount(this.handle, index);
    },

    /**
     * 获取线对象中指定子对象所包含点串数组
     * @param {Number} subIndex -子对象的索引值(默认为0)
     * @memberOf Polyline#
     * @returns {Array} 如果获取成功返回子对象所包含点串数组，否则返回null
     */
    getPoints: function getPoints() {
      var subIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var count = this.getSubPointCount(subIndex);

      if (count > 0) {
        var pointsRes = [];
        var pointsArr = new PIEArray(count * 2, PIEArrayType.Float64);

        Module._Polyline_GetPoints(this.handle, subIndex, pointsArr.getHandle());

        pointsArr.updateData();
        var points = pointsArr.toArray();
        pointsArr.dispose();

        for (var i = 0; i < count * 2; i += 2) {
          pointsRes.push(new PIEVector2(points[i], points[i + 1]));
        }

        return pointsRes;
      }

      return null;
    },

    /**
     * 获取线对象的长度
     *
     * @memberOf Polyline#
     * @returns {Number} 如果获取成功返回几何长度，否则返回0
     */
    getLength: function getLength() {
      return Module._Geometry_GetLength(this.handle);
    },

    /**
     * 获取指定空间参考系下的长度
     * @param {PIESpatialReference} spatialReference -指定空间参考系
     *
     * @memberOf Polyline#
     * @returns {Number} 如果获取成功返回长度，否则返回0
     */
    getLengthInSpatialReference: function getLengthInSpatialReference(spatialReference) {
      return Module._Geometry_GetLengthInSpatialReference(this.handle, spatialReference.getHandle());
    },

    /**
     * 设置线对象指定索引处点的坐标
     * @param {Number} index -指定的索引值
     * @param {PIEVector2} pnt -指定的点坐标
     *
     * @memberOf Polyline#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setPoint: function setPoint(index, pnt) {
      var arrayPnt = new PIEArray(pnt, PIEArrayType.Float64);

      var res = Module._Polyline_SetPoint(this.handle, index, arrayPnt.getHandle());

      arrayPnt.dispose();
      return Boolean(res);
    },

    /**
     * 在子对象指定的位置上设置点的坐标
     * @param {Number} subIndex -子对象索引
     * @param {Number} pointIndex -子对象点的位置索引
     * @param {PIEVector2} pnt -点坐标
     *
     * @memberOf Polyline#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setSubPoint: function setSubPoint(subIndex, pointIndex, pnt) {
      var arrayPnt = new PIEArray(pnt, PIEArrayType.Float64);

      var res = Module._Polyline_SetSubPoint(this.handle, subIndex, pointIndex, arrayPnt.getHandle());

      arrayPnt.dispose();
      return Boolean(res);
    },

    /**
     * 在线对象指定索引出插入的点坐标
     * @param {Number} subIndex -子对象索引号
     * @param {Number} pointIndex -子对象上插入点的索引号
     * @param {PIEVector2} pnt -待插入的点坐标
     *
     * @memberOf Polyline#
     * @returns {Boolean} 如果插入成功返回true，否则返回false
     */
    insertPoint: function insertPoint(subIndex, pointIndex, pnt) {
      var arraypnt = new PIEArray(pnt, PIEArrayType.Float64);

      var res = Module._Polyline_InsertPoint(this.handle, subIndex, pointIndex, arraypnt.getHandle());

      arraypnt.dispose();
      return Boolean(res);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建简单面对象
   * @name Polygon
   * @class Polygon
   * 二维面操作函数
   * @param {Object} options -
   * @param {Array} options.points - 面对象的顶点点串数组
   * @param {Number} options.ID - 面对象的ID
   * @extends Geometry
   * @example
   * var pointArray = [102, 31];
   * var pointSR = patialReference.forward(pointArray);
   *
   * var pointSR1 = patialReference.forward([104, 31]);
   * var pointSR2 = patialReference.forward([103, 30]);
   * var points = [];
   * points.push.apply(points,pointSR);
   * points.push.apply(points,pointSR1);
   * points.push.apply(points,pointSR2);
   * var pointColor = new PIE.Color(255, 0, 0, 255);
   * var polygon = new PIE.Polygon({points:points});
   */

  function PIEPolygon(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var points = options.points;

      if (points) {
        if (points instanceof Array) {
          var pointsArray = new PIEArray(points, PIEArrayType.Float64);
          handle = Module._Polygon_Create(pointsArray.getHandle(), points.length);
          pointsArray.dispose();
          autoRelease = true;
        }
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEPolygon.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 获取面对象的点数量
     *
     * @memberOf Polygon#
     * @returns {Number} 返回所有子对象点个数的总和
     *
     *
     */
    getPointCount: function getPointCount() {
      return Module._Polygon_GetPointCount(this.handle);
    },

    /**
     * 获取子对象的个数
     *
     * @memberOf Polygon#
     * @returns {Number} 返回所有子对象个数
     */
    getSubCount: function getSubCount() {
      return Module._Polygon_GetSubCount(this.handle);
    },

    /**
     * 获取某个子对象的点的个数
     * @param {Number} index -子对象索引
     * @memberOf Polygon#
     * @returns {Number} 返回该子对象的点个数
     */
    getSubPointCount: function getSubPointCount(index) {
      return Module._Polygon_GetSubPointCount(this.handle, index);
    },

    /**
     * 获取面对象中指定子对象所包含点串数组
     * @param {Number} subIndex -子对象的索引值(默认为0)
     * @memberOf Polygon#
     * @returns {Array} 如果获取成功返回子对象所包含点串数组，否则返回null
     */
    getPoints: function getPoints() {
      var subIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var count = this.getSubPointCount(subIndex);

      if (count > 0) {
        var pointsRes = [];
        var pointsArr = new PIEArray(count * 2, PIEArrayType.Float64);

        Module._Polygon_GetPoints(this.handle, subIndex, pointsArr.getHandle());

        pointsArr.updateData();
        var points = pointsArr.toArray();
        pointsArr.dispose();

        for (var i = 0; i < count * 2; i += 2) {
          pointsRes.push(new PIEVector2(points[i], points[i + 1]));
        }

        return pointsRes;
      }

      return null;
    },

    /**
     * 获取面对象的面积
     *
     * @memberOf Polygon#
     * @returns {Number} 如果获取成功返回几何面积，否则返回0
     */
    getArea: function getArea() {
      return Module._Geometry_GetArea(this.handle);
    },

    /**
     * 获取指定空间参考系下的面积
     * @param {PIESpatialReference} spatialReference -指定空间参考系
     *
     * @memberOf Polygon#
     * @returns {Number} 如果获取成功返回面积，否则返回0
     */
    getAreaInSpatialReference: function getAreaInSpatialReference(spatialReference) {
      return Module._Geometry_GetAreaInSpatialReference(this.handle, spatialReference.getHandle());
    },

    /**
     * 判断子多边形的走向是否是顺时针
     * @param {Number} SubIndex -子对象索引号
     * @memberOf Polygon#
     *
     * @returns {Boolean} 如果是顺时针返回true，否则返回false
     */
    isCounterClockwise: function isCounterClockwise(SubIndex) {
      return Boolean(Module._Polygon_IsCounterClockwise(this.handle, SubIndex));
    },

    /**
     * 逆序子对象点串顺序
     * @param {Number} SubIndex -子对象索引号
     * @memberOf Polygon#
     *
     * @returns {Boolean} 如果是成功返回true，否则返回false
     */
    reverseSubPolygon: function reverseSubPolygon(SubIndex) {
      return Boolean(Module._Polygon_ReverseSubPolygon(this.handle, SubIndex));
    },

    /**
     * 判断点是否在面内
     * @param {Boolean} border -点在边线上时，算作面内设置为TRUE,算作面外设置为FALSE
     * @param {PIEVector2/Array} point -判断点
     * @memberOf Polygon#
     *
     * @returns {Boolean} 在面内返回TRUE，否则返回FALSE
     */
    ptInRegion: function ptInRegion(point, border) {
      var pPointsArray = null;

      if (point instanceof Array) {
        pPointsArray = point;
      } else if (point instanceof PIEVector2) {
        pPointsArray = point.toArray();
      }

      var arrayPoint = new PIEArray(pPointsArray, PIEArrayType.Float64);

      var res = Module._Polygon_PtInRegion(this.handle, arrayPoint.getHandle(), border);

      arrayPoint.dispose();
      return Boolean(res);
    },

    /**
     * 在面对象指定索引处插入一个点
     * @param {Number} subIndex -子对象索引号
     * @param {Number} pointIndex -子对象上插入点的索引号
     * @param {PIEVector2} pntPoint -待插入的点坐标
     * @memberOf Polygon#
     *
     * @returns {Boolean} 如果插入成功返回true，否则返回false
     */
    insertPoint: function insertPoint(subIndex, pointIndex, pntPoint) {
      var arrayPoint = new PIEArray(pntPoint, PIEArrayType.Float64);

      var res = Module._Polygon_InsertPoint(this.handle, subIndex, pointIndex, arrayPoint.getHandle());

      arrayPoint.dispose();
      return Boolean(res);
    },

    /**
     * 计算得到在某个投影系统下的对象长度
     * @param {PIESpatialReference} spatialReference -指定参考系
     *
     * @memberOf Polygon#
     * @return {Number} 返回长度
     */
    getLengthEx: function getLengthEx(spatialReference) {
      return Module._Polygon_GetLengthEx(this.handle, spatialReference.getHandle());
    },

    /**
     * 得到对象长度
     *
     * @memberOf Polygon#
     * @return {Number} 返回对象长度
     */
    getLength: function getLength() {
      return Module._Polygon_GetLength(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建复杂面对象
   * @name MultiPolygon
   * @class MultiPolygon
   * 二维复杂面操作函数
   *
   * @extends Geometry
   */

  function PIEMultiPolygon(options) {
    var handle = null;
    var autoRelease = false;

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    } else {
      handle = Module._MultiPolygon_Create();
      autoRelease = true;
    }

    PIEGeometry.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEMultiPolygon.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 向复杂面对象中添加一个面对象
     * @param {PIEPolygon} polygon -要添加的面对象
     * @memberOf MultiPolygon#
     */
    addPolygon: function addPolygon(polygon) {
      Module._MultiPolygon_AddPolygon(this.handle, polygon.getHandle());
    },

    /**
     * 获取复杂面对象的对象个数
     *
     * @memberOf MultiPolygon#
     * @returns {Number} 返回面对象的对象数目
     */
    getPolygonCount: function getPolygonCount() {
      return Module._MultiPolygon_GetPolygonCount(this.handle);
    },

    /**
     * 获取复杂面对象中的一个面对象
     * @param {Number} index -要获取的面对象的索引
     * @memberOf MultiPolygon#
     *
     
     * @returns {PIEPolygon} 返回需要获取的面对象
     */
    getPolygon: function getPolygon(index) {
      var handle = Module._MultiPolygon_GetPolygon(this.handle, index);

      if (handle) {
        return new PIEPolygon(handle);
      }
    },

    /**
     * 从复杂面对象中删除一个面对象
     * @param {Number} index -要删除的面对象的索引
     * @memberOf MultiPolygon#
     */
    removePolygon: function removePolygon(index) {
      Module._MultiPolygon_RemovePolygon(this.handle, index);
    },

    /**
     * 获取复杂面对象中一个面对象的子对象的个数
     * @param {Number} polygonIndex -面对象索引
     * @memberOf MultiPolygon#
     *
     * @returns {Number} 返回获取的面对象中子对象的个数
     */
    getSubCount: function getSubCount(polygonIndex) {
      return Module._MultiPolygon_GetSubCount(this.handle, polygonIndex);
    },

    /**
     * 获取复杂面对象中一个面对象的子对象
     * @param {Number} polygonIndex -要获取的面对象的索引
     * @param {Number} subIndex -要获取的面对象的子对象的索引
     * @memberOf MultiPolygon#
     *
     * @returns {PIEPolygon} 返回需要获取的面对象的子对象
     */
    getSub: function getSub(polygonIndex, subIndex) {
      var handle = Module._MultiPolygon_GetSub(this.handle, polygonIndex, subIndex);

      if (handle) {
        return new PIEPolygon(handle);
      }
    },

    /**
     * 获取某个子对象的点的个数
     * @param {Number} polygonIndex -要获取的面对象的索引
     * @param {Number} subIndex -要获取的面对象的子对象的索引
     * @memberOf MultiPolygon#
     *
     * @returns {Number} 子对象点的个数
     */
    getSubPntCount: function getSubPntCount(polygonIndex, subIndex) {
      return Module._MultiPolygon_GetSubPntCount(this.handle, polygonIndex, subIndex);
    },

    /**
     * 获取某个子对象的点
     * @param {Number} polygonIndex -要获取的面对象的索引
     * @param {Number} subIndex -要获取的面对象的子对象的索引
     * @memberOf MultiPolygon#
     *
     * @returns {Number} 子对象点的个数
     */
    getPoints: function getPoints(polygonIndex, subIndex) {
      var pointsRes = [];
      var SubPnt = this.getSubPntCount(polygonIndex, subIndex);
      var pointsArr = new PIEArray(SubPnt * 2, PIEArrayType.Float64);

      Module._MultiPolygon_GetPoints(this.handle, polygonIndex, subIndex, pointsArr.getHandle());

      pointsArr.updateData();
      var points = pointsArr.toArray();
      pointsArr.dispose();

      for (var i = 0; i < SubPnt * 2; i += 2) {
        pointsRes.push(new PIEVector2(points[i], points[i + 1]));
      }

      pointsArr.dispose();
      return pointsRes;
    },
    // /**
    //  * 获取某个面的点
    //  * @param {Number} polygonIndex -要获取的面对象的索引
    //  * @memberOf MultiPolygon#
    //  *
    //  * @returns {Array} 如果获取成功返回子对象所包含点串数组
    //  */
    // getPoints: function (polygonIndex){
    //     let count = this.getSubCount(polygonIndex);
    //     if(count>0) {
    //         let pointsRes = [];
    //         for (let num = 0; num < count; num++) {
    //             var SubPnt = this.getSubPntCount(polygonIndex,num);
    //             let pointsArr = new PIEArray(SubPnt *2, PIEArrayType.Float64);
    //             Module._MultiPolygon_GetPoints(this.handle, polygonIndex, num, pointsArr.getHandle());
    //             pointsArr.updateData();
    //             let points = pointsArr.toArray();
    //             pointsArr.dispose();
    //             for (let i = 0; i < SubPnt * 2; i += 2) {
    //                 pointsRes.push(new PIEVector2(points[i], points[i + 1]));
    //             }
    //         }
    //         return pointsRes;
    //     }
    //    return null;
    // },

    /**
     * 判断多边形指定子对象是岛还是洞
     * @param {Number} polygonIndex -子对象id
     * @param {Number} subID -对象id
     *
     * @memberOf MultiPolygon#
     * @return {Boolean} 返回是岛还是洞
     */
    checkSubPolygon: function checkSubPolygon(polygonIndex, subID) {
      return Boolean(Module._MultiPolygon_CheckSubPolygon(this.handle, polygonIndex, subID));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建文本对象
   * @name Text
   * @class Text
   * 二维文本对象操作函数
   * @param {Object} options -
   * @param {(PIEVector2/Array)} options.point -文本对象的坐标
   * @param {String} options.text -文本对象的字符串
   * @param {Number} options.ID -文本对象ID
   *
   * @extends Geometry
   * @example
   * var pointText = patialReference.forward([116.397228, 39.909604]);
   * var text = new PIE.Text({point:pointText, text: "中国-北京"});
   */

  function PIEText(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var point = options.point;
      var text = options.text;

      if (point && text) {
        var strText = new PIEString$1(text);

        if (point instanceof Array) {
          handle = Module._Text_Create(point[0], point[1], strText.getHandle());
          autoRelease = true;
        } else if (point instanceof PIEVector2) {
          handle = Module._Text_Create(point.x, point.y, strText.getHandle());
          autoRelease = true;
        }

        strText.dispose();
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEText.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 获取文本对象的坐标
     *
     * @memberOf Text#
     *  @returns {PIEVector2} 返回文本对象的坐标点
     *
     */
    getPoint: function getPoint() {
      var pointArray = new PIEArray(2, PIEArrayType.Float64);

      Module._Text_GetPoint(this.handle, pointArray.getHandle());

      pointArray.updateData();
      var array = pointArray.toArray();
      pointArray.dispose();
      return new PIEVector2(array[0], array[1]);
    },

    /**
     * 设置文本对象的坐标
     * @param {(PIEVector2/Array)} point -文本对象的坐标点
     * @memberOf Text#
     *
     *  @returns {Boolean} 如果设置成功返回true，否则返回false
     *
     */
    setPoint: function setPoint(point) {
      var array = null;

      if (point instanceof PIEVector2) {
        array = [point.x, point.y];
      } else if (point instanceof Array) {
        array = point;
      }

      if (array) {
        var pointArray = new PIEArray(array, PIEArrayType.Float64);

        var res = Module._Text_SetPoint(this.handle, pointArray.getHandle());

        pointArray.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 获取文本对象的字符串值
     *
     * @memberOf Text#
     *  @returns {String} 返回文本对象的字符串值
     *
     */
    getText: function getText() {
      var strText = new PIEString$1(256);

      Module._Text_GetText(this.handle, strText.getHandle());

      var text = strText.toString();
      strText.dispose();
      return text;
    },

    /**
     * 设置文本对象的字符串值
     * @param {String} text -文本对象的字符串值
     * @memberOf Text#
     *
     *  @returns {Boolean} 如果设置成功返回true，否则返回false
     *
     */
    setText: function setText(text) {
      var strText = new PIEString$1(text);

      var res = Module._Text_SetText(this.handle, strText.getHandle());

      strText.dispose();
      return Boolean(res);
    },

    /**
     * 获取文本对象的对象风格
     *
     * @memberOf Text#
     *  @returns {PIETextStyle} 如果获取成功返回文本风格对象，否则返回NULL
     *
     */
    getTextStyle: function getTextStyle() {
      var hStyle = Module._Text_GetTextStyle(this.handle);

      if (hStyle) {
        return new PIETextStyle(hStyle);
      }

      return null;
    },

    /**
     * 设置文本对象的对象风格
     * @param {PIETextStyle} style -文本对象的对象风格对象(传入后内部会进行克隆，外部必须释放传入的风格对象，否则会出现内存泄露))
     * @memberOf Text#
     *
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setTextStyle: function setTextStyle(style) {
      return Boolean(Module._Text_SetTextStyle(this.handle, style.getHandle()));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 创建要素对象
   * @name PlotStyle
   * @class PlotStyle
   * 标绘风格操作函数
   *
   * @example
   * let plotStyle = new PIE.PlotStyle();
   */

  function PIEPlotStyle(handle, autoRelease) {
    if (handle == null) {
      handle = Module._PlotStyle_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEPlotStyle.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._PlotStyle_Delete(this.handle);
      }

      this.handle = null;
    },
    setDisplayType: function setDisplayType(displayType) {
      Module._PlotStyle_SetDisplayType(this.handle, displayType);
    },
    getDisplayType: function getDisplayType() {
      return Module._PlotStyle_GetDisplayType(this.handle);
    },

    /**
     * 设置符号ID
     * @param {Number} id -符号ID
     * @memberOf PlotStyle#
     */
    setSymbolID: function setSymbolID(id) {
      Module._PlotStyle_SetSymbolID(this.handle, id);
    },

    /**
     * 获取符号ID
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回符号ID
     */
    getSymbolID: function getSymbolID() {
      return Module._PlotStyle_GetSymbolID(this.handle);
    },

    /**
     * 设置线风格
     * @param {Number} style -线风格
     * @memberOf PlotStyle#
     */
    setLineStyle: function setLineStyle(style) {
      if (style != null) {
        Module._PlotStyle_SetLineStyle(this.handle, style);
      }
    },

    /**
     * 获取线风格
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回线风格
     */
    getLineStyle: function getLineStyle() {
      return Module._PlotStyle_GetLineStyle(this.handle);
    },

    /**
     * 设置几何对象的宽度
     * @param {Number} width -几何对象的宽度
     * @memberOf PlotStyle#
     *
     * @returns {Boolean} 成功返回true，失败返回false
     */
    setLineWidth: function setLineWidth(width) {
      if (width != null) {
        return Module._PlotStyle_SetLineWidth(this.handle, width);
      }
    },

    /**
     * 获取几何对象的宽度
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回几何对象的宽度
     */
    getLineWidth: function getLineWidth() {
      return Module._PlotStyle_GetLineWidth(this.handle);
    },

    /**
     * 设置军标线符号颜色
     * @param {(Array/PIEColor)} color -颜色值
     * @memberOf PlotStyle#
     *
     * @returns {Boolean} 返回是否设置成功
     */
    setLineColor: function setLineColor(color) {
      var arrayColor = [];

      if (color instanceof Array) {
        arrayColor = color;
      } else if (color instanceof PIEColor) {
        arrayColor = color.toArray();
      }

      if (arrayColor) {
        var colorArray = new PIEArray(arrayColor, PIEArrayType.UInt8);

        var res = Module._PlotStyle_SetLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
        return res;
      }
    },

    /**
     * 获取军标线符号颜色
     *
     * @memberOf PlotStyle#
     * @returns {PIEColor} 返回军标线颜色值
     */
    getLineColor: function getLineColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._PlotStyle_GetLineColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var color = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置军标衬线符号风格
     * @param {Number} style -军标衬线线风格
     * @memberOf PlotStyle#
     */
    setOutLineStyle: function setOutLineStyle(style) {
      Module._PlotStyle_SetOutLineStyle(this.handle, style);
    },

    /**
     * 获取军标衬线符号风格
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回军标衬线线风格
     */
    getOutLineStyle: function getOutLineStyle() {
      return Module._PlotStyle_GetOutLineStyle(this.handle);
    },

    /**
     * 设置军标衬线符号颜色
     * @param {(Array/PIEColor)} color -军标衬线颜色值
     * @memberOf PlotStyle#
     */
    setOutLineColor: function setOutLineColor(color) {
      var arrayColor = [];

      if (color instanceof Array) {
        arrayColor = color;
      } else if (color instanceof PIEColor) {
        arrayColor = color.toArray();
      }

      if (arrayColor) {
        var colorArray = new PIEArray(arrayColor, PIEArrayType.UInt8);

        Module._PlotStyle_SetOutLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取军标衬线符号颜色
     *
     * @memberOf PlotStyle#
     * @returns {PIEColor} 返回军标线颜色值
     */
    getOutLineColor: function getOutLineColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._PlotStyle_GetOutLineColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var color = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置军标衬线符号宽度
     * @param {Number} width -军标衬线符号宽度
     * @memberOf PlotStyle#
     */
    setOutLineWidth: function setOutLineWidth(width) {
      Module._PlotStyle_SetOutLineWidth(this.handle, width);
    },

    /**
     * 获取军标衬线符号宽度
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回军标衬线符号宽度
     */
    getOutLineWidth: function getOutLineWidth() {
      return Module._PlotStyle_GetOutLineWidth(this.handle);
    },

    /**
     * 设置军标衬线符号位置
     * @param {Number} pos -军标衬线符号位置
     * @memberOf PlotStyle#
     */
    setOutLinePos: function setOutLinePos(pos) {
      Module._PlotStyle_SetOutLinePos(this.handle, pos);
    },

    /**
     * 获取军标衬线符号位置
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回军标衬线符号位置
     */
    getOutLinePos: function getOutLinePos() {
      return Module._PlotStyle_GetOutLinePos(this.handle);
    },

    /**
     * 设置几何对象的填充模式
     * @param {Number} mode -填充模式
     * @memberOf PlotStyle#
     *
     * @returns {Boolean} 返回是否设置成功
     */
    setFillMode: function setFillMode(mode) {
      return Module._PlotStyle_SetFillMode(this.handle, mode);
    },

    /**
     * 获取几何对象的填充模式
     * @memberOf PlotStyle#
     *
     * @returns {Number} 返回填充模式
     */
    getFillMode: function getFillMode() {
      return Module._PlotStyle_GetFillMode(this.handle);
    },

    /**
     * 设置几何对象填充的透明度
     * @param {Number} opacity -填充的透明度
     * @memberOf PlotStyle#
     */
    setFillOpacity: function setFillOpacity(opacity) {
      Module._PlotStyle_SetFillOpacity(this.handle, opacity);
    },

    /**
     * 获取几何对象填充的透明度
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回填充的透明度
     */
    getFillOpacity: function getFillOpacity() {
      return Module._PlotStyle_GetFillOpacity(this.handle);
    },

    /**
     * 设置几何对象字体大小
     * @param {Number} size -几何对象字体大小
     * @memberOf PlotStyle#
     */
    setFontSize: function setFontSize(size) {
      Module._PlotStyle_SetFontSize(this.handle, size);
    },

    /**
     * 获取几何对象字体大小
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回对象字体大小
     */
    getFontSize: function getFontSize() {
      return Module._PlotStyle_GetFontSize(this.handle);
    },

    /**
     * 设置字体风格-倾斜
     * @param {Number} italix -对象字体风格(0-不倾斜，1-倾斜)
     * @memberOf PlotStyle#
     */
    setFontItalic: function setFontItalic(italix) {
      Module._PlotStyle_SetFontItalic(this.handle, italix);
    },

    /**
     * 获取字体风格-倾斜
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回对象字体风格(0-不倾斜，1-倾斜)
     */
    getFontItalic: function getFontItalic() {
      return Module._PlotStyle_GetFontItalic(this.handle);
    },

    /**
     * 设置字体风格-加粗
     * @param {Number} nValue -对象字体风格(0-不加粗,1-加粗)
     * @memberOf PlotStyle#
     */
    setFontBold: function setFontBold(nValue) {
      Module._PlotStyle_SetFontBold(this.handle, nValue);
    },

    /**
     * 获取字体风格-加粗
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回对象字体风格(0-不倾斜，1-倾斜)
     */
    getFontBold: function getFontBold() {
      return Module._PlotStyle_GetFontBold(this.handle);
    },

    /**
     * 设置字体风格-下划线
     * @param {Number} nValue - 对象字体下划线(0-不加下划线,1-加下划线)
     * @memberOf PlotStyle#
     */
    setFontUnderline: function setFontUnderline(nValue) {
      Module._PlotStyle_SetFontUnderline(this.handle, nValue);
    },

    /**
     * 获取字体风格-下划线
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回对象字体风格-下划线(0-不加下划线,1-加下划线)
     */
    getFontUnderline: function getFontUnderline() {
      return Module._PlotStyle_GetFontUnderline(this.handle);
    },

    /**
     * 设置几何对象字体风格-删除线
     * @param {Number} nValue - 对象字体风格-删除线(0-不加删除线,1-加删除线)
     * @memberOf PlotStyle#
     */
    setFontStrikeOut: function setFontStrikeOut(nValue) {
      Module._PlotStyle_SetFontStrikeOut(this.handle, nValue);
    },

    /**
     * 获取几何对象字体风格-删除线
     *
     * @memberOf PlotStyle#
     * @returns {Number} 返回 对象字体风格-删除线：(0-不加删除线,1-加删除线)
     */
    getFontStrikeOut: function getFontStrikeOut() {
      return Module._PlotStyle_GetFontStrikeOut(this.handle);
    },

    /**
     * 设置几何对象的填充颜色
     * @param {(Array/PIEColor)} color -颜色值
     * @memberOf PlotStyle#
     *
     * @returns {Boolean} 返回是否设置成功
     */
    setFillForeColor: function setFillForeColor(color) {
      var arrayColor = null;

      if (color instanceof Array) {
        arrayColor = color;
      } else if (color instanceof PIEColor) {
        arrayColor = color.toArray();
      }

      if (arrayColor) {
        var colorArray = new PIEArray(arrayColor, PIEArrayType.UInt8);

        var res = Module._PlotStyle_SetFillForeColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
        return res;
      }
    },

    /**
     * 获取几何对象的背景填充颜色
     *
     * @memberOf PlotStyle#
     * @return {PIEVector4} 返回是否设置成功
     */
    getFillForeColor: function getFillForeColor() {
      var vecColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._PlotStyle_GetFillForeColor(this.handle, vecColor.getHandle());

      vecColor.updateData();
      var color = vecColor.toArray();
      return new PIE.Vector4(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置几何对象的背景填充颜色
     * @param {PIEVector4} color -背景颜色
     *
     * @memberOf PlotStyle#
     * @return {Boolean} 返回是否设置成功
     */
    setFillBackColor: function setFillBackColor(color) {
      var arrayColor = null;

      if (color instanceof Array) {
        arrayColor = color;
      } else if (color instanceof PIEColor) {
        arrayColor = color.toArray();
      }

      if (arrayColor) {
        var colorArray = new PIEArray(arrayColor, PIEArrayType.UInt8);

        var res = Module._PlotStyle_SetFillBackColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
        return res;
      }
    },

    /**
     * 获取几何对象的背景填充颜色
     *
     * @memberOf PlotStyle#
     * @return {PIEVector4} 返回是否设置成功
     */
    getFillBackColor: function getFillBackColor() {
      var vecColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._PlotStyle_GetFillBackColor(this.handle, vecColor.getHandle());

      vecColor.updateData();
      var color = vecColor.toArray();
      return new PIE.Vector4(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置文字颜色
     * @param {PIEVector4} color -背景颜色
     *
     * @memberOf PlotStyle#
     * @return {Boolean} 返回是否设置成功
     */
    setFontTextColor: function setFontTextColor(color) {
      var arrayColor = null;

      if (color instanceof Array) {
        arrayColor = color;
      } else if (color instanceof PIEColor) {
        arrayColor = color.toArray();
      }

      if (arrayColor) {
        var colorArray = new PIEArray(arrayColor, PIEArrayType.UInt8);

        var res = Module._PlotStyle_SetFontTextColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
        return res;
      }
    },

    /**
     * 获取文字颜色
     *
     * @memberOf PlotStyle#
     * @return {PIEVector4} 返回是否设置成功
     */
    getFontTextColor: function getFontTextColor() {
      var vecColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._PlotStyle_GetFontTextColor(this.handle, vecColor.getHandle());

      vecColor.updateData();
      var color = vecColor.toArray();
      return new PIE.Vector4(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置符号大小
     * @param {Number} nSize 符号尺寸大小
     * @memberOf PlotStyle#
     */
    setSymbolSize: function setSymbolSize(nSize) {
      Module._PlotStyle_SetSymbolSize(this.handle, nSize);
    },

    /**
     * 获取符号大小
     * @memberOf PlotStyle#
     */
    getSymbolSize: function getSymbolSize() {
      return Module._PlotStyle_GetSymbolSize(this.handle);
    },

    /**
     * 设置几何对象字体编号
     * @param {Number} code 字体编号
     * @memberOf PlotStyle#
     */
    setFontCode: function setFontCode(code) {
      Module._PlotStyle_SetFontCode(this.handle, code);
    },

    /**
     * 获取几何对象字体编号
     * @memberOf PlotStyle#
     */
    getFontCode: function getFontCode() {
      return Module._PlotStyle_GetFontCode(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 创建标绘几何对象
   * @name GeoPlot
   * @class GeoPlot
   *标绘几何对象操作函数
   *
   * @param {Object} options
   * @param {Number} options.code -军标对象
   * @param {Array}  options.points -点坐标
   * @param {Number} options.unitLength -像素对应的地理长度
   *
   * @extends Geometry
   * @example
   * var plotPtsWgs84 = [118, 39.5];
   * var posGlobeSR = patialReference.forward(plotPtsWgs84);
   * var geoPlot = new PIE.GeoPlot({code:10107, points:posGlobeSR, unitLength:1});
   */

  function PIEGeoPlot(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      if (options.handle == null) {
        handle = Module._GeoPlot_Create();
        autoRelease = true;
      } else {
        handle = options.handle;
      }

      if (handle) {
        var code = options.code;
        var points = options.points;
        var unitLength = options.unitLength;

        if (unitLength == null) {
          unitLength = 1;
        }

        if (code && points && unitLength != null) {
          if (points instanceof Array) {
            var pointsArray = new PIEArray(points, PIEArrayType.Float64);
            points.length / 2;

            Module._GeoPlot_Make(handle, code, pointsArray.getHandle(), points.length / 2, unitLength);

            pointsArray.dispose();
          }
        }
      }
    }

    PIEGeometry.call(this, handle, autoRelease);
  }

  PIEGeoPlot.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 获取军标对象的风格
     *
     * @memberOf GeoPlot#
     * @returns {PIEPlotStyle}  返回军标对象的风格，异常返回NULL
     */
    getStyle: function getStyle() {
      var hStyle = Module._GeoPlot_GetStyle(this.handle);

      return new PIEPlotStyle(hStyle);
    },

    /**
     * 设置军标对象风格
     * @param {PIEPlotStyle} style -军标对象风格
     * @memberOf GeoPlot#
     */
    setStyle: function setStyle(style) {
      Module._GeoPlot_SetStyle(this.handle, style.getHandle());
    },

    /**
     * 获取军标类型
     * @memberOf GeoPlot#
     * @returns {PIESymbolPlotType} 返回军标类型
     */
    getSymbolType: function getSymbolType(style) {
      return Module._GeoPlot_GetSymbolType(this.handle);
    },
    // /**
    //  * 设置军标对象对象的Make。
    //  * @param {Number} code -军标对象
    //  * @param {(Array/PIEVector2)} pPoints -点坐标
    //  * @param {Number} nPntCount -个数
    //  * @param {Number} dUnitlength -像素对应的地理长度
    //  * @memberOf GeoPlot#
    //  */
    make: function make(code, pPoints, nPntCount, dUnitlength) {
      var pointArray = [];

      if (pPoints instanceof Array) {
        pointArray = pPoints;
      } else if (pPoints instanceof PIEVector2) {
        pointArray = [pPoints.x, pPoints.y];
      }

      if (pointArray) {
        var arrayPoint = new PIEArray(pPoints, PIEArrayType.Float64);

        Module._GeoPlot_Make(this.handle, code, arrayPoint.getHandle(), nPntCount, dUnitlength);

        arrayPoint.dispose();
      }
    },

    /**
     * 在指定的位置上设置点的坐标
     * @param {(Array/PIEVector2)} point -点坐标
     * @memberOf GeoPlot#
     *
     * @returns {Boolean} 设置成功返回true,设置失败返回false
     */
    setPoint: function setPoint(point) {
      var pointArray = [];

      if (point instanceof Array) {
        pointArray = point;
      } else if (point instanceof PIEVector2) {
        pointArray = [point.x, point.y];
      }

      if (pointArray) {
        var arrayPoint = new PIEArray(point, PIEArrayType.Float64);

        var res = Module._GeoPlot_SetPoint(this.handle, arrayPoint.getHandle());

        arrayPoint.dispose();
        return res;
      }

      return false;
    },

    /**
     * 设置几何点
     * @param {Array} points -点集
     * @memberOf GeoPlot#
     *
     * @returns {Boolean} 成功设置返回true,设置失败返回false
     */
    setPoints: function setPoints(points) {
      if (points instanceof Array && points.length > 2) {
        var arrayPoints = new PIEArray(points, PIEArrayType.Float64);

        var res = Module._GeoPlot_SetPoints(this.handle, arrayPoints.getHandle(), points.length);

        arrayPoints.dispose();
        return res;
      }

      return false;
    },

    /**
     * 获取所有子对象的点的个数总和
     *
     * @memberOf GeoPlot#
     * @returns {Number} 返回点个数
     */
    getPointCount: function getPointCount() {
      return Module._GeoPlot_GetPointCount(this.handle);
    },

    /**
     * 获取几何点集
     *
     * @memberOf GeoPlot#
     * @returns {PIEVector2} 返回几何点集
     */
    getPoints: function getPoints() {
      var count = this.getPointCount();

      if (count) {
        var arrayPoint = new PIEArray(count * 2, PIEArrayType.Float64);

        Module._GeoPlot_GetPoints(this.handle, arrayPoint.getHandle());

        arrayPoint.updateData();
        var points = arrayPoint.toArray();
        arrayPoint.dispose();
        return points;
      }

      return null;
    },

    /**
     *从指定的子对象的指定位置开始去掉节点
     *
     * @memberOf GeoPlot#
     * @returns {Boolean} 成功删除返回true,删除失败返回false
     */
    removePoints: function removePoints() {
      return Module._GeoPlot_RemovePoints(this.handle);
    },

    /**
     *清除Geometry内部数据
     * @memberOf GeoPlot#
     */
    clear: function clear() {
      Module._GeoPlot_Clear(this.handle);
    },

    /**
     *设置符号显示模式
     * @param {PIESymbolSizeMode} mode -符号显示模式
     * @memberOf GeoPlot#
     */
    setSymbolSizeMode: function setSymbolSizeMode(mode) {
      Module._GeoPlot_SetSymbolSizeMode(this.handle, mode);
    },

    /**
     *获取符号显示模式
     *
     * @memberOf GeoPlot#
     * @returns {PIESymbolSizeMode} mode -符号显示模式
     */
    getSymbolSizeMode: function getSymbolSizeMode() {
      return Module._GeoPlot_GetSymbolSizeMode(this.handle);
    },

    /**
     *设置符号ID
     * @param {Number} code -符号id
     * @memberOf GeoPlot#
     */
    setSymbolCode: function setSymbolCode(code) {
      Module._GeoPlot_SetSymbolCode(this.handle, code);
    },

    /**
     *获取符号ID
     *
     * @memberOf GeoPlot#
     *@returns {Number} 符号ID
     */
    getSymbolCode: function getSymbolCode() {
      return Module._GeoPlot_GetSymbolCode(this.handle);
    },

    /**
     * 获取几何对象维度
     *
     * @memberOf GeoPlot#
     * @returns {Number} 返回维度
     */
    getDimension: function getDimension() {
      return Module._GeoPlot_GetDimension(this.handle);
    },

    /**
     *点击测试, 用于对象点选
     * @param {(Array/PIEVector2)} testPoint -测试点选坐标
     * @param {Number} dTolerance -选择精度
     * @memberOf GeoPlot#
     *
     * @returns {Boolean} 点选测试是否成功
     */
    hitTest: function hitTest(testPoint, dTolerance) {
      var pointArray = [];

      if (testPoint instanceof Array) {
        pointArray = testPoint;
      } else if (testPoint instanceof PIEVector2) {
        pointArray = [testPoint.x, testPoint.y];
      }

      if (pointArray) {
        var arrayPoint = new PIEArray(pointArray, PIEArrayType.Float64);
        return Module._GeoPlot_HitTest(this.handle, arrayPoint.getHandle(), dTolerance);
      }

      return false;
    },

    /**
     * 判断几何对象是否有效
     * @memberOf GeoPlot#
     *
     * @returns {Boolean}几何对象是否有效
     */
    isValid: function isValid() {
      return Module._GeoPlot_IsValid(this.handle);
    },

    /**
     * 平移
     * @param {Number} dx -x方向
     * @param {Number} dy -y方向
     * @memberOf GeoPlot#
     */
    offset: function offset(dx, dy) {
      Module._GeoPlot_Offset(this.handle, dx, dy);
    },

    /**
     *旋转
     * @param {(Array/PIEVector2)} point -坐标
     * @param {Number} angle -角度
     * @memberOf GeoPlot#
     */
    rotate: function rotate(point, angle) {
      var pointArray = [];

      if (point instanceof Array) {
        pointArray = points;
      } else if (point instanceof PIEVector2) {
        pointArray = [point.x, point.y];
      }

      if (pointArray) {
        var arrayPoint = new PIEArray(pointArray, PIEArrayType.Float64);

        Module._GeoPlot_Rotate(this.handle, arrayPoint.getHandle(), angle);

        arrayPoint.dispose();
      }
    },

    /**
     * 调整几何数据,限定在新的Bounds中
     * @param {(Array/PIEBounds)} bounds -新的范围bounds
     * @memberOf GeoPlot#
     */
    resize: function resize(bounds) {
      var boundsArray = null;

      if (bounds instanceof Array) {
        boundsArray = new PIEArray(bounds, PIEArrayType.Float64);
      } else if (bounds instanceof PIEBounds) {
        boundsArray = PIEBounds.toArray(bounds);
      }

      if (boundsArray) {
        var res = Module._GeoPlot_Resize(this.handle, boundsArray.getHandle());

        boundsArray.dispose();
        return res;
      }

      return false;
    },
    // /**
    //  *获取几何对象的ID
    //  * @memberOf GeoPlot#
    //  *
    //  * @returns {Number} 几何对象ID
    //  */
    getID: function getID() {
      return Module._GeoPlot_GetID(this.handle);
    },

    /**
     *设置旗面文字
     * @param {(Array/PIEBounds)} text -旗面文字
     * @memberOf GeoPlot#
     */
    setSymbolText: function setSymbolText(text) {
      var strName = new PIEString$1(text);

      Module._GeoPlot_SetSymbolText(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取符号的名称
     *
     * @memberOf GeoPlot#
     * @returns {String} 返回符号名称
     */
    getSymbolText: function getSymbolText() {
      var strName = new PIEString$1(256);

      Module._GeoPlot_GetSymbolText(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     *设置点符号注记
     * @param {String} Text -注记文字
     * @memberOf GeoPlot#
     */
    setDotSymbolLabelContent: function setDotSymbolLabelContent(Text) {
      var strName = new PIEString$1(Text);

      Module._GeoPlot_SetDotSymbolLabelContent(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     *获取点符号注记
     * @memberOf GeoPlot#
     * @returns {String} 返回符号注记
     */
    getDotSymbolLabelContent: function getDotSymbolLabelContent(Text) {
      var strName = new PIEString$1(256);

      Module._GeoPlot_GetDotSymbolLabelContent(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     *获取点符号注记
     * @param {PIELabelPosType} nPos -符号位置
     * @memberOf GeoPlot#
     */
    setDotSymbolLabelPos: function setDotSymbolLabelPos(nPos) {
      Module._GeoPlot_SetDotSymbolLabelPos(this.handle, nPos);
    },

    /**
     *获取点符号注记
     * @memberOf GeoPlot#
     *@returns {PIELabelPosType} 返回符号位置
     */
    getDotSymbolLabelPos: function getDotSymbolLabelPos() {
      return Module._GeoPlot_GetDotSymbolLabelPos(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建Mesh对象
   * @name Mesh
   * @class Mesh
   *
   * @example
   * let mesh = new PIE.Mesh()
   */

  function PIEMesh(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Mesh_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEMesh.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 销毁Mesh对象
     * @memberOf Mesh#
     *
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._Mesh_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置名称
     * @param {String} name -Mesh名称
     * @memberOf Mesh#
     *
     * @example
     * let mesh = new PIE.Mesh();
     * mesh.setName(name);
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._Mesh_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取名称
     *
     * @memberOf Mesh#
     * @returns {String} 返回Mesh名称
     *
     * @example
     * let mesh = new PIE.Mesh();
     * var name = mesh.getName();
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Mesh_GetName(this.handle);

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置图元渲染类型
     * @param {PIEOperationType} type -图元渲染类型
     * @memberOf Mesh#
     */
    setOperationType: function setOperationType(type) {
      Module._Mesh_SetOperationType(this.handle, type);
    },

    /**
     * 获取图元渲染类型
     *
     * @memberOf Mesh#
     * @returns {PIEOperationType} 返回图元渲染类型
     *
     */
    getOperationType: function getOperationType() {
      return Module._Mesh_GetOperationType(this.handle);
    },

    /**
     * 获取顶点数据对象类型
     *
     * @memberOf Mesh#
     * @returns {Number} 返回顶点数据对象类型
     *
     */
    getVertexType: function getVertexType() {
      return Module._Mesh_GetVertexType(this.handle);
    },

    /**
     * 获取顶点大小
     *
     * @memberOf Mesh#
     * @returns {Number} 返回顶点大小
     *
     */
    getVertexSize: function getVertexSize() {
      return Module._Mesh_GetVertexSize(this.handle);
    },

    /**
     * 获取索引大小
     *
     * @memberOf Mesh#
     * @returns {Number} 返回索引大小
     *
     */
    getIndexSize: function getIndexSize() {
      return Module._Mesh_GetIndexSize(this.handle);
    },

    /**
     * 添加顶点数据对象
     * @param {PIE.VertexData} vertexData -顶点数据对象
     * @memberOf Mesh#
     *
     */
    addVertexData: function addVertexData(vertexData) {
      Module._Mesh_AddVertexData(this.handle, vertexData.getHandle());
    },

    /**
     * 获取顶点数据对象
     * @param {Number} index -索引
     * @memberOf Mesh#
     *
     * @returns {PIEVertexData} 返回索引数据大小
     *
     */
    getVertexData: function getVertexData(index) {
      var hVertexData = Module._Mesh_GetVertexData(this.handle, index); //todo 等待vertexData封装


      return new PIEVertexData(hVertexData);
    },

    /**
     * 获取顶点数据对象大小
     *
     * @memberOf Mesh#
     * @returns {Number} 返回索引数据大小
     *
     */
    getVertexDataSize: function getVertexDataSize() {
      return Module._Mesh_GetVertexDataSize(this.handle);
    },

    /**
     * 移除所有顶点数据对象
     * @memberOf Mesh#
     */
    removeAllVertexData: function removeAllVertexData() {
      Module._Mesh_RemoveAllVertexData(this.handle);
    },

    /**
     * 设置short数据对象
     * @param {PIEShortIndexData} shortIndexData -索引数据对象
     * @memberOf Mesh#
     *
     */
    setShortIndexData: function setShortIndexData(shortIndexData) {
      Module._Mesh_SetShortIndexData(this.handle, shortIndexData.getHandle());
    },

    /**
     * 获取short索引数据对象
     * @memberOf Mesh#
     * @returns {PIEShortIndexData} 返回short索引数据对象
     *
     */
    getShortIndexData: function getShortIndexData() {
      var hIndexData = Module._Mesh_GetShortIndexData(this.handle); //todo   等待ShortIndexData封装


      return new PIEShortIndexData(hIndexData);
    },

    /**
     * 设置int索引数据对象
     * @param {PIEIntIndexData} intIndexData -int索引数据对象
     * @memberOf Mesh#
     *
     */
    setIntIndexData: function setIntIndexData(intIndexData) {
      Module._Mesh_SetIntIndexData(this.handle, intIndexData.getHandle());
    },

    /**
     * 获取int索引数据对象
     * @memberOf Mesh#
     * @returns {PIEIntIndexData} 返回int索引数据对象
     *
     */
    getIntIndexData: function getIntIndexData() {
      var hIndexData = Module._Mesh_GetIntIndexData(this.handle); //todo   等待IntIndexData封装


      return new PIEIntIndexData(hIndexData);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建模型格网对象
   * @name ModelMesh
   * @class ModelMesh
   * 模型格网操作函数
   * @param {Object} options -
   * @param {String} options.path -模型数据路径
   */

  function PIEModelMesh(options) {
    var handle = null;
    var autoRelease = false;

    if (options == null) ; else {
      var path = options.path;

      if (path) {
        var strPath = new PIEString$1(path);
        handle = Module._ModelMesh_CreateByPath(strPath.getHandle());
        strPath.dispose();
        autoRelease = true;
      }

      if (options.handle) {
        handle = options.handle;
      }
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEModelMesh.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 通过模型数据路径加载模型格网对象
     * @param {Object} options -
     * @param {Array} options.files -从服务上获取的数据存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {Array} options.urls -模型数据路径数组（包含贴图等数据,需要保证数组第一个值是模型路径）
     * @memberOf ModelMesh#
     * @returns {Promise} 返回一个promise，在value中存放创建好的ModelMesh对象
     * @example
     *    let modelRenderableLayer = new PIE.GlobeRenderableLayer();
     globe.addLayer(modelRenderableLayer, true);
     let urlsFBX = [];
     urlsFBX.push(strRootUrl + "data/Model3D/data.FBX");
     urlsFBX.push(strRootUrl + "data/Model3D/data1.jpg");
     urlsFBX.push(strRootUrl + "data/Model3D/data1_2.jpg");
     urlsFBX.push(strRootUrl + "data/Model3D/car.FBX");
     urlsFBX.push(strRootUrl + "data/Model3D/data_41.jpg");
     let sceneCenter = new PIE.Vector2(115.7, 39.4);
     let posGlobeSR = hGlobeSR.forward(sceneCenter);\
     let modelMesh = new PIE.ModelMesh();
     modelMesh.load({urls:urlsFBX}).then((value) =>{
          let geomModel = new PIE.Model3D({modelMesh: value});
          let position3d = new PIE.Vector3(posGlobeSR.x, posGlobeSR.y, 20000);
          let scale3d = new PIE.Vector3(0.1,0.1,0.1);
          let rotation3d = new PIE.Vector3(-Math.PI / 2, 0,-Math.PI/2);
          let renderModel3D = new PIE.RenderModel({
              model: geomModel,
              position: position3d,
              scale: scale3d,
              rotation: rotation3d
          });
          modelRenderableLayer.add(renderModel3D);
         })
     *
     */
    load: function load(options) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var that = _this;
        var files = options.files;
        var urls = options.urls;

        if (urls == null || !(urls instanceof Array)) {
          resolve(null);
        }

        var filesPicks = [];
        var urlsPicks = [];
        var path = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid();
        urls.forEach(function (url, index) {
          urlsPicks.push(url);

          if (files != null && files instanceof Array && files.length == urls.length && urls.length >= 1) {
            files.forEach(function (file, index) {
              filesPicks.push(file);
            });
          } else {
            var name = PIEFile.getFileName(url);
            var file = path + "/" + name;
            filesPicks.push(file);
          }
        });

        function callBack(filelist, urllist, datalist) {
          var path = filelist[0];
          var strPath = new PIEString$1(path);

          var handle = Module._ModelMesh_CreateByPath(strPath.getHandle());

          that.handle = handle;
          that.autoRelease = true;
          resolve(that);
        }

        if (urlsPicks.length > 0) {
          PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
        }
      });
    },

    /**
     * 销毁ModelMesh
     *
     * @memberOf ModelMesh#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._ModelMesh_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置广告牌模式
     * @param {PIEBillBoardModeType} mode -广告牌模式
     *
     * @memberOf ModelMesh#
     */
    setBillBoardMode: function setBillBoardMode(mode) {
      Module._ModelMesh_SetBillBoardMode(this.handle, mode);
    },

    /**
     * 获取广告牌模式
     *
     * @memberOf ModelMesh#
     * @returns {PIEBillBoardModeType} 返回广告牌模式
     */
    getBillBoardMode: function getBillBoardMode() {
      return Module._ModelMesh_GetBillBoardMode(this.handle);
    },

    /**
     * 设置模型坐标
     * @param {(Array/PIEVector3)} position -坐标位置
     * @memberOf ModelMesh#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._ModelMesh_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取模型坐标
     *
     * @memberOf ModelMesh#
     * @returns {PIEVector3} 返回模型坐标
     */
    getPosition: function getPosition() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelMesh_GetPosition(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var position = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 设置平移系数
     * @param {(Array/PIEVector3)} translation -平移系数
     * @memberOf ModelMesh#
     */
    setTranslation: function setTranslation(translation) {
      var transArray = null;

      if (translation instanceof Array) {
        transArray = translation;
      } else if (translation instanceof PIEVector3) {
        transArray = translation.toArray();
      }

      if (transArray) {
        var arrayTrans = new PIEArray(transArray, PIEArrayType.Float64);

        Module._ModelMesh_SetTranslation(this.handle, arrayTrans.getHandle());

        arrayTrans.dispose();
      }
    },

    /**
     * 获取平移系数
     *
     * @memberOf ModelMesh#
     * @returns {PIEVector3} 返回平移系数
     */
    getTranslation: function getTranslation() {
      var arrayTrans = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelMesh_GetTranslation(this.handle, arrayTrans.getHandle());

      arrayTrans.updateData();
      var translation = arrayTrans.toArray();
      arrayTrans.dispose();
      return new PIEVector3(translation[0], translation[1], translation[2]);
    },

    /**
     * 设置缩放系数
     * @param {(Array/PIEVector3)} scale -缩放系数
     * @memberOf ModelMesh#
     */
    setScaling: function setScaling(scale) {
      var scaleArray = null;

      if (scale instanceof Array) {
        scaleArray = scale;
      } else if (scale instanceof PIEVector3) {
        scaleArray = scale.toArray();
      }

      if (scaleArray) {
        var arrayScale = new PIEArray(scaleArray, PIEArrayType.Float64);

        Module._ModelMesh_SetScaling(this.handle, arrayScale.getHandle());

        arrayScale.dispose();
      }
    },

    /**
     * 获取缩放系数
     *
     * @memberOf ModelMesh#
     * @returns {PIEVector3} 返回缩放系数
     */
    getScaling: function getScaling() {
      var arrayScale = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelMesh_GetScaling(this.handle, arrayScale.getHandle());

      arrayScale.updateData();
      var scale = arrayScale.toArray();
      arrayScale.dispose();
      return new PIEVector3(scale[0], scale[1], scale[2]);
    },

    /**
     * 设置旋转系数
     * @param {(Array/PIEVector3)} rotation -顺时针旋转角度
     * @memberOf ModelMesh#
     */
    setRotation: function setRotation(rotation) {
      var rotationArray = null;

      if (rotation instanceof Array) {
        rotationArray = rotation;
      } else if (rotation instanceof PIEVector3) {
        rotationArray = rotation.toArray();
      }

      if (rotationArray) {
        var arrayRotation = new PIEArray(rotationArray, PIEArrayType.Float64);

        Module._ModelMesh_SetRotation(this.handle, arrayRotation.getHandle());

        arrayRotation.dispose();
      }
    },

    /**
     * 获取旋转系数
     *
     * @memberOf ModelMesh#
     * @returns {PIEVector3} 返回旋转系数
     */
    getRotation: function getRotation() {
      var arrayRotation = new PIEArray(3, PIEArrayType.Float64);

      Module._ModelMesh_GetRotation(this.handle, arrayRotation.getHandle());

      arrayRotation.updateData();
      var rotation = arrayRotation.toArray();
      arrayRotation.dispose();
      return new PIEVector3(rotation[0], rotation[1], rotation[2]);
    },

    /**
     * 设置包围盒
     * @param {(Array/PIEBoundingBox)} boundingBox -包围盒
     * @memberOf ModelMesh#
     */
    setBoundingBox: function setBoundingBox(boundingBox) {
      var boxArray = null;

      if (boundingBox instanceof Array) {
        boxArray = boundingBox;
      } else if (boundingBox instanceof PIEBoundingBox) {
        boxArray = boundingBox.toArray();
      }

      if (boxArray) {
        var arrayBox = new PIEArray(boxArray, PIEArrayType.Float64);

        Module._ModelMesh_SetBoundingBox(this.handle, arrayBox.getHandle());

        arrayBox.dispose();
      }
    },

    /**
     * 获取包围盒
     *
     * @memberOf ModelMesh#
     * @returns {PIEBoundingBox} 返回包围盒
     */
    getBoundingBox: function getBoundingBox() {
      var arrayBox = new PIEArray(6, PIEArrayType.Float64);

      Module._ModelMesh_GetBoundingBox(this.handle, arrayBox.getHandle());

      arrayBox.updateData();
      var boundingBox = arrayBox.toArray();
      arrayBox.dispose();
      return new PIEBoundingBox(boundingBox[0], boundingBox[1], boundingBox[2], boundingBox[3], boundingBox[4], boundingBox[5]);
    } // /**
    //  * 添加材质
    //  * @param {PIEMaterial} material -材质对象
    //  * @memberOf ModelMesh#
    //  */
    // addMaterial: function (material) {
    //     Module._ModelMesh_AddMaterial(this.handle, material.getHandle());
    // },
    //
    // /**
    //  * 获取材质个数
    //  *
    //  * @memberOf ModelMesh#
    //  * @returns {Number} 返回材质数量
    //  */
    // getMaterialCount: function () {
    //     return Module._ModelMesh_GetMaterialCount(this.handle);
    // },
    // /**
    //  * 获取材质
    //  * @param {Number} index -材质序列号
    //  * @memberOf ModelMesh#
    //  * @example
    //  * let modelMesh = new PIE.ModelMesh();
    //  */
    // getMaterial: function (index) {
    //     var hMaterial = Module._ModelMesh_GetMaterial(this.handle, index);
    //     //todo 等待Material封装
    //     //return new PIEMaterial(hMaterial);
    // },
    // /**
    //  * 添加格网
    //  * @param {PIEMesh} mesh -格网对象
    //  * @memberOf ModelMesh#
    //  */
    // addMesh: function (mesh) {
    //     Module._ModelMesh_AddMesh(this.handle, mesh.getHandle());
    // },
    // /**
    //  * 获取格网个数
    //  *
    //  * @memberOf ModelMesh#
    //  * @returns {Number} 返回格网数量
    //  */
    // getMeshCount:function () {
    //     return Module._ModelMesh_GetMeshCount(this.handle);
    // },
    // /**
    //  * 获取格网数据
    //  * @param {Number} index -格网数据序列号
    //  * @memberOf ModelMesh#
    //  *
    //  * @returns {PIEMesh} 返回格网数据对象
    //  * @example
    //  * let modelMesh = new PIE.ModelMesh();
    //  */
    // getMesh:function (index) {
    //     var hMesh = Module._ModelMesh_GetMesh(this.handle, index);
    //     return new PIEMesh(hMesh);
    // },
    // /**
    //  * 模型mesh操作函数
    //  * @param {(Array/PIEVector3)} offset -偏移
    //  * @param {(Array/PIEVector3)} rotate -旋转角度
    //  * @param {(Array/PIEVector3)} scale -缩放比例
    //  * @memberOf ModelMesh#
    //  */
    // addInstance:function (offset, rotate, scale) {
    //     var offsetArray = null;
    //     var rotateArray = null;
    //     var scaleArray = null;
    //     if(offset instanceof Array){
    //         offsetArray = offset;
    //     }else if(offset instanceof PIEVector3){
    //         offsetArray = offset.toArray();
    //     }
    //     if(rotate instanceof Array){
    //         rotateArray = rotate;
    //     }else if(rotate instanceof PIEVector3){
    //         rotateArray = rotate.toArray();
    //     }
    //     if(scale instanceof Array){
    //         scaleArray = scale;
    //     }else if(scale instanceof PIEVector3){
    //         scaleArray = scale.toArray();
    //     }
    //     if(offsetArray && rotateArray && scaleArray){
    //         var arrayOffset = new PIEArray(offsetArray, PIEArrayType.Float64);
    //         var arrayRotate = new PIEArray(rotateArray, PIEArrayType.Float64);
    //         var arrayScale = new PIEArray(scaleArray, PIEArrayType.Float64);
    //         Module._ModelMesh_AddInstance(this.handle, arrayOffset.getHandle(), arrayRotate.getHandle(), arrayScale.getHandle());
    //         arrayOffset.dispose();
    //         arrayRotate.dispose();
    //         arrayScale.dispose();
    //     }
    // }

  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   *
   * 三维几何对象基类操作函数
   * @name Geometry3D
   * @extends Geometry
   *
   */

  function PIEGeometry3D(handle, autoRelease) {
    PIEGeometry.call(this, handle, autoRelease);
  }

  PIEGeometry3D.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 得到内点（可能是Geometry3D的质点）
     *
     * @memberOf Geometry3D#
     * @returns {PIEVector3} Geometry3D的内点
     */
    getCenter3D: function getCenter3D() {
      var arrayCenter3D = new PIEArray(3, PIEArrayType.Float64);

      Module._Geometry3D_GetCenter3D(this.handle, arrayCenter3D.getHandle());

      arrayCenter3D.updateData();
      var centerArray = arrayCenter3D.toArray();
      arrayCenter3D.dispose();
      return new PIEVector3(centerArray[0], centerArray[1], centerArray[2]);
    },
    // /**
    //  * 三维对象平移
    //  * @param {(PIEVector3/Array)} offset -Geometry3D的内点
    //  * @memberOf Geometry3D#
    //  *
    //  */
    // offset3D: function (offset) {
    //     var offsetArray = null;
    //     if(offset instanceof Array){
    //         offsetArray = offset;
    //     }else if(offset instanceof PIEVector3){
    //         offsetArray = [offset.x, offset.y, offset.z];
    //     }
    //     if(offsetArray){
    //         Module._Geometry3D_Offset3D(this.handle, offsetArray[0], offsetArray[1], offsetArray[2]);
    //     }
    // },
    // /**
    //  * 三维对象旋转
    //  * @param {(PIEVector3/Array)} position -旋转中心点
    //  * @param {Number} angle -旋转角度
    //  * @memberOf Geometry3D#
    //  */
    // rotate3D:function (position, angle) {
    //     var posArray = null;
    //     if(position instanceof Array){
    //         posArray = position;
    //     }else if(position instanceof PIEVector3){
    //         posArray = [position.x, position.y, position.z];
    //     }
    //     if(posArray){
    //         var ayyarPos = new PIEArray(posArray, PIEArrayType.Float64);
    //         Module._Geometry3D_Rotate3D(this.handle, ayyarPos.getHandle(), angle);
    //     }
    // },
    // /**
    //  * 三维对象轴旋转
    //  * @param {(PIEVector3/Array)} axisPos -最初位置
    //  * @param {Number} angle -旋转角度
    //  * @memberOf Geometry3D#
    //  *
    //  */
    // rotateAxis3D:function (axisPos, angle) {
    //     var axisPosArray = null;
    //     if(axisPos instanceof Array){
    //         axisPosArray = axisPos;
    //     }else if(axisPos instanceof PIEVector3){
    //         axisPosArray = [axisPos.x, axisPos.y, axisPos.z];
    //     }
    //     if(axisPosArray){
    //         var ayyarPos = new PIEArray(axisPosArray, PIEArrayType.Float64);
    //         Module._Geometry3D_RotateAxis3D(this.handle, ayyarPos.getHandle(), angle);
    //     }
    // },

    /**
     * 设置模型数据
     * @param {PIEModelMesh} modelMesh -modelMesh对象
     * @memberOf Geometry3D#
     *
     */
    setModelMesh: function setModelMesh(modelMesh) {
      Module._Geometry3D_SetModelMesh(this.handle, modelMesh.getHandle());
    },

    /**
     * 获取模型数据指针
     *
     * @memberOf Geometry3D#
     * @returns {PIEModelMesh} modelMesh对象
     */
    getModelMesh: function getModelMesh() {
      var hModelMesh = Module._Geometry3D_GetModelMesh(this.handle);

      return new PIEModelMesh({
        handle: hModelMesh
      });
    },

    /**
     * 得到对象的位置
     *
     * @memberOf Geometry3D#
     * @returns {PIEVector3} 模型位置
     */
    getPosition: function getPosition() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._Geometry3D_GetPosition(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var position = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 设置对象的位置
     * @param {(PIEVector3/Array)} position -对象位置
     * @memberOf Geometry3D#
     *
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._Geometry3D_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取对象各方向的缩放比率
     *
     * @memberOf Geometry3D#
     * @returns {PIEVector3} 对象各方向的缩放比率
     */
    getScale: function getScale() {
      var arrayScale = new PIEArray(3, PIEArrayType.Float64);

      Module._Geometry3D_GetScale(this.handle, arrayScale.getHandle());

      arrayScale.updateData();
      var scale = arrayScale.toArray();
      arrayScale.dispose();
      return new PIEVector3(scale[0], scale[1], scale[2]);
    },

    /**
     * 设置对象的缩放大小
     * @param {(Array/PIEVector3)} scale -对象各方向的缩放比率
     * @memberOf Geometry3D#
     *
     */
    setScale: function setScale(scale) {
      var scaleArray = null;

      if (scale instanceof Array) {
        scaleArray = scale;
      } else if (scale instanceof PIEVector3) {
        scaleArray = scale.toArray();
      }

      if (scaleArray) {
        var arrayScale = new PIEArray(scaleArray, PIEArrayType.Float64);

        Module._Geometry3D_SetScale(this.handle, arrayScale.getHandle());

        arrayScale.dispose();
      }
    },

    /**
     * 得到对象各方向的旋转角度
     *
     * @memberOf Geometry3D#
     * @returns {PIEVector3}  对象各方向的缩放比率
     */
    getRotation: function getRotation() {
      var arrayRotation = new PIEArray(3, PIEArrayType.Float64);

      Module._Geometry3D_GetRotation(this.handle, arrayRotation.getHandle());

      arrayRotation.updateData();
      var scale = arrayRotation.toArray();
      arrayRotation.dispose();
      return new PIEVector3(scale[0], scale[1], scale[2]);
    },

    /**
     * 设置对象的旋转量
     * @param {(PIEVector3/Array)}  rotation -对象的旋转量
     * @memberOf Geometry3D#
     *
     */
    setRotation: function setRotation(rotation) {
      var rotationArray = null;

      if (rotation instanceof Array) {
        rotationArray = rotation;
      } else if (rotation instanceof PIEVector3) {
        rotationArray = rotation.toArray();
      }

      if (rotationArray) {
        var arrayRotation = new PIEArray(rotationArray, PIEArrayType.Float64);

        Module._Geometry3D_SetRotation(this.handle, arrayRotation.getHandle());

        arrayRotation.dispose();
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建点对象
   * @name Point3D
   * @class Point3D
   * 三维点操作函数
   *
   * @param {Object} options -
   * @param {(PIEVector3/Array)} options.point -3D点对象
   * @param {Number} options.ID -对象ID
   *
   * @extends Geometry3D
   */

  function PIEPoint3D(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var point = options.point;

      if (point != null) {
        if (point instanceof PIEVector3) {
          handle = Module._Point3D_Create(point.x, point.y, point.z);
        } else if (point instanceof Array) {
          handle = Module._Point3D_Create(point[0], point[1], point[2]);
        }

        autoRelease = true;
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry3D.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEPoint3D.prototype = Object.assign(Object.create(PIEGeometry3D.prototype), {
    /**
     * 获取点对象的坐标
     *
     * @memberOf Point3D#
     * @returns {PIEVector3} 返回的对象坐标的点
     */
    getPoint: function getPoint() {
      var arrayPoint = new PIEArray(3, PIEArrayType.Float64);

      Module._Point3D_GetPoint(this.handle, arrayPoint.getHandle());

      arrayPoint.updateData();
      var point = arrayPoint.toArray();
      arrayPoint.dispose();
      return new PIEVector3(point[0], point[1], point[2]);
    },

    /**
     * 设置点对象的坐标
     * @param {PIEVector3} point -点对象坐标
     *
     * @memberOf Point3D#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setPoint: function setPoint(point) {
      var arrayPoint = new PIEArray(point, PIEArrayType.Float64);

      var res = Module._Point3D_SetPoint(this.handle, arrayPoint.getHandle());

      arrayPoint.dispose();
      return Boolean(res);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建简单3D线对象
   * @name Polyline3D
   * @class Polyline3D
   * 三维线操作函数
   *@param {Object} options -
   *@param {Array} options.points - 点串数组
   *@param {Number} options.ID -对象ID
   *
   * @extends Geometry3D
   *
   */

  function PIEPolyline3D(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var points = options.points;

      if (points) {
        if (points instanceof Array) {
          var pointsArray = new PIEArray(points, PIEArrayType.Float64);
          handle = Module._Polyline3D_Create_WithPoints(pointsArray.getHandle(), points.length);
          pointsArray.dispose();
          autoRelease = true;
        }
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry3D.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEPolyline3D.prototype = Object.assign(Object.create(PIEGeometry3D.prototype), {
    /**
     * 获取3D线对象的点数量
     *
     * @memberOf Polyline3D#
     * @returns {Number} 如果获取成功返回所有子对象点个数的总和
     */
    getPointCount: function getPointCount() {
      return Module._Polyline3D_GetPointCount(this.handle);
    },

    /**
     * 获取子对象的个数
     *
     * @memberOf Polygon3D#
     * @returns {Number} 返回所有子对象个数
     */
    getSubCount: function getSubCount() {
      return Module._Polyline3D_GetSubCount(this.handle);
    },

    /**
     * 获取某个子对象的点的个数
     * @param {Number} subIndex -子对象索引值
     *
     * @memberOf Polyline3D#
     * @returns {Number} 如果获取成功返回该子对象点的总个数
     */
    getSubPointCount: function getSubPointCount(subIndex) {
      return Module._Polyline3D_GetSubPointCount(this.handle, subIndex);
    },

    /**
     * 获取线对象中指定子对象所包含点串数组
     * @param {Number} subIndex -子对象的索引值(默认为0)
     * @memberOf Polyline3D#
     * @returns {Array} 如果获取成功返回子对象所包含点串数组，否则返回null
     */
    getPoints: function getPoints() {
      var subIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var count = this.getSubPointCount(subIndex);

      if (count > 0) {
        var pointsRes = [];
        var pointsArrX = new PIEArray(count, PIEArrayType.Float64);
        var pointsArrY = new PIEArray(count, PIEArrayType.Float64);
        var pointsArrZ = new PIEArray(count, PIEArrayType.Float64);

        Module._Polyline3D_GetPoints(this.handle, subIndex, pointsArrX.getHandle(), pointsArrY.getHandle(), pointsArrZ.getHandle());

        pointsArrX.updateData();
        pointsArrY.updateData();
        pointsArrZ.updateData();
        var pointXs = pointsArrX.toArray();
        var pointYs = pointsArrY.toArray();
        var pointZs = pointsArrZ.toArray();
        pointsArrX.dispose();
        pointsArrY.dispose();
        pointsArrZ.dispose();

        for (var i = 0; i < count; i++) {
          pointsRes.push(new PIEVector3(pointXs[i], pointYs[i], pointZs[i]));
        }

        return pointsRes;
      }

      return null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 三维面操作函数
   * @name Polygon3D
   * @class Polygon3D
   *
   * @param {Object} options -
   * @param {Array} options.points - 点串数组
   * @param {Number} options.ID -对象ID
   * @extends Geometry3D
   */

  function PIEPolygon3D(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var points = options.points;

      if (points) {
        if (points instanceof Array) {
          if (points[0] instanceof PIEVector3) {
            var Arraypoints = [];

            for (var i = 0; i < points.length; i++) {
              Arraypoints[i * 3 + 0] = points[i].x;
              Arraypoints[i * 3 + 1] = points[i].y;
              Arraypoints[i * 3 + 2] = points[i].z;
            }

            points = Arraypoints;
          }

          var pointsArray = new PIEArray(points, PIEArrayType.Float64);
          handle = Module._Polygon3D_Create(pointsArray.getHandle(), points.length);
          pointsArray.dispose();
          autoRelease = true;
        }
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIEGeometry3D.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEPolygon3D.prototype = Object.assign(Object.create(PIEGeometry3D.prototype), {
    /**
     * 获取3D面对象的点数量
     *
     * @memberOf Polygon3D#
     * @returns {Number} 返回所有子对象点个数的总和
     */
    getPointCount: function getPointCount() {
      return Module._Polygon3D_GetPointCount(this.handle);
    },

    /**
     * 获取子对象的个数
     *
     * @memberOf Polygon3D#
     * @returns {Number} 返回所有子对象个数
     */
    getSubCount: function getSubCount() {
      return Module._Polygon3D_GetSubCount(this.handle);
    },

    /**
     * 获取某个子对象的点的个数
     * @param {Number} subIndex -子对象索引
     *
     * @memberOf Polygon3D#
     * @returns {Number} 返回该子对象的点的总个数
     */
    getSubPointCount: function getSubPointCount(subIndex) {
      return Module._Polygon3D_GetSubPointCount(this.handle, subIndex);
    },

    /**
     * 在指定位置上设置点的坐标
     * @param {Number} index -位置索引
     * @param {PIEVector3} pntPoint -点坐标
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setPoint: function setPoint(index, pntPoint) {
      var pntArray = new PIEArray(pntPoint, PIEArrayType.Float64);

      var res = Module._Polygon3D_SetPoint(this.handle, index, pntArray.getHandle());

      pntArray.dispose();
      return Boolean(res);
    },

    /**
     * 在子对象指定的位置上设置点的坐标
     * @param {Number} subIndex -子对象索引
     * @param {Number} pointIndex -子对象点的位置索引
     * @param {PIEVector3} pntPoint -点坐标
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setSubPoint: function setSubPoint(subIndex, pointIndex, pntPoint) {
      var pntArray = new PIEArray(pntPoint, PIEArrayType.Float64);

      var res = Module._Polygon3D_SetSubPoint(this.handle, subIndex, pointIndex, pntArray.getHandle());

      pntArray.dispose();
      return Boolean(res);
    },

    /**
     * 获取线对象中指定子对象所包含点串数组
     * @param {Number} subIndex -子对象的索引值(默认为0)
     * @memberOf Polygon3D#
     * @returns {Array} 如果获取成功返回子对象所包含点串数组，否则返回null
     */
    getPoints: function getPoints() {
      var subIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var count = this.getSubPointCount(subIndex);

      if (count > 0) {
        var pointsRes = [];
        var pointsArr = new PIEArray(count * 3, PIEArrayType.Float64);

        Module._Polygon3D_GetPoints(this.handle, subIndex, pointsArr.getHandle());

        pointsArr.updateData();
        var points = pointsArr.toArray();
        pointsArr.dispose();

        for (var i = 0; i < count * 3; i += 3) {
          pointsRes.push(new PIEVector3(points[i], points[i + 1], points[i + 2]));
        }

        return pointsRes;
      }

      return null;
    },

    /**
     * 在面对象指定索引处插入一个点
     * @param {Number} subIndex -子对象索引号
     * @param {Number} pointIndex -子对象上插入点的索引号
     * @param {PIEVector3} pntPoint -待插入的点的坐标
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果插入成功返回true，否则返回false
     */
    insertPoint: function insertPoint(subIndex, pointIndex, pntPoint) {
      var pntArray = new PIEArray(pntPoint, PIEArrayType.Float64);

      var res = Module._Polygon3D_InsertPoint(this.handle, subIndex, pointIndex, pntArray.getHandle());

      pntArray.dispose();
      return Boolean(res);
    },

    /**
     * 组合面对象接口
     * @param {PIEPolygon3D} newPolygon -需要组合的面对象
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果组合成功返回true，否则返回false
     */
    combination: function combination(newPolygon) {
      return Boolean(Module._Polygon3D_Combination(this.handle, newPolygon.getHandle()));
    },

    /**
     * 获取三维面对象的面积
     *
     * @memberOf Polygon3D#
     * @returns {Number} 如果获取成功返回几何面积，否则返回0
     */
    getArea: function getArea() {
      return Module._Geometry_GetArea(this.handle);
    },

    /**
     * 获取指定空间参考系下的面积
     * @param {PIESpatialReference} spatialReference -指定空间参考系
     *
     * @memberOf Polygon3D#
     * @returns {Number} 如果获取成功返回面积，否则返回0
     */
    getAreaInSpatialReference: function getAreaInSpatialReference(spatialReference) {
      return Module._Geometry_GetAreaInSpatialReference(this.handle, spatialReference.getHandle());
    },

    /**
     * 判断点是否在面内
     * @param {PIEVector2} point -点
     * @param {Boolean} border -点在边线上时，算作面内设置为true，算作面外设置为false
     * @param {Number} interval -容差
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 在面内返回TRUE，否则返回FALSE
     */
    ptInRegion: function ptInRegion(point, border, interval) {
      var pointArray = new PIEArray(point, PIEArrayType.Float64);

      var res = Module._Polygon3D_PtInRegion(this.handle, pointArray.getHandle(), border, interval);

      pointArray.dispose();
      return Boolean(res);
    },

    /**
     * 判断多边形指定子对象是岛还是洞
     * @param {Number} subIndex -子对象索引号
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果是岛返回true，否则返回false
     */
    checkSubPolygon: function checkSubPolygon(subIndex) {
      return Boolean(Module._Polygon3D_CheckSubPolygon(this.handle, subIndex));
    },

    /**
     * 判断子多边形的走向是否是顺时针
     * @param {Number} subIndex -子对象索引号
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果是顺时针返回true，否则返回false
     */
    isCounterClockwise: function isCounterClockwise(subIndex) {
      return Boolean(Module._Polygon3D_IsCounterClockwise(this.handle, subIndex));
    },

    /**
     * 逆序子对象点串顺序
     * @param {Number} subIndex -子对象索引号
     *
     * @memberOf Polygon3D#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    reverseSubPolygon: function reverseSubPolygon(subIndex) {
      return Boolean(Module._Polygon3D_ReverseSubPolygon(this.handle, subIndex));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建文本对象
   * @name Text3D
   * @class Text3D
   * 三维文字操作函数
   *
   * @param {Object} options -
   * @param {(PIEVector3/Array)} options.point -文本对象的坐标
   * @param {String} options.text -文本字符串
   * @param {Number} options.ID -对象ID
   *
   * @extends Geometry3D
   */

  function PIEText3D(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var point = options.point;
      var text = options.text;

      if (point && text) {
        var strText = new PIEString$1(text);

        if (point instanceof Array) {
          handle = Module._Text3D_Create(point[0], point[1], point[2], strText.getHandle());
          autoRelease = true;
        } else if (point instanceof PIEVector3) {
          handle = Module._Text3D_Create(point.x, point.y, point.z, strText.getHandle());
          autoRelease = true;
        }

        strText.dispose();
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEGeometry3D.call(this, handle, autoRelease);

    if (options != null && this.handle != null && options.ID != null) {
      this.setID(options.ID);
    }
  }

  PIEText3D.prototype = Object.assign(Object.create(PIEGeometry3D.prototype), {
    /**
     * 获取文本对象的坐标
     *
     * @memberOf Text3D#
     * @returns {PIEVector3} 返回的文本对象的坐标点
     */
    getPoint: function getPoint() {
      var pointArray = new PIEArray(3, PIEArrayType.Float64);

      Module._Text3D_GetPoint(this.handle, pointArray.getHandle());

      pointArray.updateData();
      var array = pointArray.toArray();
      pointArray.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     * 设置文本对象的坐标
     * @param {PIEVector3} point -文本对象的坐标点
     *
     * @memberOf Text3D#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setPoint: function setPoint(point) {
      var array = null;

      if (point instanceof PIEVector3) {
        array = [point.x, point.y, point.z];
      } else if (point instanceof Array) {
        array = point;
      }

      if (array) {
        var pointArray = new PIEArray(array, PIEArrayType.Float64);

        var res = Module._Text3D_SetPoint(this.handle, pointArray.getHandle());

        pointArray.dispose();
        return res;
      }

      return false;
    },

    /**
     * 获取文本对象的字符串值
     *
     * @memberOf Text3D#
     * @returns {String} 返回文本对象的字符串值
     */
    getText: function getText() {
      var strText = new PIEString$1(256);

      Module._Text3D_GetText(this.handle, strText.getHandle());

      var text = strText.toString();
      strText.dispose();
      return text;
    },

    /**
     * 设置文本对象的字符串值
     * @param {String} text -文本对象的字符串值
     *
     * @memberOf Text3D#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setText: function setText(text) {
      var strText = new PIEString$1(text);

      var res = Module._Text3D_SetText(this.handle, strText.getHandle());

      strText.dispose();
      return res;
    },

    /**
     * 获取文本对象的对象风格
     *
     * @memberOf Text3D#
     * @returns {PIETextStyle} 返回文本对象的对象风格
     */
    getTextStyle: function getTextStyle() {
      var hStyle = Module._Text3D_GetTextStyle(this.handle);

      return new PIETextStyle(hStyle);
    },

    /**
     * 设置文本对象的对象风格
     * @param {PIETextStyle} style -文本对象的对象风格
     *
     * @memberOf Text3D#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setTextStyle: function setTextStyle(style) {
      return Module._Text3D_SetTextStyle(this.handle, style.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建三维模型几何对象
   * @name Model3D
   * @class Model3D
   * 三维模型操作函数
   * @param {Object} options -
   * @param {PIE.ModelMesh} options.modelMesh -模型格网
   *
   * @extends Geometry3D
   */

  function PIEModel3D(options) {
    var handle = null;
    var autoRelease = false;

    if (options) {
      var modelMesh = options.modelMesh;

      if (modelMesh) {
        handle = Module._Model3D_Create(modelMesh.getHandle());
        autoRelease = true;
      }

      if (options.handle) {
        handle = options.handle;
      }
    }

    PIEGeometry3D.call(this, handle, autoRelease);
  }

  PIEModel3D.prototype = Object.assign(Object.create(PIEGeometry3D.prototype), {
    // /**
    //  * 设置模型ID
    //  * @param {Number} id -设置的模型ID
    //  * @memberOf Model3D#
    //  *
    //  */
    setModelId: function setModelId(id) {
      Module._Model3D_SetModelId(this.handle, id);
    },
    // /**
    //  * 获取模型ID
    //  *
    //  * @memberOf Model3D#
    //  * @returns {Number} 获取的模型ID
    //  */
    getModelId: function getModelId() {
      return Module._Model3D_GetModelId(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  function PIEGeometryFactory() {}

  Object.assign(PIEGeometryFactory.prototype, {});

  PIEGeometryFactory.CreateInstance = function (hGeometry) {
    var geometryType = Module._Geometry_GetType(hGeometry);

    if (geometryType == PIEGeometryType.Point) {
      return new PIEPoint({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Point3D) {
      return new PIEPoint3D({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Line) {
      return new PIEPolyline({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Line3D) {
      return new PIEPolyline3D({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Region) {
      return new PIEPolygon({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.MultiRegion) {
      return new PIEMultiPolygon({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Region3D) {
      return new PIEPolygon3D({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Text) {
      return new PIEText({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Text3D) {
      return new PIEText3D({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.GeoPlot) {
      return new PIEGeoPlot({
        handle: hGeometry
      });
    } else if (geometryType == PIEGeometryType.Model3D) {
      return new PIEModel3D({
        handle: hGeometry
      });
    }

    return null;
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   *
   * 二维几何对象基类操作函数
   * @name Geometry
   *
   */

  function PIEGeometry(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGeometry.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放几何对象
     * @memberOf Geometry#
     *
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._Geometry_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 获取几何对象的类型
     *
     * @memberOf Geometry#
     * @returns {PIEGeometryType} 返回几何对象类型
     */
    getType: function getType() {
      return Module._Geometry_GetType(this.handle);
    },

    /**
     * 获取几何对象维度(点为0维, 线或曲线等为1维, 面或曲面等为2维, 组合对象或文本等为-1)
     *
     * @memberOf Geometry#
     * @returns {Number} 返回几何对象维度
     */
    getDimension: function getDimension() {
      return Module._Geometry_GetDimension(this.handle);
    },

    /**
     *  判断是否是3D几何对象
     *
     *  @memberOf Geometry#
     * @returns {Boolean} 如果是3D几何对象返回true，否则返回false
     */
    is3D: function is3D() {
      return Boolean(Module._Geometry_Is3D(this.handle));
    },

    /**
     * 获取几何对象的ID
     *
     * @memberOf Geometry#
     * @returns {Number} 如果获取成功返回几何对象ID，否则返回0
     */
    getID: function getID() {
      return Module._Geometry_GetID(this.handle);
    },

    /**
     * 设置几何对象的ID
     * @param {Number} id -几何对象ID
     * @memberOf Geometry#
     *
     */
    setID: function setID(id) {
      return Module._Geometry_SetID(this.handle, id);
    },

    /**
     * 获取几何对象的内点
     *
     * @memberOf Geometry#
     * @returns {PIEVector2} 返回几何对象内点
     */
    getInnerPoint: function getInnerPoint() {
      var point = new PIEArray(2, PIEArrayType.Float64);

      Module._Geometry_GetInnerPoint(this.handle, point.getHandle());

      point.updateData();
      var array = point.toArray();
      point.dispose();
      return new PIEVector2(array[0], array[1]);
    },
    // /**
    //  * 获取几何对象的子对象个数
    //  *
    //  * @memberOf Geometry#
    //  * @returns {Number} 如果获取成功返回子对象个数，否则返回0
    //  */
    // getSubCount: function () {
    //     return Module._Geometry_GetSubCount(this.handle);
    // },

    /**
     * 获取几何对象的范围
     *
     * @memberOf Geometry#
     * @returns {PIEBounds} 返回几何对象的范围
     */
    getBounds: function getBounds() {
      var boundsArray = new PIEArray(4, PIEArrayType.Float64);

      Module._Geometry_GetBounds(this.handle, boundsArray.getHandle());

      boundsArray.updateData();
      var bounds = PIEBounds.fromArray(boundsArray);
      boundsArray.dispose();
      return bounds;
    },

    /**
     * 设置几何对象风格
     * @param {PIEVectorStyle} style -几何对象风格(风格对象传入后内部会进行克隆，外部必须释放传入的风格对象，否则会出现内存泄露)
     * @memberOf Geometry#
     *
     */
    setStyle: function setStyle(style) {
      Module._Geometry_SetStyle(this.handle, style.getHandle());
    },

    /**
     * 获取几何对象风格
     *
     * @memberOf Geometry#
     * @returns {PIEVectorStyle} 返回的几何对象风格
     */
    getStyle: function getStyle() {
      var handle = Module._Geometry_GetStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    },

    /**
     * 不同空间参考系下几何对象的转换
     * @param {PIEReferenceTranslator} refTranslator -参考系转换器对象
     * @param {Boolean} forward -是否是正向转换
     * @memberOf Geometry#
     *
     */
    convert: function convert(refTranslator, forward) {
      Module._Geometry_Convert(this.handle, refTranslator.getHandle(), forward);
    },

    /**
     * 从经纬坐标系统转化为投影坐标系统
     * @param {PIESpatialReference} spatialReference -投影坐标系统对象
     * @memberOf Geometry#
     *
     */
    forward: function forward(spatialReference) {
      Module._Geometry_Forward(this.handle, spatialReference.getHandle());
    },

    /**
     * 从投影坐标系统转化为经纬坐标
     * @param {PIESpatialReference} spatialReference -投影坐标系统对象
     * @memberOf Geometry#
     *
     */
    inverse: function inverse(spatialReference) {
      Module._Geometry_Inverse(this.handle, spatialReference.getHandle());
    },
    // /**
    //  * 判断是否选中几何对象
    //  * @param {PIEVector2} pnt -点对象
    //  * @param {Number} tolerance -选择容限
    //  * @memberOf Geometry#
    //  *
    //  * @returns {Boolean} 如果选中几何对象返回true，否则返回false
    //  */
    // hitTest: function (pnt, tolerance) {
    //     var arrayPnt = new PIEArray(pnt, PIEArrayType.Float64);
    //     var res = Module._Geometry_HitTest(this.handle, arrayPnt.getHandle(), tolerance);
    //     arrayPnt.dispose();
    //     return res;
    // },
    // /**
    //  * 获取几何对象离点击最近一个节点坐标的索引
    //  * @param {PIEVector2} pnt -点对象
    //  * @memberOf Geometry#
    //  *
    //  * @returns {Number} 如果选中返回坐标索引，否则返回-1
    //  */
    // hitTestVertex: function (pnt) {
    //     var arrayPnt = new PIEArray(pnt, PIEArrayType.Float64);
    //     var res = Module._Geometry_HitTestVertex(this.handle, arrayPnt.getHandle());
    //     arrayPnt.dispose();
    //     return res;
    // },
    // /**
    //  * 平移几何对象
    //  * @param {(PIEVector2/Array)} point -点坐标
    //  * @memberOf Geometry#
    //  *
    //  */
    // offset: function (point) {
    //     var arrayPoint = [];
    //     if (point instanceof Array) {
    //         arrayPoint = point;
    //     } else if (point instanceof PIEVector2) {
    //         arrayPoint = [point.x, point.y];
    //     }
    //     if (arrayPoint.length) {
    //         var dx = arrayPoint[0];
    //         var dy = arrayPoint[1];
    //         Module._Geometry_Offset(this.handle, dx, dy);
    //     }
    // },
    // /**
    //  * 旋转几何对象
    //  * @param {PIEVector2} pnt -旋转点坐标
    //  * @param {Number} rotate -旋转角度
    //  * @memberOf Geometry#
    //  *
    //  */
    // rotate: function (pnt, rotate) {
    //     var arrayPnt = new PIEArray(pnt, PIEArrayType.Float64);
    //     Module._Geometry_Rotate(this.handle, arrayPnt.getHandle(), rotate);
    //     arrayPnt.dispose();
    // },
    // /**
    //  * 调整几何数据,限定在新的Bounds中
    //  * @param {(PIEBounds/Array)} newBounds -范围对象
    //  * @memberOf Geometry#
    //  *
    //  */
    // resize: function (newBounds) {
    //     var arrayNewBounds = [];
    //     if (newBounds instanceof Array) {
    //         arrayNewBounds = newBounds;
    //     } else if (newBounds instanceof PIEBounds) {
    //         arrayNewBounds = PIEBounds.toArray(newBounds);
    //     }
    //     if (arrayNewBounds.length) {
    //         var arrayBounds = new PIEArray(arrayNewBounds, PIEArrayType.Float64);
    //         Module._Geometry_Resize(this.handle, arrayBounds.getHandle());
    //         arrayBounds.dispose();
    //     }
    // },
    // /**
    //  * 平移几何对象控制点到指定坐标
    //  * @param {Number} handle -控制点编号
    //  * @param {(Array/PIEVector2)} point -控制点坐标
    //  * @memberOf Geometry#
    //  *
    //  */
    // moveHandle: function (handle, point) {
    //     var array = [];
    //     if (point instanceof Array) {
    //         array = point;
    //     } else if (point instanceof PIEVector2) {
    //         array = [point.x, point.y];
    //     }
    //     if (array.length) {
    //         var arrayPoint = new PIEArray(array, PIEArrayType.Float64);
    //         Module._Geometry_MoveHandle(this.handle, handle, arrayPoint.getHandle());
    //         arrayPoint.dispose();
    //     }
    // },

    /**
     * 获取空间参考系类型
     *
     * @memberOf Geometry#
     * @returns {PIESpatialRefType} 返回空间参考系类型
     */
    getSpatialRefType: function getSpatialRefType() {
      return Module._Geometry_GetSpatialRefType(this.handle);
    },

    /**
     * 设置空间参考系类型
     * @param {PIESpatialRefType} type -返回空间参考系类型
     * @memberOf Geometry#
     *
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._Geometry_SetSpatialRefType(this.handle, type);
    },

    /**
     * 克隆几何对象
     *
     * @memberOf Geometry#
     * @returns {PIEGeometry}返回克隆的几何对象
     */
    clone: function clone() {
      var handle = Module._Geometry_Clone(this.handle);

      if (handle) {
        return PIEGeometryFactory.CreateInstance(handle);
      }
    } // /**
    //  * 拷贝几何对象
    //  * @param {PIEGeometry} 目标几何对象句柄
    //  *
    //  * @returns {boolean}成功或失败
    //  *
    //  *
    //  */
    // copy: function (tagGeometry) {
    //     // Module._Geometry_Copy(this.handle, );
    //     // return PIEGeometry();
    // },
    // /**
    //  * 二进制数据流转换为几何对象
    //  * @param {String} stream -二进制数据流
    //  * @memberOf Geometry#
    //  *
    //  * @returns {PIEGeometry} 几何对象
    //  *
    //  */
    // fromStream: function (stream) {
    //     var strStream = new PIEString(stream);
    //     var res = Module._Geometry_FromStream(strStream.getHandle());
    //     strStream.dispose();
    //     return new PIEGeometry(res);
    // },

  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */
  /**
   * 创建字段信息对象
   * @name FieldInfo
   * @class FieldInfo
   * 字段信息操作函数
   * @param {object} options -
   * @param {Boolean} options.isSystem -是否是系统字段(默认false)
   * @param {Boolean} options.isRequired -是否是必输字段(默认false)
   * @param {PIEFieldType} options.type -字段类型(默认PIE.FieldType.UnKnown)
   * @param {Number} options.size -字段长度(必输项)
   * @param {String} options.name -字段名
   * @param {String} options.alias -字段别名
   * @param {String} options.defaultValue -字段默认值
   *
   */

  function PIEFieldInfo(options) {
    var handle = options.handle;

    if (handle == null) {
      handle = Module._FieldInfo_Create();
      this.autoRelease = true;
      this.handle = handle;

      if (options.isSystem != null) {
        this.setIsSystem(options.isSystem);
      }

      if (options.isRequired != null) {
        this.setIsRequired(options.isRequired);
      }

      if (options.type != null) {
        this.setFieldType(options.type);
      }

      if (options.size != null) {
        this.setFieldSize(options.size);
      }

      if (options.name != null) {
        this.setFieldName(options.name);
      }

      if (options.alias != null) {
        this.setForeignName(options.alias);
      }

      if (options.defaultValue != null) {
        this.setDefaultValue(options.defaultValue);
      }
    } else {
      this.autoRelease = false;
      this.handle = handle;
    }
  }

  Object.assign(PIEFieldInfo.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },

    /**
     * 删除字段对象
     * @memberOf FieldInfo#
     */
    dispose: function dispose() {
      Module._FieldInfo_Delete(this.handle);
    },

    /**
     * 设置是否是系统字段
     * @param {Boolean} isSystem -是否是系统字段
     * @memberOf FieldInfo#
     */
    setIsSystem: function setIsSystem(isSystem) {
      Module._Field_SetIsSystem(this.handle, isSystem);
    },

    /**
     * 获取是否是系统字段
     * @memberOf FieldInfo#
     * @returns {Boolean} 是系统字段返回true，否则返回false
     */
    getIsSystem: function getIsSystem() {
      return Boolean(Module._Field_GetIsSystem(this.handle));
    },

    /**
     * 设置是否是必输字段
     * @param {Boolean} isRequired -是否是必输字段
     * @memberOf FieldInfo#
     */
    setIsRequired: function setIsRequired(isRequired) {
      Module._Field_SetIsRequired(this.handle, isRequired);
    },

    /**
     * 获取是否是必输字段
     * @memberOf FieldInfo#
     * @returns {Boolean} 是必输字段返回true，否则返回false
     */
    getIsRequired: function getIsRequired() {
      return Boolean(Module._Field_GetIsRequired(this.handle));
    },

    /**
     * 设置字段类型
     * @param {PIEFieldType} fieldType -字段类型
     * @memberOf FieldInfo#
     */
    setFieldType: function setFieldType(fieldType) {
      Module._Field_SetFieldType(this.handle, fieldType);
    },

    /**
     * 获取字段类型
     * @memberOf FieldInfo#
     * @returns {PIEFieldType} 字段类型
     */
    getFieldType: function getFieldType() {
      return Module._Field_GetFieldType(this.handle);
    },

    /**
     * 设置字段内存空间大小
     * @param {int} fieldSize -字段内存空间大小
     * @memberOf FieldInfo#
     */
    setFieldSize: function setFieldSize(fieldSize) {
      Module._Field_SetFieldSize(this.handle, fieldSize);
    },

    /**
     * 获取字段内存空间大小
     * @memberOf FieldInfo#
     * @returns {int} 字段内存空间大小
     */
    getFieldSize: function getFieldSize() {
      return Module._Field_GetFieldSize(this.handle);
    },

    /**
     * 设置字段名
     * @param {String} fieldName -字段名
     * @memberOf FieldInfo#
     */
    setFieldName: function setFieldName(fieldName) {
      var strName = new PIEString$1(fieldName);

      Module._Field_SetFieldName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取字段名
     * @memberOf FieldInfo#
     * @returns {String} 字段名
     */
    getFieldName: function getFieldName() {
      var strName = new PIEString$1(256);

      Module._Field_GetFieldName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置字段别名
     * @param {String} foreignName -字段别名
     * @memberOf FieldInfo#
     */
    setForeignName: function setForeignName(foreignName) {
      var strName = new PIEString$1(foreignName);

      Module._Field_SetForeignName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取字段别名
     * @memberOf FieldInfo#
     * @returns {String} 字段别名
     */
    getForeignName: function getForeignName() {
      var strName = new PIEString$1(256);

      Module._Field_GetForeignName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置字段默认值
     * @param {String} value -字段默认值
     * @memberOf FieldInfo#
     */
    setDefaultValue: function setDefaultValue(value) {
      var strValue = new PIEString$1(value);

      Module._Field_SetDefaultValue(this.handle, strValue.getHandle());

      strValue.dispose();
    },

    /**
     * 获取字段默认值
     * @memberOf FieldInfo#
     * @returns {String} 字段默认值
     */
    getDefaultValue: function getDefaultValue() {
      var strValue = new PIEString$1(256);

      Module._Field_GetDefaultValue(this.handle, strValue.getHandle());

      var value = strValue.toString();
      strValue.dispose();
      return value;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 几何要素类操作函数
   * @name Feature
   * @class Feature
   *
   * @example
   * let feature = new PIE.Feature();
   */

  function PIEFeature(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Feature_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEFeature.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放矢量要素对象
     * @memberOf Feature#
     *
     */
    dispose: function dispose() {
      Module._Feature_Delete(this.handle);
    },

    /**
     * 设置几何对象Id
     * @param {Number} id -几何对象id，为正整数
     * @memberOf Feature#
     */
    setId: function setId(id) {
      Module._Feature_SetID(this.handle, id);
    },

    /**
     * 获取几何对象ID
     *
     * @memberOf Feature#
     * @returns {Number} 如果成功返回几何对象Id,失败返回0
     *
     */
    getId: function getId() {
      return Module._Feature_GetID(this.handle);
    },

    /**
     * 设置几何对象
     * @param {PIEGeometry} geometry -几何对象
     * @memberOf Feature#
     */
    setGeometry: function setGeometry(geometry) {
      Module._Feature_SetGeometry(this.handle, geometry.getHandle());
    },

    /**
     * 获取几何对象
     *
     * @memberOf Feature#
     * @returns {PIEGeometry} 如果获取成功返回几何对象，否则返回NULL
     *
     */
    getGeometry: function getGeometry() {
      var handle = Module._Feature_GetGeometry(this.handle);

      if (handle) {
        return PIEGeometryFactory.CreateInstance(handle);
      }

      return null;
    },

    /**
     * 设置是否自动释放几何对象
     * @param {Boolean} release -是否自动释放几何对象
     * @memberOf Feature#
     *
     */
    setAutoReleaseGeometry: function setAutoReleaseGeometry(release) {
      Module._Feature_SetAutoReleaseGeometry(this.handle, release);
    },

    /**
     * 获取是否自动释放几何对象
     *
     * @memberOf Feature#
     * @returns {Boolean} 如果是自动释放几何对象返回true，否则返回false
     *
     */
    isAutoReleaseGeometry: function isAutoReleaseGeometry() {
      return Boolean(Module._Feature_IsAutoReleaseGeometry(this.handle));
    },

    /**
     * 获取要素中的字符集
     *
     * @memberOf Feature#
     * @returns {PIECharsetType} 返回字符集
     *
     */
    getCharset: function getCharset() {
      return Module._Feature_GetCharset(this.handle);
    },

    /**
     * 设置要素中的字符集
     * @param {PIECharsetType} charset -字符集
     * @memberOf Feature#
     *
     */
    setCharset: function setCharset(charset) {
      Module._Feature_SetCharset(this.handle, charset);
    },

    /**
     * 添加字段
     * @param {PIEFieldInfo} fieldInfo -字段信息对象
     * @memberOf Feature#
     *
     */
    addField: function addField(fieldInfo) {
      Module._Feature_AddField(this.handle, fieldInfo.getHandle());
    },

    /**
     * 已知字段为Boolean类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Boolean} value -字段值，默认是false
     * @memberOf Feature#
     *
     */
    setBoolAt: function setBoolAt(fieldIndex, value) {
      Boolean(Module._Feature_SetBool(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为Boolean类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Boolean} value -字段值，默认是false
     * @memberOf Feature#
     *
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setBool: function setBool(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetBool(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为Boolean类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     *
     * @returns {Boolean} 返回bool类型字段值
     *
     *
     */
    getBoolAt: function getBoolAt(fieldIndex) {
      return Boolean(Module._Feature_GetBool(this.handle, fieldIndex));
    },

    /**
     * 已知字段为Boolean类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Boolean} 返回Boolean类型字段值
     *
     *
     */
    getBool: function getBool(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetBool(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return Boolean(field);
    },

    /**
     * 已知字段为byte类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Number} value -字段值
     * @memberOf Feature#
     *
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setByteAt: function setByteAt(fieldIndex, value) {
      return Boolean(Module._Feature_SetByte(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为byte类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setByte: function setByte(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetByte(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为byte类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回byte类型字段值
     *
     */
    getByteAt: function getByteAt(fieldIndex) {
      return Module._Feature_GetByte(this.handle, fieldIndex);
    },

    /**
     * 已知字段为byte类型，根据字段名获取字段值
     * @param {String} fieldName -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回byte类型字段值
     */
    getByte: function getByte(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetByte(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return field;
    },

    /**
     * 已知字段为short类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Number} value -字段值
     * @memberOf Feature#
     *
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setINT16At: function setINT16At(fieldIndex, value) {
      return Boolean(Module._Feature_SetINT16(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为short类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Number} value -字段值
     * @memberOf Feature#
     *
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setINT16: function setINT16(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetINT16(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为short类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回short类型字段值
     *
     */
    getINT16At: function getINT16At(fieldIndex) {
      return Module._Feature_GetINT16(this.handle, fieldIndex);
    },

    /**
     * 已知字段为short类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Number} 返回short类型字段值
     *
     */
    getINT16: function getINT16(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetINT16(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return field;
    },

    /**
     * 已知字段为int类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setINT32At: function setINT32At(fieldIndex, value) {
      return Boolean(Module._Feature_SetINT32(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为int类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setINT32: function setINT32(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetINT32(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为int类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回int类型字段值
     *
     */
    getINT32At: function getINT32At(fieldIndex) {
      return Module._Feature_GetINT32(this.handle, fieldIndex);
    },

    /**
     * 已知字段为int类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Number} 返回int类型字段值
     *
     */
    getINT32: function getINT32(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetINT32(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return field;
    },

    /**
     * 已知字段为long类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setINT64At: function setINT64At(fieldIndex, value) {
      return Boolean(Module._Feature_SetINT64(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为long类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setINT64: function setINT64(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetINT64(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为long类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回long类型字段值
     *
     *
     */
    getINT64At: function getINT64At(fieldIndex) {
      return Module._Feature_GetINT64(this.handle, fieldIndex);
    },

    /**
     * 已知字段为long类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Number} 返回long类型字段值
     *
     */
    getINT64: function getINT64(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetINT64(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return field;
    },

    /**
     * 已知字段为float类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setFloatAt: function setFloatAt(fieldIndex, value) {
      return Boolean(Module._Feature_SetFloat(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为float类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setFloat: function setFloat(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetFloat(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为float类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回float类型字段值
     *
     */
    getFloatAt: function getFloatAt(fieldIndex) {
      return Module._Feature_GetFloat(this.handle, fieldIndex);
    },

    /**
     * 已知字段为float类型，根据字段名获取字段值
     *  @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Number} 返回float类型字段值
     *
     */
    getFloat: function getFloat(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetFloat(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return field;
    },

    /**
     * 已知字段为double类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setDoubleAt: function setDoubleAt(fieldIndex, value) {
      return Boolean(Module._Feature_SetDouble(this.handle, fieldIndex, value));
    },

    /**
     * 已知字段为double类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Number} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setDouble: function setDouble(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);

      var res = Module._Feature_FieldSetDouble(this.handle, strFieldName.getHandle(), value);

      strFieldName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为double类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Number} 返回double类型字段值
     *
     */
    getDoubleAt: function getDoubleAt(fieldIndex) {
      return Module._Feature_GetDouble(this.handle, fieldIndex);
    },

    /**
     * 已知字段为double类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Number} 返回double类型字段值
     *
     */
    getDouble: function getDouble(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      var field = Module._Feature_FieldGetDouble(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
      return field;
    },

    /**
     * 已知字段为time类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Date} time -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setTimeAt: function setTimeAt(fieldIndex, time) {
      if (time instanceof Date) {
        var timeArray = [time.getFullYear(), time.getMonth(), time.getDate(), time.getHours(), time.getMinutes(), time.getSeconds()];
        var arrayTime = new PIEArray(timeArray, PIEArrayType.Int32);

        var res = Module._Feature_SetTime(this.handle, fieldIndex, arrayTime.getHandle());

        arrayTime.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 已知字段为time类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Date} time -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setTime: function setTime(fieldName, time) {
      if (time instanceof Date) {
        var timeArray = [time.getFullYear(), time.getMonth(), time.getDate(), time.getHours(), time.getMinutes(), time.getSeconds()];
        var strField = new PIEString$1(fieldName);
        var arrayTime = new PIEArray(timeArray, PIEArrayType.Int32);

        var res = Module._Feature_FieldSetTime(this.handle, strField.getHandle(), arrayTime.getHandle());

        arrayTime.dispose();
        strField.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 已知字段为time类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Date} 返回Date类型字段值
     *
     */
    getTimeAt: function getTimeAt(fieldIndex) {
      var arrayFiled = new PIEArray(6, PIEArrayType.Int32);

      Module._Feature_GetTime(this.handle, fieldIndex, arrayFiled.getHandle());

      var dateArray = arrayFiled.toArray();
      var date = new Date(dateArray[0], dateArray[1], dateArray[2], dateArray[3], dateArray[4], dateArray[5]);
      arrayFiled.dispose();
      return date;
    },

    /**
     * 已知字段为time类型，根据字段名获取字段值
     *  @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Date} 返回Date类型字段值
     *
     */
    getTime: function getTime(fieldName) {
      if (fieldName != null) {
        var strFieldName = new PIEString$1(fieldName);
        var arrayTime = new PIEArray(6, PIEArrayType.Int32);

        Module._Feature_FieldGetTime(this.handle, strFieldName.getHandle(), arrayTime.getHandle());

        arrayTime.updateData();
        var dataTime = arrayTime.toArray();
        var date = new Date(dataTime[0], dataTime[1], dataTime[2], dataTime[3], dataTime[4], dataTime[5]);
        arrayTime.dispose();
        strFieldName.dispose();
        return date;
      }

      return null;
    },

    /**
     * 已知字段为Date类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Date} time -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setDateAt: function setDateAt(fieldIndex, time) {
      if (time instanceof Date) {
        var timeArray = [time.getFullYear(), time.getMonth(), time.getDate(), time.getHours(), time.getMinutes(), time.getSeconds()];
        var arrayTime = new PIEArray(timeArray, PIEArrayType.Int32);

        var res = Module._Feature_SetDate(this.handle, fieldIndex, arrayTime.getHandle());

        arrayTime.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 已知字段为date类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Date} time -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setDate: function setDate(fieldName, time) {
      if (time instanceof Date) {
        var timeArray = [time.getFullYear(), time.getMonth(), time.getDate(), time.getHours(), time.getMinutes(), time.getSeconds()];
        var strField = new PIEString$1(fieldName);
        var arrayTime = new PIEArray(timeArray, PIEArrayType.Int32);

        var res = Module._Feature_FieldSetDate(this.handle, strField.getHandle(), arrayTime.getHandle());

        arrayTime.dispose();
        strField.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 已知字段为date类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Date} 返回Date类型字段值
     *
     */
    getDateAt: function getDateAt(fieldIndex) {
      var arrayFiled = new PIEArray(6, PIEArrayType.Int32);

      Module._Feature_GetDate(this.handle, fieldIndex, arrayFiled.getHandle());

      var dateArray = arrayFiled.toArray();
      var date = new Date(dateArray[0], dateArray[1], dateArray[2], dateArray[3], dateArray[4], dateArray[5]);
      arrayFiled.dispose();
      return date;
    },

    /**
     * 已知字段为date类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Date} 返回Date类型字段值
     *
     */
    getDate: function getDate(fieldName) {
      if (fieldName != null) {
        var strFieldName = new PIEString$1(fieldName);
        var arrayTime = new PIEArray(6, PIEArrayType.Int32);

        Module._Feature_FieldGetDate(this.handle, strFieldName.getHandle(), arrayTime.getHandle());

        arrayTime.updateData();
        var dataTime = arrayTime.toArray();
        var date = new Date(dataTime[0], dataTime[1], dataTime[2], dataTime[3], dataTime[4], dataTime[5]);
        arrayTime.dispose();
        strFieldName.dispose();
        return date;
      }

      return null;
    },

    /**
     * 已知字段为binary类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {Array} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setBinaryAt: function setBinaryAt(fieldIndex, value) {
      var length = value.length;
      var strValue = new PIEArray(value, PIEArrayType.UInt8);

      var res = Module._Feature_SetBinary(this.handle, fieldIndex, strValue.getHandle(), length);

      strValue.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为binary类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {Array} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setBinary: function setBinary(fieldName, value) {
      if (fieldName != null && value != null) {
        var length = value.length;
        var strFieldName = new PIEString$1(fieldName);
        var strValue = new PIEArray(value, PIEArrayType.UInt8);

        var res = Module._Feature_FieldSetBinary(this.handle, strFieldName.getHandle(), strValue.getHandle(), length);

        strFieldName.dispose();
        strValue.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 已知字段为binary类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段序号
     * @memberOf Feature#
     * @returns {Array} 返回字段值
     *
     */
    getBinaryAt: function getBinaryAt(fieldIndex) {
      var arrValue = new PIEArray(1024, PIEArrayType.UInt8);

      Module._Feature_GetBinary(this.handle, fieldIndex, arrValue.getHandle());

      arrValue.updateData();
      var fieldData = arrValue.toArray();
      arrValue.dispose();
      return fieldData;
    },

    /**
     * 已知字段为binary类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {Array} 返回字段值
     *
     */
    getBinary: function getBinary(fieldName) {
      var strFieldName = new PIEString$1(fieldName);
      var arrValue = new PIEArray(1024, PIEArrayType.UInt8);

      Module._Feature_FieldGetBinary(this.handle, strFieldName.getHandle(), arrValue.getHandle());

      arrValue.updateData();
      strFieldName.dispose();
      var fieldData = arrValue.toArray();
      arrValue.dispose();
      return fieldData;
    },

    /**
     * 已知字段为string类型，根据字段序号设置字段值
     * @param {Number} fieldIndex -字段序号
     * @param {String} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setStringAt: function setStringAt(fieldIndex, value) {
      var strValue = new PIEString$1(value);

      var res = Module._Feature_SetString(this.handle, fieldIndex, strValue.getHandle());

      strValue.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为string类型，根据字段名设置字段值
     * @param {String} fieldName -字段名
     * @param {String} value -字段值
     * @memberOf Feature#
     * @returns {Boolean} 如果设置成功返回true，设置失败返回false
     *
     */
    setString: function setString(fieldName, value) {
      var strFieldName = new PIEString$1(fieldName);
      var strValue = new PIEString$1(value);

      var res = Module._Feature_FieldSetString(this.handle, strFieldName.getHandle(), strValue.getHandle());

      strFieldName.dispose();
      strValue.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为string类型，根据字段序号获取字段值
     * @param {Number} fieldIndex -字段符号
     * @memberOf Feature#
     * @returns {String} 返回string类型字段值
     *
     */
    getStringAt: function getStringAt(fieldIndex) {
      var strValue = new PIEString$1(16);

      Module._Feature_GetString(this.handle, fieldIndex, strValue.getHandle());

      var value = strValue.toString();
      strValue.dispose();
      return value;
    },

    /**
     * 已知字段为string类型，根据字段名获取字段值
     * @param {String} fieldName -字段名
     * @memberOf Feature#
     * @returns {String} 返回String类型字段值
     *
     */
    getString: function getString(fieldName) {
      var strFieldName = new PIEString$1(fieldName);
      var strValue = new PIEString$1(256);

      Module._Feature_FieldGetString(this.handle, strFieldName.getHandle(), strValue.getHandle());

      var value = strValue.toString();
      strValue.dispose();
      strFieldName.dispose();
      return value;
    },

    /**
     * 获取字段个数
     *
     * @memberOf Feature#
     * @returns {Number} 如果成功返回字段个数，否则返回0
     */
    getFieldCount: function getFieldCount() {
      return Module._Feature_GetFieldCount(this.handle);
    },

    /**
     * 根据索引获取数据集字段信息
     * @param {Number} index -字段索引
     * @memberOf Feature#
     * @returns {PIEFieldInfo} 返回字段信息对象
     */
    getFieldInfoAt: function getFieldInfoAt(index) {
      var handle = Module._Feature_GetFieldInfoAt(this.handle, index);

      var field = new PIEFieldInfo({
        handle: handle
      });
      return field;
    },

    /**
     * 生成JSON对象
     * @param {PIESpatialReference} spatialReference -坐标系统
     * @memberOf Feature#
     * @returns {Object} 返回JSON对象
     *
     */
    toGeoJSON: function toGeoJSON(spatialReference) {
      var properties = {};
      var fieldCount = this.getFieldCount();

      for (var i = 0; i < fieldCount; i++) {
        var fieldInfo = this.getFieldInfoAt(i);
        var name = fieldInfo.getFieldName();
        var value = "";

        if (fieldInfo.getFieldType() == PIE.FieldType.INT16) {
          value = this.getINT16(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.INT32) {
          value = this.getINT32(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.INT64) {
          value = this.getINT64(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.Text) {
          value = this.getString(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.Float) {
          value = this.getFloat(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.Double) {
          value = this.getDouble(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.Boolean) {
          value = this.getBool(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.Date) {
          value = this.getDate(name);
        } else if (fieldInfo.getFieldType() == PIE.FieldType.Time) {
          value = this.getTime(name);
        }

        properties[name] = value;
      }

      var geoPoints = [];

      if (this.getGeometry()) {
        var geometry = this.getGeometry();

        if (this.getGeometry().getType() == PIE.GeometryType.Point) {
          var point = geometry.getPoint();

          if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
            geoPoints.push(point.x);
            geoPoints.push(point.y);
          } else {
            var temppoint = spatialReference.inverse(point);
            geoPoints.push(temppoint.x);
            geoPoints.push(temppoint.y);
          }

          return {
            "type": "FeatureCollection",
            "features": [{
              "type": "Feature",
              "properties": properties,
              "geometry": {
                "type": "Point",
                "coordinates": geoPoints
              }
            }]
          };
        } else if (this.getGeometry().getType() == PIE.GeometryType.Line) {
          var subCount = geometry.getSubCount();

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var points = geometry.getPoints(subIndex);
            var subPointCount = geometry.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
              if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                var Point = [];
                Point.push(points[numIndex].x);
                Point.push(points[numIndex].y);
                geoPoints.push(Point);
              } else {
                var temppoint = spatialReference.inverse(points[numIndex]);
                var _Point = [];

                _Point.push(temppoint.x);

                _Point.push(temppoint.y);

                geoPoints.push(_Point);
              }
            }
          }

          return {
            "type": "FeatureCollection",
            "features": [{
              "type": "Feature",
              "properties": properties,
              "geometry": {
                "type": "LineString",
                "coordinates": geoPoints
              }
            }]
          };
        } else if (this.getGeometry().getType() == PIE.GeometryType.Region) {
          var subCount = geometry.getSubCount();
          var subpoint = [];

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var points = geometry.getPoints(subIndex);
            var subPointCount = geometry.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
              if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                var _Point2 = [];

                _Point2.push(points[numIndex].x);

                _Point2.push(points[numIndex].y);

                subpoint.push(_Point2);
              } else {
                var temppoint = spatialReference.inverse(points[numIndex]);
                var _Point3 = [];

                _Point3.push(temppoint.x);

                _Point3.push(temppoint.y);

                subpoint.push(_Point3);
              }
            }
          }

          geoPoints.push(subpoint);
          return {
            "type": "FeatureCollection",
            "features": [{
              "type": "Feature",
              "properties": properties,
              "geometry": {
                "type": "Polygon",
                "coordinates": geoPoints
              }
            }]
          };
        }

        if (this.getGeometry().getType() == PIE.GeometryType.Point3D) {
          var point = geometry.getPoint();

          if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
            geoPoints.push(point.x);
            geoPoints.push(point.y);
            geoPoints.push(point.z);
          } else {
            var pointsrc = [];
            pointsrc.push(point.x);
            pointsrc.push(point.y);
            var temppoint = spatialReference.inverse(pointsrc);
            geoPoints.push(temppoint[0]);
            geoPoints.push(temppoint[1]);
            geoPoints.push(point.z);
          }

          return {
            "type": "FeatureCollection",
            "features": [{
              "type": "Feature",
              "properties": properties,
              "geometry": {
                "type": "Point3D",
                "coordinates": geoPoints
              }
            }]
          };
        } else if (this.getGeometry().getType() == PIE.GeometryType.Line3D) {
          var subCount = geometry.getSubCount();

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var points = geometry.getPoints(subIndex);
            var subPointCount = geometry.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
              if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                var _Point4 = [];

                _Point4.push(points[numIndex].x);

                _Point4.push(points[numIndex].y);

                _Point4.push(points[numIndex].z);

                geoPoints.push(_Point4);
              } else {
                var temppoint = spatialReference.inverse(points[numIndex]);
                var _Point5 = [];

                _Point5.push(temppoint.x);

                _Point5.push(temppoint.y);

                _Point5.push(temppoint.z);

                geoPoints.push(_Point5);
              }
            }
          }

          return {
            "type": "FeatureCollection",
            "features": [{
              "type": "Feature",
              "properties": properties,
              "geometry": {
                "type": "LineString3D",
                "coordinates": geoPoints
              }
            }]
          };
        } else if (this.getGeometry().getType() == PIE.GeometryType.Region3D) {
          var subCount = geometry.getSubCount();
          var subpoint = [];

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var points = geometry.getPoints(subIndex);
            var subPointCount = geometry.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
              if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                var _Point6 = [];

                _Point6.push(points[numIndex].x);

                _Point6.push(points[numIndex].y);

                _Point6.push(points[numIndex].z);

                subpoint.push(_Point6);
              } else {
                var temppoint = spatialReference.inverse(points[numIndex]);
                var _Point7 = [];

                _Point7.push(temppoint.x);

                _Point7.push(temppoint.y);

                _Point7.push(temppoint.z);

                subpoint.push(_Point7);
              }
            }
          }

          geoPoints.push(subpoint);
          return {
            "type": "FeatureCollection",
            "features": [{
              "type": "Feature",
              "properties": properties,
              "geometry": {
                "type": "Polygon3D",
                "coordinates": geoPoints
              }
            }]
          };
        } else {
          return {
            "type": "Feature",
            "geometry": {
              "type": "UnKnow"
            }
          };
        }
      } else {
        return null;
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 矢量记录集操作函数
   * @name FeatureSet
   */

  function PIEFeatureSet(handle, autuRelease) {
    this.handle = handle;
    this.autoRelease = autuRelease;
  }

  Object.assign(PIEFeatureSet.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 判断当前记录指针是否指向记录集中最后一个记录之后
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果指向最后一条记录返回true，否则返回false
     */
    isEOF: function isEOF() {
      return Boolean(Module._FeatureSet_IsEOF(this.handle));
    },

    /**
     * 移动记录指针到第一条记录
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    moveFirst: function moveFirst() {
      return Boolean(Module._FeatureSet_MoveFirst(this.handle));
    },

    /**
     * 移动记录指针到下一条记录
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    moveNext: function moveNext() {
      return Boolean(Module._FeatureSet_MoveNext(this.handle));
    },

    /**
     * 移动记录指针到末尾记录
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    moveLast: function moveLast() {
      return Boolean(Module._FeatureSet_MoveLast(this.handle));
    },

    /**
     * 移动记录指针到指定位置
     * @param {Number} row -记录集行号
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    moveTo: function moveTo(row) {
      return Boolean(Module._FeatureSet_MoveTo(this.handle, row));
    },

    /**
     * 获取记录个数
     *
     * @memberOf FeatureSet#
     * @returns {Number} 成功返回记录集个数，否则返回0
     */
    getFeatureCount: function getFeatureCount() {
      return Module._FeatureSet_GetFeatureCount(this.handle);
    },

    /**
     * 获取当前记录的ID
     *
     * @memberOf FeatureSet#
     * @returns {Number} 成功返回当前记录的ID
     */
    getID: function getID() {
      return Module._FeatureSet_GetID(this.handle);
    },

    /**
     * 获取当前记录的几何对象
     *
     * @memberOf FeatureSet#
     * @returns {PIEGeometry} 如果成功返回几何对象，否则返回NULL
     */
    getGeometry: function getGeometry() {
      var handle = Module._FeatureSet_GetGeometry(this.handle);

      if (handle) {
        return PIEGeometryFactory.CreateInstance(handle);
      }

      return null;
    },

    /**
     * 设置当前记录的几何对象
     * @param {PIEGeometry} geometry -几何对象
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setGeometry: function setGeometry(geometry) {
      return Boolean(Module._FeatureSet_SetGeometry(this.handle, geometry.getHandle()));
    },

    /**
     * 添加几何对象
     * @param {PIEGeometry} geometry -几何对象
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    addNew: function addNew(geometry) {
      return Boolean(Module._FeatureSet_AddNew(this.handle, geometry.getHandle()));
    },

    /**
     * 删除当前记录
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    "delete": function _delete() {
      return Boolean(Module._FeatureSet_Delete(this.handle));
    },

    /**
     * 删除所有记录
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    deleteAll: function deleteAll() {
      return Boolean(Module._FeatureSet_DeleteAll(this.handle));
    },

    /**
     * 开始编辑
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    edit: function edit() {
      return Boolean(Module._FeatureSet_Edit(this.handle));
    },
    // /**
    //  * 开始编辑，批量更新
    //  * @param {Boolean} editBulkPoerate -是否批量更新
    //  *
    //  * @memberOf FeatureSet#
    //  * @returns {Boolean} 如果成功返回true，否则返回false
    //  */
    // editBulk: function (editBulkPoerate) {
    //     return Module._FeatureSet_EditBulk(this.handle, editBulkPoerate);
    // },

    /**
     * 提交更新
     *
     * @memberOf FeatureSet#
     * @returns {Number} 如果成功则返回更新对象的ID，否则返回0
     */
    update: function update() {
      return Module._FeatureSet_Update(this.handle);
    },

    /**
     * 获取要素集对应的数据集
     *
     * @memberOf FeatureSet#
     * @returns {PIEFeatureDataset} 如果成功则返回数据集对象，否则返回NULL
     */
    getDataset: function getDataset() {
      var hDataset = Module._FeatureSet_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(hDataset);
    },

    /**
     * 获取数据集中某行特征要素
     *
     * @memberOf FeatureSet#
     * @returns {PIEFeature} 如果成功则返回要素对象，否则返回NULL
     */
    getFeature: function getFeature() {
      var handle = Module._FeatureSet_GetFeature(this.handle);

      if (handle) {
        return new PIEFeature(handle);
      }

      return null;
    },

    /**
     * 获取字段个数
     *
     * @memberOf FeatureSet#
     * @returns {Number} 如果成功返回字段个数，否则返回0
     */
    getFieldCount: function getFieldCount() {
      return Module._FeatureSet_GetFieldCount(this.handle);
    },

    /**
     * 已知字段为bool类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 字段值为真返回true，为假返回false
     */
    getFieldValueBool: function getFieldValueBool(name) {
      var strName = new PIEString$1(name);

      var value = Module._FeatureSet_GetFieldValueBool(this.handle, strName.getHandle());

      strName.dispose();
      return Boolean(value);
    },

    /**
     * 已知字段为bool类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Boolean} val -字段值，默认为false
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueBool: function setFieldValueBool(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueBool(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为Byte类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Number} 返回Byte型字段值
     */
    getFieldValueByte: function getFieldValueByte(name) {
      var strName = new PIEString$1(name);

      var FieldValue = Module._FeatureSet_GetFieldValueByte(this.handle, strName.getHandle());

      strName.dispose();
      return FieldValue;
    },

    /**
     * 已知字段为Byte类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Number} val -字段值，默认为0
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueByte: function setFieldValueByte(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueByte(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为int16类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Number} 返回int型字段值
     */
    getFieldValueInt16: function getFieldValueInt16(name) {
      var strName = new PIEString$1(name);

      var value = Module._FeatureSet_GetFieldValueInt16(this.handle, strName.getHandle());

      strName.dispose();
      return value;
    },

    /**
     * 已知字段为int16类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Number} val -字段值，默认为0
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueInt16: function setFieldValueInt16(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueInt16(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为int32类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Number} 返回int型字段值
     */
    getFieldValueInt32: function getFieldValueInt32(name) {
      var strName = new PIEString$1(name);

      var FieldValue = Module._FeatureSet_GetFieldValueInt32(this.handle, strName.getHandle());

      strName.dispose();
      return FieldValue;
    },

    /**
     * 已知字段为int32类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Number} val -字段值，默认为0
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueInt32: function setFieldValueInt32(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueInt32(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为long类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Number} 返回long型字段值
     */
    getFieldValueInt64: function getFieldValueInt64(name) {
      var strName = new PIEString$1(name);

      var value = Module._FeatureSet_GetFieldValueInt64(this.handle, strName.getHandle());

      strName.dispose();
      return value;
    },

    /**
     * 已知字段为long类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Number} val -字段值，默认为0
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueInt64: function setFieldValueInt64(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueInt64(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为double类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Number} 返回double型字段值
     */
    getFieldValueDouble: function getFieldValueDouble(name) {
      var strName = new PIEString$1(name);

      var value = Module._FeatureSet_GetFieldValueDouble(this.handle, strName.getHandle());

      strName.dispose();
      return value;
    },

    /**
     * 已知字段为double类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Number} val -字段值，默认为false
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueDouble: function setFieldValueDouble(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueDouble(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为float类型，根据字段名获取字段值
     * @param {String} name -字段名称
     *
     * @memberOf FeatureSet#
     * @returns {Number} 返回float型字段值
     */
    getFieldValueFloat: function getFieldValueFloat(name) {
      var strName = new PIEString$1(name);

      var value = Module._FeatureSet_GetFieldValueFloat(this.handle, strName.getHandle());

      strName.dispose();
      return value;
    },

    /**
     * 已知字段为float类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {Number} val -字段值，默认为0
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueFloat: function setFieldValueFloat(name, val) {
      var strName = new PIEString$1(name);

      var res = Module._FeatureSet_SetFieldValueFloat(this.handle, strName.getHandle(), val);

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 已知字段为string类型，根据字段名获取字段值
     * @param {String} name -字段名称
     * @param {Number} length -字段值长度(非必填项，默认为512，如果字段值长度大于512，可以进行传参说明)
     * @memberOf FeatureSet#
     * @returns {String} 字段值为真返回true，为假返回false
     */
    getFieldValueString: function getFieldValueString(name, length) {
      if (!length) {
        length = 512;
      }

      var strName = new PIEString$1(name);
      var Name = new PIEString$1(length);

      Module._FeatureSet_GetFieldValueString(this.handle, strName.getHandle(), Name.getHandle());

      var FieldValue = Name.toString();
      Name.dispose();
      strName.dispose();
      return FieldValue;
    },

    /**
     * 已知字段为string类型，根据字段名设置字段值
     * @param {String} name -字段名称
     * @param {String} val -字段值
     *
     * @memberOf FeatureSet#
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    setFieldValueString: function setFieldValueString(name, val) {
      var strName = new PIEString$1(name);
      var strVal = new PIEString$1(val);

      var res = Module._FeatureSet_SetFieldValueString(this.handle, strName.getHandle(), strVal.getHandle());

      strName.dispose();
      strVal.dispose();
      return Boolean(res);
    },
    fromGeojson: function fromGeojson(featureSetGeojson) {
      var geometryJson = featureSetGeojson.geometry;
      var coordinates = geometryJson.coordinates;
      var type = geometryJson.type;
      var bAddSucceed = false;
      var id = featureSetGeojson.id;
      this.editBulk(true);

      if (type == "Point") {
        var pointGeo = new PIE.Point({
          point: coordinates
        });
        pointGeo.setID(id);
        bAddSucceed = this.addNew(pointGeo);
        this.getGeometry();
        var id = pointGeo.getID();
      } else if (type == "Line") {
        var lineGeo = new PIE.polyline({
          point: coordinates
        });
        lineGeo.setID(id);
        bAddSucceed = this.addNew(lineGeo);
      } else if (type == "Region") {
        var regoinGeo = new PIE.Polygon({
          point: coordinates
        });
        regoinGeo.setID(id);
        bAddSucceed = this.addNew(regoinGeo);
      } else if (type == "Point3D") {
        var pointGeo3D = new PIE.Point3D({
          point: coordinates
        });
        pointGeo3D.setID(id);
        bAddSucceed = this.addNew(pointGeo3D);
      } else if (type == "Line3D") {
        var lineGeo3D = new PIE.polyline3D({
          point: coordinates
        });
        lineGeo3D.setID(id);
        bAddSucceed = this.addNew(lineGeo3D);
      } else if (type == "Region3D") {
        var regionGeo3D = new PIE.polyline3D({
          point: coordinates
        });
        regionGeo3D.setID(id);
        bAddSucceed = this.addNew(regionGeo3D);
      }

      if (bAddSucceed) {
        var featureDataset = this.getDataset();

        if (featureDataset) {
          var fieldCount = featureDataset.getFieldCount();
          var properties = featureSetGeojson.properties;

          for (var propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {
            this.edit();

            for (var i = 0; i < fieldCount; i++) {
              var fieldInfo = featureDataset.getFieldInfoAt(i);
              var fieldName = fieldInfo.getFieldName();
              var fieldType = fieldInfo.getFieldType();

              if (fieldName == properties[propertyIndex].name) {
                if (fieldType == PIE.FieldType.INT16) {
                  this.setFieldValueInt16(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.INT32) {
                  this.setFieldValueInt32(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.INT64) {
                  this.setFieldValueInt64(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.Text) {
                  this.setFieldValueString(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.Boolean) {
                  this.setFieldValueBool(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.Float) {
                  this.setFieldValueFloat(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.Double) {
                  this.setFieldValueDouble(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.Date) {
                  this.setFieldValueString(fieldName, properties[propertyIndex].value);
                } else if (fieldType == PIE.FieldType.Time) {
                  this.setFieldValueString(fieldName, properties[propertyIndex].value);
                }
              }
            }

            this.update();
          }
        }
      }

      this.update();
      this.editBulk(false);
    },
    toGeojson: function toGeojson(spatialReference) {
      var feature = {
        "type": "Feature"
      };
      var properties = {};
      var id = this.getID();
      feature.id = id;
      var featureDataset = this.getDataset();

      if (featureDataset) {
        var fieldCount = featureDataset.getFieldCount();

        for (var i = 0; i < fieldCount; i++) {
          var fieldInfo = featureDataset.getFieldInfoAt(i);
          var name = fieldInfo.getFieldName();
          var value = "";
          fieldInfo.getFieldType();

          if (fieldInfo.getFieldType() == PIE.FieldType.INT16) {
            value = this.getFieldValueInt16(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.INT32) {
            value = this.getFieldValueInt32(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.INT64) {
            value = this.getFieldValueInt64(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.Text) {
            value = this.getFieldValueString(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.Float) {
            value = this.getFieldValueFloat(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.Double) {
            value = this.getFieldValueDouble(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.Boolean) {
            value = this.getFieldValueBool(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.Date) {
            value = this.getFieldValueString(name);
          } else if (fieldInfo.getFieldType() == PIE.FieldType.Time) {
            value = this.getFieldValueString(name);
          }

          properties[name] = value;
        }

        feature.properties = properties;
      }

      var coordinates = [];

      if (this.getGeometry()) {
        this.getGeometry().getType();
        var geometry = {};

        if (this.getGeometry().getType() == PIE.GeometryType.Point) {
          geometry.type = "Point";
          var pointGeo = this.getGeometry();
          var point = pointGeo.getPoint();

          if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
            coordinates.push(point.x);
            coordinates.push(point.y);
          } else {
            var temppoint = spatialReference.inverse(point);
            coordinates.push(temppoint.x);
            coordinates.push(temppoint.y);
          }

          geometry.coordinates = coordinates;
        } else if (this.getGeometry().getType() == PIE.GeometryType.Line) {
          geometry.type = "LineString";
          var polyLine = this.getGeometry();
          var subCount = polyLine.getSubCount();

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var points = polyLine.getPoints(subIndex);
            var subPointCount = polyLine.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
              if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                var Point = [];
                Point.push(points[numIndex].x);
                Point.push(points[numIndex].y);
                coordinates.push(Point);
              } else {
                var temppoint = spatialReference.inverse(points[numIndex]);
                var _Point = [];

                _Point.push(temppoint.x);

                _Point.push(temppoint.y);

                coordinates.push(_Point);
              }
            }
          }

          geometry.coordinates = coordinates;
        } else if (this.getGeometry().getType() == PIE.GeometryType.Region) {
          var polygon = this.getGeometry();
          var subCount = polygon.getSubCount();

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var points = polygon.getPoints(subIndex);
            var subPointCount = polygon.getSubPointCount(subIndex);
            var subpoint = [];

            for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
              if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                var _Point2 = [];

                _Point2.push(points[numIndex].x);

                _Point2.push(points[numIndex].y);

                subpoint.push(_Point2);
              } else {
                var temppoint = spatialReference.inverse(points[numIndex]);
                var _Point3 = [];

                _Point3.push(temppoint.x);

                _Point3.push(temppoint.y);

                subpoint.push(_Point3);
              }
            }

            coordinates.push(subpoint);
          }

          geometry.type = "Polygon";
          geometry.coordinates = coordinates;
        } else if (this.getGeometry().getType() == PIE.GeometryType.MultiRegion) {
          geometry.type = "MultiPolygon";
          var fluag = 0;
          var Multipoint = [];
          var MultiRegion = this.getGeometry();
          var PolygonCount = MultiRegion.getPolygonCount();

          for (var PolygonIndex = 0; PolygonIndex < PolygonCount; PolygonIndex++) {
            var PolygonSubCount = MultiRegion.getSubCount(PolygonIndex);

            for (var SubIndex = 0; SubIndex < PolygonSubCount; SubIndex++) {
              var subpoint = [];
              var subpoints = MultiRegion.getPoints(PolygonIndex, SubIndex);
              var subPointCount = MultiRegion.getSubPntCount(PolygonIndex, SubIndex);

              for (var numIndex = 0; numIndex < subPointCount; numIndex++) {
                if (spatialReference == null || spatialReference.getType() == PIE.SpatialRefType.GEOGRAPHIC) {
                  var _Point4 = [];

                  _Point4.push(subpoints[numIndex].x);

                  _Point4.push(subpoints[numIndex].y);

                  subpoint.push(_Point4);
                } else {
                  var temppoint = spatialReference.inverse(points[numIndex]);
                  var _Point5 = [];

                  _Point5.push(temppoint.x);

                  _Point5.push(temppoint.y);

                  subpoint.push(_Point5);
                }
              }

              Multipoint.push(subpoint);

              if (PolygonSubCount > 1) {
                var result = MultiRegion.checkSubPolygon(PolygonIndex, SubIndex);

                if (result) {
                  fluag = 1;
                }
              }
            }
          }

          if (fluag) {
            coordinates.push(Multipoint);
          } else {
            for (var i = 0; i < Multipoint.length; i++) {
              var temppoint = [];
              temppoint.push(Multipoint[i]);
              coordinates.push(temppoint);
            }
          }

          geometry.coordinates = coordinates;
        } else if (this.getGeometry().getType() == PIE.GeometryType.Point3D) {
          geometry.type = "Point3D";
          var pointGeo3D = this.getGeometry();
          var point = pointGeo3D.getPoint();
          coordinates.push(point.x);
          coordinates.push(point.y);
          coordinates.push(point.z);
          geometry.coordinates = coordinates;
        } else if (this.getGeometry().getType() == PIE.GeometryType.Line3D) {
          geometry.type = "Line3D";
          var polyLine = this.getGeometry();
          var subCount = polyLine.getSubCount();

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var subPoints = [];
            var points = polyLine.getPoints(subIndex);
            var subPointCount = polyLine.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount * 3; numIndex++) {
              subPoints.push(points[numIndex]);
            }

            coordinates.push(subPoints);
          }

          geometry.coordinates = coordinates;
        } else if (this.getGeometry().getType() == PIE.GeometryType.Region3D) {
          geometry.type = "Region3D";
          var polygon = this.getGeometry();
          var subCount = polygon.getSubCount();

          for (var subIndex = 0; subIndex < subCount; subIndex++) {
            var subPoints = [];
            var points = polygon.getPoints(subIndex);
            var subPointCount = polygon.getSubPointCount(subIndex);

            for (var numIndex = 0; numIndex < subPointCount * 3; numIndex++) {
              subPoints.push(points[numIndex]);
            }

            coordinates.push(subPoints);
          }

          geometry.coordinates = coordinates;
        } else {
          geometry.type = "UnKnow";
        }

        feature.geometry = geometry;
      }

      return feature;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 矢量数据集操作函数
   * @name FeatureDataset
   *
   * @extends Dataset
   */

  function PIEFeatureDataset(handle, autoRelease) {
    PIEDataset.call(this, handle, autoRelease);
  }

  PIEFeatureDataset.prototype = Object.assign(Object.create(PIEDataset.prototype), {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 获取数据集中要素对象个数
     *
     * @memberOf FeatureDataset#
     * @returns {Number} 返回对象个数
     */
    getObjectCount: function getObjectCount() {
      return Module._FDataset_GetObjectCount(this.handle);
    },

    /**
     * 获取数据集中字段个数
     *
     * @memberOf FeatureDataset#
     * @returns {Number} 返回字段个数
     */
    getFieldCount: function getFieldCount() {
      return Module._FDataset_GetFieldCount(this.handle);
    },

    /**
     * 根据索引获取数据集字段信息
     * @param {Number} index -字段索引
     * @memberOf FeatureDataset#
     * @returns {PIEFieldInfo} 返回字段信息对象(返回的是目标字段对象的拷贝，使用完成需要调用dispose自行释放，否则会造成内存泄漏)
     */
    getFieldInfoAt: function getFieldInfoAt(index) {
      var handle = Module._FDataset_GetFieldInfoAt(this.handle, index);

      var field = new PIEFieldInfo({
        handle: handle
      });
      return field;
    },

    /**
     * 创建数据集字段
     * @param {PIEFieldInfo} field -字段信息对象
     * @memberOf FeatureDataset#
     * @returns {Boolean} 返回创建是否成功(字段存在返回false，内部会进行拷贝，field需要自行释放）
     */
    createField: function createField(field) {
      return Boolean(Module._FDataset_CreateField(this.handle, field.getHandle()));
    },

    /**
     * 通过数据集字段名删除数据集字段
     * @param {String} name -字段名称
     *
     * @memberOf FeatureDataset#
     * @returns {Boolean} 如果删除成功返回true，否则返回false
     */
    deleteField: function deleteField(name) {
      var strName = new PIEString$1(name);

      var res = Module._FDataset_DeleteField(this.handle, strName.getHandle());

      strName.dispose();
      return Boolean(res);
    },

    /**
     * 通过数据集字段索引删除数据集字段
     * @param {Number} index -索引值
     *
     * @memberOf FeatureDataset#
     * @returns {Boolean} 如果删除成功返回true，否则返回false
     */
    deleteFieldByIndex: function deleteFieldByIndex(index) {
      return Boolean(Module._FDataset_DeleteField(this.handle, index));
    },

    /**
     * 通过指定ID数组查询要素集
     * @param {Array} IDs -查询时的ID数组
     *
     * @memberOf FeatureDataset#
     * @returns {PIEFeatureSet} 如果查询成功返回要素集对象，否则返回null
     */
    queryByIDs: function queryByIDs(IDs) {
      var ArrayIDs = new PIEArray(IDs, PIEArrayType.Int32);

      var res = Module._FDataset_QueryByID(this.handle, ArrayIDs.getHandle(), IDs.length);

      ArrayIDs.dispose();

      if (res) {
        return new PIEFeatureSet(res, true);
      }

      return null;
    },

    /**
     * 通过属性数据查询条件查询要素集
     * @param {String} filter -属性数据查询条件
     *
     * @memberOf FeatureDataset#
     * @returns {PIEFeatureSet} 如果查询成功返回要素集对象，否则返回null
     */
    queryByGeneral: function queryByGeneral(filter) {
      var strFilter = new PIEString$1(filter);

      var res = Module._FDataset_QueryByGeneral(this.handle, strFilter.getHandle());

      strFilter.dispose();

      if (res) {
        return new PIEFeatureSet(res, true);
      }

      return null;
    },

    /**
     * 通过数据范围查询要素集
     * @param {(PIEBounds/Array)} bounds -范围对象(支持数组)
     *
     * @memberOf FeatureDataset#
     * @returns {PIEFeatureSet} 如果查询成功返回要素集对象，否则返回null
     */
    queryByBounds: function queryByBounds(bounds) {
      var bbox = [];

      if (bounds instanceof PIEBounds) {
        bbox = bounds.toArray();
      } else if (bounds instanceof Array) {
        bbox = bounds;
      }

      var handle = Module._FDataset_QueryByBounds(this.handle, bbox[0], bbox[1], bbox[2], bbox[3]);

      if (handle) {
        return new PIEFeatureSet(handle);
      }

      return null;
    },

    /**
     * 通过要素集对象释放要素集内存空间
     * @param {PIEFeatureSet} featureSet -矢量要素集对象
     *
     * @memberOf FeatureDataset#
     * @returns {Boolean} 如果释放成功返回true，否则返回false
     */
    releaseFeatureSet: function releaseFeatureSet(featureSet) {
      return Boolean(Module._FDataset_ReleaseFeatureSet(this.handle, featureSet.getHandle()));
    },

    /**
     * 根据索引设置数据集字段别名
     * @param {Number} index -索引值
     * @param {String} name -字段别名
     *
     * @memberOf FeatureDataset#
     * @returns {Boolean} 如果设置成功返回true，否则返回false
     */
    setFieldForignNameAt: function setFieldForignNameAt(index, name) {
      var strName = new PIEString$1(name);

      var res = Module._FDataset_SetFieldForignNameAt(this.handle, index, strName.getHandle());

      strName.dispose();
      return Boolean(res);
    },
    // /**
    //  * 同一参考系正转换(椭球体相同，地理坐标到投影坐标)
    //  * @param {PIESpatialReference} spatialReference -空间参考坐标系
    //  *
    //  * @memberOf FeatureDataset#
    //  * @returns {Boolean} 如果转换成功返回true，否则返回false
    //  */
    forWard: function forWard(spatialReference) {
      return Boolean(Module._FDataset_PJForward(this.handle, spatialReference.getHandle()));
    },
    // /**
    //  * 同一参考系反转换(椭球体相同，投影坐标到地理坐标)
    //  * @param {PIESpatialReference} spatialReference -空间参考坐标系
    //  *
    //  * @memberOf FeatureDataset#
    //  * @returns {Boolean} 如果转换成功返回true，否则返回false
    //  */
    inverse: function inverse(spatialReference) {
      return Boolean(Module._FDataset_PJInverse(this.handle, spatialReference.getHandle()));
    },
    // /**
    //  * 不同空间参考系转换
    //  * @param {PIEReferenceTranslator} refTranslator -参考系转换器
    //  *
    //  * @memberOf FeatureDataset#
    //  * @returns {Boolean} 如果转换成功返回true，否则返回false
    //  */
    convert: function convert(refTranslator) {
      return Module._FDataset_PJConvert(this.handle, refTranslator.getHandle());
    },

    /**
     * 获取空间参考系对象
     *
     * @memberOf FeatureDataset#
     * @returns {PIESpatialReference} 如果获取成功返回空间参考系对象，否则返回null
     */
    getSpatialReference: function getSpatialReference() {
      var handle = Module._FDataset_GetSpatialReference(this.handle);

      if (handle) {
        return new PIESpatialReference(handle);
      }

      return null;
    },
    //暂时注释
    // /**
    //  * 建立空间索引
    //  *
    //  * @memberOf FeatureDataset#
    //  * @returns {Boolean} 如果索引创建成功返回true，否则返回false
    //  */
    // buildSpatialIndex: function () {
    //     return Module._FDataset_BuildSpatialIndex(this.handle);
    // },
    //暂时注释
    // /**
    //  * 删除空间索引
    //  *
    //  * @memberOf FeatureDataset#
    //  * @returns {Boolean} 返回空间索引删除是否成功(删除成功返回true，否则返回false)
    //  */
    // dropSpatialIndex: function () {
    //     return Module._FDataset_DropSpatialIndex(this.handle);
    // },

    /**
     * 返回数据集字符编码方式
     * @memberOf FeatureDataset#
     * @returns {PIECharsetType} 返回数据集字符编码方式
     */
    getCharset: function getCharset() {
      return Module._FDataset_GetCharset(this.handle);
    },

    /**
     * 设置数据集字符编码方式
     * @param {PIECharsetType} charset -字符编码方式
     * @memberOf FeatureDataset#
     * @returns {Boolean} 设置成功返回true，否则返回false
     */
    setCharset: function setCharset(charset) {
      return Boolean(Module._FDataset_SetCharset(this.handle, charset));
    },
    fromGeojson: function fromGeojson(featureDatasetjson) {
      var featureSet = this.queryByGeneral("");
      featureSet.deleteAll();
      featureSet.editBulk(true);
      var features = featureDatasetjson.features;

      for (var featureIndex = 0; featureIndex < features.length; featureIndex++) {
        featureSet.edit();
        featureSet.fromGeojson(features[featureIndex]);
        featureSet.update();
      }

      featureSet.update();
      featureSet.editBulk(false);
      return featureSet;
    },
    toGeojson: function toGeojson() {
      var featureSet = this.queryByGeneral("");
      var featureDataset = {
        "type": "FeatureCollection"
      };
      var features = [];
      featureSet.moveFirst();

      while (!featureSet.isEOF()) {
        var featureGeojson = featureSet.toGeojson();
        features.push(featureGeojson);
        featureSet.moveNext();
      }

      featureDataset.features = features;
      return featureDataset;
    }
  });

  /**
   * 栅格数据集对象
   * @name RasterDataset
   * @extends Dataset
   */

  function PIERasterDataset(handle) {
    PIEDataset.call(this, handle);
  }

  PIERasterDataset.prototype = Object.assign(Object.create(PIEDataset.prototype), {
    /**
     * 获取栅格数据集图像宽度
     * @memberOf RasterDataset#
     * @returns {Number} 返回图像宽度
     */
    getWidth: function getWidth() {
      return Module._RDataset_GetWidth(this.handle);
    },

    /**
     * 获取栅格数据集图像高度
     * @memberOf RasterDataset#
     * @returns {Number} 返回图像高度
     */
    getHeight: function getHeight() {
      return Module._RDataset_GetHeight(this.handle);
    },

    /**
     * 获取波段数
     * @memberOf RasterDataset#
     * @returns {Number} 返回波段数
     */
    getBandCount: function getBandCount() {
      return Module._RDataset_GetBandCount(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 模型数据集操作函数
   * @name ModelDataset
   *@extends Dataset
   *
   */

  function PIEModelDataset(handle) {
    PIEDataset.call(this, handle);
  }

  PIEModelDataset.prototype = Object.assign(Object.create(PIEDataset.prototype), {
    /**
     * 设置OSGB数据集坐标
     * @param {(Array/PIEVector3)} position -坐标
     * @memberOf ModelDataset#
     */
    setPosition: function setPosition(position) {
      var array = null;

      if (position instanceof PIEVector3) {
        array = position.toArray();
      } else if (position instanceof Array) {
        array = position;
      }

      if (array) {
        var positionArray = new PIEArray(array, PIEArrayType.Float64);

        Module._MDataset_SetPosition(this.handle, positionArray.getHandle());

        positionArray.dispose();
      }
    },

    /**
     * 获取OSGB数据集坐标
     * @returns {PIEVector3} 返回数据集坐标
     *
     * @memberOf ModelDataset#
     */
    getPosition: function getPosition() {
      var positionArray = new PIEArray(3, PIEArrayType.Float64);

      Module._MDataset_GetPosition(this.handle, positionArray.getHandle());

      positionArray.updateData();
      var position = positionArray.toArray();
      positionArray.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 设置OSGB数据集高度
     * @param {Number} height -高度
     * @memberOf ModelDataset#
     */
    setHeight: function setHeight(height) {
      var position = this.getPosition();
      this.setPosition([position.x, position.y, height]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * GE数据集操作函数
   * @name GEDataset
   *@extends Dataset
   *
   */

  function PIEGEDataset(handle) {
    PIEDataset.call(this, handle);
  }

  PIEGEDataset.prototype = Object.assign(Object.create(PIEDataset.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * Mapbox矢量瓦片数据集操作函数
   * @name MVTDataset
   *@extends Dataset
   *
   */

  function PIEMVTDataset(handle) {
    PIEDataset.call(this, handle);
  }

  PIEMVTDataset.prototype = Object.assign(Object.create(PIEDataset.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * Tiles3D数据集操作函数
   * @name Tiles3DDataset
   * @extends ModelDataset
   *
   */

  function PIETiles3DDataset(handle) {
    PIEModelDataset.call(this, handle);
  }

  PIETiles3DDataset.prototype = Object.assign(Object.create(PIEModelDataset.prototype), {});

  function PIEDatasetFactory() {}

  Object.assign(PIEDatasetFactory.prototype, {});

  PIEDatasetFactory.CreateInstance = function (hDataset) {
    var datasetType = Module._Dataset_GetType(hDataset);

    if (datasetType == PIEDatasetType.Raster) {
      return new PIERasterDataset(hDataset);
    } else if (datasetType == PIEDatasetType.Model) {
      return new PIEModelDataset(hDataset);
    } else if (datasetType == PIEDatasetType.Tiles3D) {
      return new PIETiles3DDataset(hDataset);
    } else if (datasetType == PIEDatasetType.GEDataModel) {
      return new PIEGEDataset(hDataset);
    } else if (datasetType == PIEDatasetType.Point || datasetType == PIEDatasetType.Line || datasetType == PIEDatasetType.LineM || datasetType == PIEDatasetType.Region || datasetType == PIEDatasetType.Text || datasetType == PIEDatasetType.Complex || datasetType == PIEDatasetType.Attribute) {
      return new PIEFeatureDataset(hDataset);
    } else if (datasetType == PIEDatasetType.MVT) {
      return new PIEMVTDataset(hDataset);
    }

    return null;
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 数据源操作函数
   * @name DataSource
   */

  function PIEDataSource(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEDataSource.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 删除数据源
     *
     * @memberOf DataSource#
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._DataSource_Close(this.handle);

        Module._DataSource_Delete(this.handle);
      }

      this.handle = null;
    },
    //父类不开放Create接口
    // /**
    //  * 通过文件路径新建数据源
    //  * @param {Object} options -
    //  * @param {String} options.database -数据源
    //  * @param {String} options.server -数据源的服务地址
    //  *
    //  * @memberOf DataSource#
    //  *
    //  * @returns {Boolean} 如果创建成功返回true，否则返回false
    //  */
    // create: function (options) {
    //     if (options != null) {
    //         if (this.handle == null && options.database != null) {
    //             var strPath = new PIEString(options.database);
    //             this.handle = Module._DataSource_Create(strPath.getHandle());
    //             strPath.dispose();
    //         }
    //         if (this.handle != null && options.server != null) {
    //             var strServer = new PIEString(options.server);
    //             Module._DataSource_SetServer(this.handle, strServer.getHandle());
    //             strServer.dispose();
    //         }
    //         this.autoRelease = true;
    //     }
    //     return this.handle != null;
    // },

    /**
     * 通过数据源路径打开数据源
     * @param {Object} options -
     * @param {String} options.database -数据源
     * @param {String} options.server -数据源的服务地址
     * @param {String} options.alias -数据源别名
     *
     * @memberOf DataSource#
     * @returns {Boolean} 如果打开成功返回true，否则返回false
     *
     */
    open: function open(options) {
      if (options != null) {
        if (this.handle == null && options.database != null) {
          var strPath = new PIEString$1(options.database);
          this.handle = Module._DataSource_Open(strPath.getHandle());
          strPath.dispose();
        }

        if (this.handle && options.server != null) {
          var strServer = new PIEString$1(options.server);

          Module._DataSource_SetServer(this.handle, strServer.getHandle());

          strServer.dispose();
        }

        if (this.handle && options.alias != null) {
          var strAlias = new PIEString$1(options.alias);

          Module._DataSource_SetAlias(this.handle, strAlias.getHandle());

          strAlias.dispose();
        }

        this.autoRelease = true;
      }

      return Boolean(this.handle);
    },

    /**
     * 判断数据源是否打开
     *
     * @memberOf DataSource#
     * @returns {Boolean} 如果已经打开返回true，否则返回false
     */
    isOpen: function isOpen() {
      return Boolean(Module._DataSource_IsOpen(this.handle));
    },

    /**
     * 关闭数据源
     *
     * @memberOf DataSource#
     */
    close: function close() {
      Module._DataSource_Close(this.handle);
    },

    /**
     * 获取数据源类型
     *
     * @memberOf DataSource#
     * @return {String} 返回数据源类型
     */
    getType: function getType() {
      var strType = new PIEString$1(256);

      Module._DataSource_GetType(this.handle, strType.getHandle());

      var type = strType.toString();
      strType.dispose();
      return type;
    },

    /**
     * 获取数据源名称
     *
     * @memberOf DataSource#
     * @return {String} 返回数据源名称
     */
    getName: function getName() {
      var strName = new PIEString$1(512);

      Module._DataSource_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 获取数据源别名
     *
     * @memberOf DataSource#
     * @return {String} 返回数据源别名
     */
    getAlias: function getAlias() {
      var strAlias = new PIEString$1(256);

      Module._DataSource_GetAlias(this.handle, strAlias.getHandle());

      var alias = strAlias.toString();
      strAlias.dispose();
      return alias;
    },

    /**
     * 设置数据源别名
     * @param {String} alias -数据源别名
     *
     * @memberOf DataSource#
     */
    setAlias: function setAlias(alias) {
      var strAlias = new PIEString$1(alias);

      Module._DataSource_SetAlias(this.handle, strAlias.getHandle());

      strAlias.dispose();
    },
    // /**
    //  * 设置数据源服务地址
    //  * @param {String} server -新设置数据源服务地址
    //  * @memberOf DataSource#
    //  *
    //  */
    setServer: function setServer(server) {
      var strServer = new PIEString$1(server);

      Module._DataSource_SetServer(this.handle, strServer.getHandle());

      strServer.dispose();
    },

    /**
     * 获取数据集（一般数据源只有一个数据集，所有提供此接口方便使用）
     * @memberOf DataSource#
     * @returns {PIEDataset} 如果获取成功返回数据集对象，否则返回NULL
     */
    getDataset: function getDataset() {
      var hDataset = Module._DataSource_GetDatasetAt(this.handle, 0);

      if (hDataset) {
        return PIEDatasetFactory.CreateInstance(hDataset);
      }

      return null;
    },

    /**
     * 获取数据源中数据集的个数
     *
     * @memberOf DataSource#
     * @returns {Number} 返回数据源中数据集的个数
     */
    getDatasetCount: function getDatasetCount() {
      return Module._DataSource_GetDatasetCount(this.handle);
    },

    /**
     * 通过数据集名称获取数据集
     * @param {String} name -数据集名称
     *
     * @memberOf DataSource#
     * @returns {PIEDataset} 如果获取成功返回数据集对象，否则返回null
     */
    getDatasetByName: function getDatasetByName(name) {
      var strName = new PIEString$1(name);

      var hDataset = Module._DataSource_GetDataset(this.handle, strName.getHandle());

      strName.dispose();

      if (hDataset) {
        return PIEDatasetFactory.CreateInstance(hDataset);
      }

      return null;
    },

    /**
     * 通过索引获取数据集
     * @param {Number} index -数据集索引
     *
     * @memberOf DataSource#
     * @returns {PIEDataset} 如果获取成功返回数据集对象，否则返回NULL
     */
    getDatasetAt: function getDatasetAt(index) {
      var hDataset = Module._DataSource_GetDatasetAt(this.handle, index);

      if (hDataset) {
        return PIEDatasetFactory.CreateInstance(hDataset);
      }

      return null;
    },

    /**
     * 获取数据源服务地址
     *
     * @memberOf DataSource#
     * @returns {String} 数据源服务地址
     */
    getServer: function getServer() {
      var strServer = new PIEString$1(512);

      Module._DataSource_GetServer(this.handle, strServer.getHandle());

      var server = strServer.toString();
      strServer.dispose();
      return server;
    },

    /**
     * 获取数据源数据库名称
     *
     * @memberOf DataSource#
     * @returns {String} 数据源数据库名称
     */
    getDatabase: function getDatabase() {
      var strDatabase = new PIEString$1(512);

      Module._DataSource_GetDatabase(this.handle, strDatabase.getHandle());

      var dataBase = strDatabase.toString();
      strDatabase.dispose();
      return dataBase;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 数据源集合操作
   * @name DataSources
   */

  function PIEDataSources(handle) {
    this.handle = handle;
  }

  Object.assign(PIEDataSources.prototype, {
    /**
     * 向工作空间中添加数据源
     * @param {PIEDataSource} datasource -需要加入的数据源
     * @memberOf DataSources#
     *
     * @returns {Boolean} 如果添加成功返回true,否则返回false
     *
     */
    addDataSource: function addDataSource(datasource) {
      var result = Module._Document_AddDataSource(this.handle, datasource.getHandle());

      if (result) {
        datasource.setAutoRelease(false);
      }

      return Boolean(result);
    },

    /**
     * 获取工作空间中数据源的数量
     *
     * @memberOf DataSources#
     * @returns {Number} 返回工作空间中数据源的数量
     */
    getDataSourceCount: function getDataSourceCount() {
      var count = Module._Document_GetDataSourceCount(this.handle);

      return count;
    },

    /**
     * 获取工作空间中指定别名的数据源
     * @param {String} alias -数据源别名
     * @memberOf DataSources#
     *
     * @returns {PIEDataSource} 如果获取成功返回指定名称的数据源，否则返回null;如果别名为空或不存在，返回null
     *
     */
    getDataSource: function getDataSource(alias) {
      var strAlias = new PIEString$1(alias);

      var hDataSource = Module._Document_GetDataSource(this.handle, strAlias.getHandle());

      strAlias.dispose();
      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },

    /**
     * 获取工作空间中指定索引的数据源
     * @param {Number} index -需要获取的数据源的索引值
     * @memberOf DataSources#
     *
     * @returns {PIEDataSource} 如果获取成功返回指定索引值的数据源，否则返回null
     *
     */
    getDataSourceAt: function getDataSourceAt(index) {
      var hDataSource = Module._Document_GetDataSourceAt(this.handle, index);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },

    /**
     * 通过数据源查找数据源别名
     * @param {PIEDataSource} datasource -数据源
     * @memberOf DataSources#
     * @returns {String} 返回数据源的别名
     *
     */
    getDataSourceAlias: function getDataSourceAlias(datasource) {
      var strAlias = new PIEString$1(256);

      Module._Document_GetDataSourceAlias(this.handle, datasource.getHandle(), strAlias.getHandle());

      var alias = strAlias.toString();
      strAlias.dispose();
      return alias;
    },

    /**
     * 得到指定索引位置的数据源别名
     * @param {Number} index -索引位置
     * @memberOf DataSources#
     *
     * @returns {String} 返回数据源的别名
     */
    getDataSourceAliasAt: function getDataSourceAliasAt(index) {
      var strAlias = new PIEString$1(256);

      Module._Document_GetDataSourceAliasAt(this.handle, index, strAlias.getHandle());

      var alias = strAlias.toString();
      strAlias.dispose();
      return alias;
    },
    // /**
    //  * 从XML中序列化数据源
    //  * @param {String} xml -数据源xml
    //  * @memberOf DataSources#
    //  * @return {Boolean} 返回是否成功序列化数据源
    //  */
    // dataSourceFromXML: function (xml) {
    //     var strXml = new PIEString(xml);
    //     var result = Module._Document_DataSourceFromXML(this.handle, strXml.getHandle());
    //     strXml.dispose();
    //     return result;
    // },
    //
    // /**
    //  * 把数据源序列化成xml
    //  * @memberOf DataSources#
    //  * @returns {String} 返回数据源xml
    //  */
    // dataSourceToXML: function () {
    //     var strXml = new PIEString(1024);
    //     Module._Document_DataSourceToXML(this.handle, strXml.getHandle());
    //     var xml = strXml.toString();
    //     strXml.dispose();
    //     return xml;
    // },

    /**
     * 重命名数据源
     * @param {String} oldAlias -原数据源别名
     * @param {String} newAlias -新数据源别名
     * @memberOf DataSources#
     *
     * @returns {Boolean} 如果重命名成功返回true，否则返回false；如果数据源为null，或者原别名为空或者新别名为空，那么返回false；如果数据源新别名和原别名相同，返回true；如果数据源新别名与已存在的其他数据源名称相同，返回false；
     *
     */
    renameDataSource: function renameDataSource(oldAlias, newAlias) {
      var strOldAlias = new PIEString$1(oldAlias);
      var strNewAlias = new PIEString$1(newAlias);

      var result = Module._Document_RenameDataSource(this.handle, strOldAlias.getHandle(), strNewAlias.getHandle());

      strOldAlias.dispose();
      strNewAlias.dispose();
      return Boolean(result);
    },

    /**
     * 根据数据源别名移除数据源
     * @param {String} alias -数据源别名
     * @memberOf DataSources#
     *
     * @returns {PIEDataSource} 如果移除成功返回数据源的对象，否则返回null。 如果别名为空，返回null；如果不存在名称为strAlias的数据源，那么返回null。
     */
    removeDataSource: function removeDataSource(alias) {
      var strAlias = new PIEString$1(alias);

      var hDataSource = Module._Document_RemoveDataSource(this.handle, strAlias.getHandle());

      strAlias.dispose();
      var dataSource = PIEDataSourceFactory.CreateInstance(hDataSource);

      if (dataSource != null) {
        dataSource.setAutoRelease(true);
      }

      return dataSource;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 地形数据源操作函数
   * @name TerrainDataSource
   *
   * @extends DataSource
   */

  function PIETerrainDataSource(handle, autoRelease) {
    PIEDataSource.call(this, handle, autoRelease);
  }

  PIETerrainDataSource.prototype = Object.assign(Object.create(PIEDataSource.prototype), {// /**
    //  * 创建栅格瓦片
    //  * @param {Object} options -
    //  * @param {String} options.server -url地址
    //  * @param {String} options.cachePath -缓存路径
    //  * @param {String} options.alias -数据源别名
    //  * @param {Number} options.epsg -坐标系EPSG
    //  * @param {PIEBounds} options.indexBounds -加载数据范围
    //  * @param {PIEBounds} options.bounds -数据范围
    //  * @param {Number} options.dpi -地图显示Dpi
    //  * @param {Number} options.tileSize -瓦片大小
    //  * @param {Array} options.scales -缩放比例数组
    //  *
    //  * @memberOf TerrainDataSource#
    //  */
    // create: function (options) {
    //     if (options != null) {
    //         var provider = options.server;
    //         var urlFormat = null;
    //         var cachePath = options.cachePath;
    //         var name = options.alias;
    //         var epsg = options.epsg;
    //         var indexBounds = options.indexBounds;
    //         var bounds = options.bounds;
    //         var dpi = options.dpi;
    //         var tileSize = options.tileSize;
    //         var scales = options.scales;
    //         var scaleCount = 0;
    //         if (provider == null || name == null) {
    //             return;
    //         }
    //         if (epsg == null) {
    //             epsg = 3857;
    //         }
    //         if (bounds == null) {
    //             bounds = [-20037508.342789244, 20037508.342789244, 20037508.342789244, -20037508.342789244];
    //         }
    //         indexBounds = indexBounds == null ? bounds : indexBounds;
    //         dpi = dpi == null ? 96 : dpi;
    //         tileSize = tileSize == null ? 256 : tileSize;
    //
    //
    //         var strProvider = new PIEString(provider);
    //         var strName = new PIEString(name);
    //         var strCachePath = null;
    //         if (cachePath != null) {
    //             strCachePath = new PIEString(cachePath);
    //         }
    //         var arrayBounds = null;
    //         var arrayIndexBounds = null;
    //         var arrayScales = null;
    //         var spatialRef = PIESpatialReference.fromEpsg(epsg);
    //         if (bounds instanceof Array) {
    //             arrayBounds = new PIEArray(bounds, PIEArrayType.Float64);
    //         } else if (bounds instanceof PIEBounds) {
    //             arrayBounds = PIEBounds.toArray(bounds);
    //         }
    //         if (indexBounds instanceof Array) {
    //             arrayIndexBounds = new PIEArray(indexBounds, PIEArrayType.Float64);
    //         } else if (indexBounds instanceof PIEBounds) {
    //             arrayIndexBounds = PIEBounds.toArray(indexBounds);
    //         }
    //         if (scales != null && scales instanceof Array) {
    //             scaleCount = scales.length;
    //             arrayScales = new PIEArray(scales, PIEArrayType.Float64);
    //         }
    //
    //         var cachePathPar = null;
    //         if (strCachePath != null) {
    //             cachePathPar = strCachePath.getHandle();
    //         }
    //         var scalesPar = null;
    //         if (arrayScales) {
    //             scalesPar = arrayScales.getHandle();
    //         }
    //         if (strProvider && arrayBounds && arrayIndexBounds) {
    //             this.handle = Module._DataSource_CreateTileDataSourceEx(strProvider.getHandle(), urlFormat, cachePathPar, strName.getHandle(), spatialRef.getHandle(), arrayIndexBounds.getHandle(),
    //                 arrayBounds.getHandle(), dpi, tileSize, scalesPar, scaleCount);
    //             if (this.handle != null) {
    //                 this.dataset = Module._DataSource_GetDatasetAt(this.handle, 0);
    //             }
    //         }
    //
    //         strProvider.dispose();
    //         strName.dispose();
    //         if(strCachePath){
    //             strCachePath.dispose();
    //         }
    //         if(arrayBounds){
    //             arrayBounds.dispose();
    //         }
    //         if(arrayIndexBounds){
    //             arrayIndexBounds.dispose();
    //         }
    //         if(arrayScales){
    //             arrayScales.dispose();
    //         }
    //
    //     }
    // },
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建栅格瓦片数据源
   * @name TileRasterDataSource
   * @class TileRasterDataSource
   * 栅格瓦片数据源操作函数
   * @extends RasterDataSource
   */

  function PIETileRasterDataSource(handle, autoRelease) {
    PIERasterDataSource.call(this, handle, autoRelease);
  }

  PIETileRasterDataSource.prototype = Object.assign(Object.create(PIERasterDataSource.prototype), {
    /**
     * 创建栅格瓦片
     * @param {Object} options -
     * @param {String} options.server -url地址(必输)
     * @param {String} options.alias -栅格瓦片数据源别名(必输)
     * @param {Number} options.epsg -坐标系EPSG(支持3857、4326、4490，默认为3857)
     * @param {PIEBounds/Array} options.bounds -数据范围(默认全球范围)
     * @param {Number} options.dpi -地图显示dpi(默认为96)
     * @param {Number} options.tileSize -瓦片大小(默认256)
     * @param {Number} options.levelOffset -层级偏移(默认为0)
     * @param {Boolean} options.tms -是否是tms瓦片协议(默认false)
     * @param {Number} options.maxLevel -瓦片最大层级(默认24)
     * @memberOf TileRasterDataSource#
     */
    create: function create(options) {
      if (options != null) {
        var provider = options.server;
        var urlFormat = null;
        var cachePath = options.cachePath;
        var name = options.alias;
        var epsg = options.epsg;
        var indexBounds = null;
        var bounds = options.bounds;
        var dpi = options.dpi;
        var tileSize = options.tileSize;
        var scales = options.scales;
        var tileRowInverseMode = options.tms;
        var bottomLevel = options.maxLevel != null ? options.maxLevel : 24;
        var scaleCount = 0;
        var levelOffset = 0;

        if (provider == null || name == null) {
          return;
        }

        if (epsg == null) {
          epsg = 3857;
        }

        if (bounds == null) {
          bounds = [-20037508.342789244, 20037508.342789244, 20037508.342789244, -20037508.342789244];

          if (epsg == 4326 || epsg == 4490) {
            bounds = [-180, 90, 180, -90];
          }
        }

        if (indexBounds == null) {
          indexBounds = [-20037508.342789244, 20037508.342789244, 20037508.342789244, -20037508.342789244];

          if (epsg == 4326 || epsg == 4490) {
            indexBounds = [-180, 90, 180, -90];
          }
        }

        if (options.levelOffset != null) {
          levelOffset = options.levelOffset;
        }

        dpi = dpi == null ? 96 : dpi;
        tileSize = tileSize == null ? 256 : tileSize;
        var strProvider = new PIEString$1(provider);
        var strName = new PIEString$1(name);
        var strCachePath = null;

        if (cachePath != null) {
          strCachePath = new PIEString$1(cachePath);
        }

        var arrayBounds = null;
        var arrayIndexBounds = null;
        var arrayScales = null;
        var spatialRef = PIESpatialReference.fromEpsg(epsg);

        if (bounds instanceof Array) {
          arrayBounds = new PIEArray(bounds, PIEArrayType.Float64);
        } else if (bounds instanceof PIEBounds) {
          arrayBounds = PIEBounds.toArray(bounds);
        }

        if (indexBounds instanceof Array) {
          arrayIndexBounds = new PIEArray(indexBounds, PIEArrayType.Float64);
        } else if (indexBounds instanceof PIEBounds) {
          arrayIndexBounds = PIEBounds.toArray(indexBounds);
        }

        if (scales != null && scales instanceof Array) {
          scaleCount = scales.length;
          arrayScales = new PIEArray(scales, PIEArrayType.Float64);
        }

        var cachePathPar = null;

        if (strCachePath != null) {
          cachePathPar = strCachePath.getHandle();
        }

        var scalesPar = null;

        if (arrayScales) {
          scalesPar = arrayScales.getHandle();
        }

        if (tileRowInverseMode == null) {
          tileRowInverseMode = false;
        }

        var tileType = "raster";
        var strTileType = new PIEString$1(tileType);

        if (strProvider && arrayBounds && arrayIndexBounds) {
          this.handle = Module._DataSource_CreateTileDataSourceEx(strProvider.getHandle(), urlFormat, cachePathPar, strName.getHandle(), spatialRef.getHandle(), arrayIndexBounds.getHandle(), arrayBounds.getHandle(), dpi, tileSize, scalesPar, scaleCount, strTileType.getHandle(), levelOffset, tileRowInverseMode, bottomLevel);
        }

        spatialRef.dispose();
        strProvider.dispose();
        strName.dispose();
        strTileType.dispose();

        if (strCachePath) {
          strCachePath.dispose();
        }

        if (arrayBounds) {
          arrayBounds.dispose();
        }

        if (arrayIndexBounds) {
          arrayIndexBounds.dispose();
        }

        if (arrayScales) {
          arrayScales.dispose();
        }
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建Map地形数据源
   * @name MapTerrainDataSource
   * @class MapTerrainDataSource
   * Map地形数据源操作函数
   * @extends TerrainDataSource
   */

  function PIEMapTerrainDataSource(handle, autoRelease) {
    PIETerrainDataSource.call(this, handle, autoRelease);
  }

  PIEMapTerrainDataSource.prototype = Object.assign(Object.create(PIETerrainDataSource.prototype), {
    /**
     * 创建栅格瓦片
     * @param {Object} options -
     * @param {String} options.server -url地址(必输)
     * @param {String} options.alias -栅格瓦片数据源别名(必输)
     * @param {Number} options.epsg -坐标系EPSG(支持3857、4326、4490，默认为3857)
     * @param {PIEBounds/Array} options.bounds -数据范围(默认全球范围)
     * @param {Number} options.dpi -地图显示Dpi(默认为96)
     * @param {Number} options.tileSize -瓦片大小(默认256)
     * @param {Number} options.levelOffset -层级偏移(默认为0)
     * @param {Boolean} options.tms -是否是tms瓦片协议(默认false)
     * @param {Number} options.maxLevel -瓦片最大层级(默认13，如果地形精度大于13层级，需要自行设置此参数)
     * @param {String} options.tileType -瓦片类型(默认png)
     * @param {String} options.urlFormat -瓦片格式
     * @memberOf MapTerrainDataSource#
     */
    create: function create(options) {
      if (options != null) {
        var provider = options.server;
        var urlFormat = options.urlFormat;
        var cachePath = options.cachePath;
        var name = options.alias;
        var epsg = options.epsg;
        var indexBounds = null;
        var bounds = options.bounds;
        var dpi = options.dpi;
        var tileSize = options.tileSize;
        var scales = options.scales;
        var tileRowInverseMode = options.tms;
        var bottomLevel = options.maxLevel != null ? options.maxLevel : 24;
        var scaleCount = 0;
        var levelOffset = 0;
        var tileType = options.tileType;

        if (!provider || provider == "") {
          throw new Error('PIE.MapTerrainDataSource.create: input server is NULL');
        }

        if (!name || name == "") {
          throw new Error('THREE.MapTerrainDataSource.create: input alias is NULL');
        }

        if (epsg == null) {
          epsg = 3857;
        }

        if (bounds == null) {
          bounds = [-20037508.342789244, 20037508.342789244, 20037508.342789244, -20037508.342789244];

          if (epsg == 4326 || epsg == 4490) {
            bounds = [-180, 90, 180, -90];
          }
        }

        if (indexBounds == null) {
          indexBounds = [-20037508.342789244, 20037508.342789244, 20037508.342789244, -20037508.342789244];

          if (epsg == 4326 || epsg == 4490) {
            indexBounds = [-180, 90, 180, -90];
          }
        }

        if (options.levelOffset != null) {
          levelOffset = options.levelOffset;
        }

        dpi = dpi == null ? 96 : dpi;
        tileSize = tileSize == null ? 256 : tileSize;

        if (tileType == null) {
          tileType = "png";
        }

        var strTileType = new PIEString$1(tileType);

        if (urlFormat == null) {
          urlFormat = "";
        }

        var strUrlFormat = new PIEString$1(urlFormat);
        var strProvider = new PIEString$1(provider);
        var strName = new PIEString$1(name);
        var strCachePath = null;

        if (cachePath != null) {
          strCachePath = new PIEString$1(cachePath);
        }

        var arrayBounds = null;
        var arrayIndexBounds = null;
        var arrayScales = null;
        var spatialRef = PIESpatialReference.fromEpsg(epsg);

        if (bounds instanceof Array) {
          arrayBounds = new PIEArray(bounds, PIEArrayType.Float64);
        } else if (bounds instanceof PIEBounds) {
          arrayBounds = PIEBounds.toArray(bounds);
        }

        if (indexBounds instanceof Array) {
          arrayIndexBounds = new PIEArray(indexBounds, PIEArrayType.Float64);
        } else if (indexBounds instanceof PIEBounds) {
          arrayIndexBounds = PIEBounds.toArray(indexBounds);
        }

        if (scales != null && scales instanceof Array) {
          scaleCount = scales.length;
          arrayScales = new PIEArray(scales, PIEArrayType.Float64);
        }

        var cachePathPar = null;

        if (strCachePath != null) {
          cachePathPar = strCachePath.getHandle();
        }

        var scalesPar = null;

        if (arrayScales) {
          scalesPar = arrayScales.getHandle();
        }

        if (tileRowInverseMode == null) {
          tileRowInverseMode = false;
        }

        if (strProvider && arrayBounds && arrayIndexBounds) {
          this.handle = Module._DataSource_CreateTileDataSourceEx(strProvider.getHandle(), strUrlFormat.getHandle(), cachePathPar, strName.getHandle(), spatialRef.getHandle(), arrayIndexBounds.getHandle(), arrayBounds.getHandle(), dpi, tileSize, scalesPar, scaleCount, strTileType.getHandle(), levelOffset, tileRowInverseMode, bottomLevel);
        }

        spatialRef.dispose();
        strProvider.dispose();
        strName.dispose();
        strUrlFormat.dispose();
        strTileType.dispose();

        if (strCachePath) {
          strCachePath.dispose();
        }

        if (arrayBounds) {
          arrayBounds.dispose();
        }

        if (arrayIndexBounds) {
          arrayIndexBounds.dispose();
        }

        if (arrayScales) {
          arrayScales.dispose();
        }
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 字段类型
   * @readonly
   * @enum {number}
   */
  var PIEFieldType = {
    /** 无效的字段类型*/
    UnKnown: 0,

    /**布尔值，单字节，true,false */
    Boolean: 1,

    /**无符号单字节，0-255 */
    Byte: 2,

    /**短整型，2字节 */
    INT16: 3,

    /**长整型，4字节 */
    INT32: 4,

    /**长整型，8字节 */
    INT64: 16,

    /**单精度浮点型，4字节 */
    Float: 6,

    /**双精度浮点型，8字节 */
    Double: 7,

    /**日期型，年、月、日，不带时间 */
    Date: 8,

    /**不定长字符串型 */
    Text: 10,

    /**不定长二进制类型 */
    Binary: 11,

    /**定长字符串型，需指定长度 */
    Char: 18,

    /**时间戳型，年、月、日、小时、分、秒 */
    Time: 23,

    /**宽字节不定长字符串类型 */
    NText: 127,

    /**几何数据类型 */
    Geometry: 128
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维相机操作相关函数
   * @name WorldCamera
   */

  function PIEWorldCamera(handle) {
    this.handle = handle;
  }

  Object.assign(PIEWorldCamera.prototype, {
    /**
     * 设置相机平滑效果
     *@param {Boolean} smooth -是否需要相机平滑效果
     * @memberOf WorldCamera#
     */
    setSmooth: function setSmooth(smooth) {
      Module._WorldCamera_SetSmooth(this.handle, smooth);
    },

    /**
     * 获取是否需要相机平滑效果
     *
     * @memberOf WorldCamera#
     *@returns {Boolean} true 需要平滑效果,false 不需要平滑效果
     *
     */
    isSmooth: function isSmooth() {
      return Module._WorldCamera_IsSmooth(this.handle);
    },

    /**
     * 设置相机缓冲效果的缩放惯性大小
     *@param {Number} speedRatio -缩放动作被分步执行的次数(默认为30，speedRatio越大惯性越大，speedRatio=1时惯性消失)
     * @memberOf WorldCamera#
     *
     */
    setZoomSpeed: function setZoomSpeed(speedRatio) {
      Module._WorldCamera_SetZoomSpeed(this.handle, speedRatio);
    },

    /**
     * 获取相机缓冲效果的缩放惯性大小
     *
     * @memberOf WorldCamera#
     *@returns {Number} 成功返回缩放惯性大小 , 失败返回-1
     *
     */
    getZoomSpeed: function getZoomSpeed() {
      return Module._WorldCamera_GetZoomSpeed(this.handle);
    },

    /**
     *设置相机缓冲效果的俯仰惯性大小
     *@param {speedRatio} speedRatio -俯仰动作被分步执行的次数(speedRatio默认值为30，speedRatio越大惯性越大，speedRatio=1时惯性消失)
     * @memberOf WorldCamera#
     *
     */
    setPitchSpeed: function setPitchSpeed(speedRatio) {
      Module._WorldCamera_SetPitchSpeed(this.handle, speedRatio);
    },

    /**
     *获取相机缓冲效果的俯仰惯性大小
     *
     * @memberOf WorldCamera#
     *@returns {Number} 成功返回俯仰惯性大小，失败返回-1
     *
     */
    getPitchSpeed: function getPitchSpeed() {
      return Module._WorldCamera_GetPitchSpeed(this.handle);
    },

    /**
     *设置相机缓冲效果的偏航惯性大小
     *@param {Number} speedRatio -偏航动作被分步执行的次数(speedRatio默认值为30，speedRatio越大惯性越大，speedRatio=1时惯性消失)
     * @memberOf WorldCamera#
     *
     */
    setHeadSpeed: function setHeadSpeed(speedRatio) {
      Module._WorldCamera_SetHeadSpeed(this.handle, speedRatio);
    },

    /**
     *获取相机缓冲效果的偏航惯性大小
     *
     * @memberOf WorldCamera#
     *@returns {Number} 成功返回偏航惯性大小，失败返回-1
     *
     */
    getHeadSpeed: function getHeadSpeed() {
      return Module._WorldCamera_GetHeadSpeed(this.handle);
    },

    /**
     *设置相机缓冲效果的平移惯性大小
     *@param {Number} speedRatio -平移动作被分步执行的次数(speedRatio默认值为30，speedRatio越大惯性越大，speedRatio=1时惯性消失)
     * @memberOf WorldCamera#
     *
     */
    setMoveSpeed: function setMoveSpeed(speedRatio) {
      Module._WorldCamera_SetMoveSpeed(this.handle, speedRatio);
    },

    /**
     *获取相机缓冲效果的平移惯性大小
     *
     * @memberOf WorldCamera#
     *@returns {Number} 成功返回俯仰惯性大小，失败返回-1
     *
     */
    getMoveSpeed: function getMoveSpeed() {
      return Module._WorldCamera_GetMoveSpeed(this.handle);
    },

    /**
     *获取相机距离
     *
     * @memberOf WorldCamera#
     *@returns {Number} 相机距离
     *
     */
    getDistance: function getDistance() {
      return Module._WorldCamera_GetDistance(this.handle);
    },

    /**
     *设置相机距离
     *@param {Number} distance -相机距离
     * @memberOf WorldCamera#
     *
     */
    setDistance: function setDistance(distance) {
      Module._WorldCamera_SetDistance(this.handle, distance);
    },
    // /**
    //  *设置是否开启水下浏览
    //  *@param {Boolean} enable -是否开启水下浏览
    //  * @memberOf WorldCamera#
    //  *
    //  */
    setEnableUnderWater: function setEnableUnderWater(enable) {
      Module._WorldCamera_SetEnableUnderWater(this.handle, enable);
    },
    // /**
    //  *获取是否开启水下浏览
    //  *
    //  * @memberOf WorldCamera#
    //  *@returns {Boolean} 返回是否开启水下浏览
    //  *
    //  */
    isEnableUnderWater: function isEnableUnderWater() {
      return Module._WorldCamera_IsEnableUnderWater(this.handle);
    },

    /**
     *设置是否开启场景深度分割渲染
     *@param {Boolean} enable -是否开启场景深度分割渲染
     * @memberOf WorldCamera#
     *
     */
    setEnableDepthPartition: function setEnableDepthPartition(enable) {
      Module._WorldCamera_SetEnableDepthPartition(this.handle, enable);
    },

    /**
     *获取是否开启场景深度分割渲染
     *
     * @memberOf WorldCamera#
     *@returns {Boolean} 返回是否开启场景深度分割渲染
     *
     */
    isEnableDepthPartition: function isEnableDepthPartition() {
      return Boolean(Module._WorldCamera_IsEnableDepthPartition(this.handle));
    },

    /**
     *设置是否开启地形雾化效果
     *@param {Boolean} enable -是否开启地形雾化效果
     * @memberOf WorldCamera#
     *
     */
    setEnableFog: function setEnableFog(enable) {
      Module._WorldCamera_SetEnableFog(this.handle, enable);
    },

    /**
     *获取是否开启地形雾化效果
     *
     * @memberOf WorldCamera#
     *@returns {Boolean} 返回是否开启地形雾化效果
     *
     */
    isEnableFog: function isEnableFog() {
      return Boolean(Module._WorldCamera_IsEnableFog(this.handle));
    },

    /**
     *设置地形雾化距离比率
     *@param {Number} ratio -设置地形雾化距离比率
     * @memberOf WorldCamera#
     *
     */
    setFogDistanceRatio: function setFogDistanceRatio(ratio) {
      Module._WorldCamera_SetFogDistanceRatio(this.handle, ratio);
    },

    /**
     *获取地形雾化距离比率
     *
     * @memberOf WorldCamera#
     *@returns {Number} 返回地形雾化距离比率
     *
     */
    getFogDistanceRatio: function getFogDistanceRatio() {
      return Module._WorldCamera_GetFogDistanceRatio(this.handle);
    },

    /**
     *获取指定地图坐标对应的地形高度
     *@param {PIESceneMode} sceneMode -场景模式
     *@param {(Array/PIEVector2)} point -地图坐标
     * @memberOf WorldCamera#
     *
     * @returns {Number} 地形高度
     *
     */
    getHPElevation: function getHPElevation(sceneMode, point) {
      var array = [];

      if (point instanceof Array) {
        array = point;
      } else if (point instanceof PIEVector2) {
        array = [point.x, point.y];
      }

      if (array.length) {
        var arrayPoint = new PIEArray(array, PIEArrayType.Float64);

        var res = Module._WorldCamera_GetHPElevation(this.handle, sceneMode, arrayPoint.getHandle());

        arrayPoint.dispose();
        return res;
      }

      return -1;
    },

    /**
     *获取指定世界坐标对应的地形高度
     *@param {PIESceneMode} sceneMode -场景模式
     *@param {(Array/PIEVector3)} point -世界坐标
     * @memberOf WorldCamera#
     *
     * @returns {Number} {Number} 地形高度
     */
    getHPElevationEx: function getHPElevationEx(sceneMode, point) {
      var array = [];

      if (point instanceof Array) {
        array = point;
      } else if (point instanceof PIEVector3) {
        array = [point.x, point.y, point.z];
      }

      if (array.length) {
        var arrayPoint = new PIEArray(array, PIEArrayType.Float64);

        var res = Module._WorldCamera_GetHPElevationEx(this.handle, sceneMode, arrayPoint.getHandle());

        arrayPoint.dispose();
        return res;
      }

      return -1;
    },

    /**
     * 设置视锥体开关
     * @param {Boolean} enableFarClipping -是否关闭
     * @memberOf WorldCamera#
     *
     */
    setEnableFarClipping: function setEnableFarClipping(enableFarClipping) {
      Module._WorldCamera_SetEnableFarClipping(this.handle, enableFarClipping);
    },

    /**
     * 读取视锥体当前的状态
     *
     * @memberOf WorldCamera#
     * @returns {Boolean} 返回视锥体的当前状态(true表示视锥体的状态开启,false表示视锥体的状态关闭)
     *
     */
    isEnableFarClipping: function isEnableFarClipping() {
      return Boolean(Module._WorldCamera_IsEnableFarClipping(this.handle));
    },

    /**
     *设置相机自动跟踪效果
     *@param {Boolean} lockPosition -是否锁定位置
     *@param {Boolean} lockDistance -是否锁定距离
     * @param {Boolean} lockHeading -是否锁定旋转
     * @param {Boolean} lockPitch -是否锁定俯仰
     * @param {Boolean} lockBank -是否锁定翻滚
     * @param {(PIEVector3/Array)} offset3d -偏移距离
     * @param {PIERenderable} target -跟踪物体
     * @memberOf WorldCamera#
     *
     */
    setAutoTracking: function setAutoTracking(lockPosition, lockDistance, lockHeading, lockPitch, lockBank, offset3d, target) {
      var array = [];

      if (offset3d instanceof Array) {
        array = offset3d;
      } else if (offset3d instanceof PIEVector3) {
        array = [offset3d.x, offset3d.y, offset3d.z];
      }

      if (array.length) {
        var arrayOffset3d = new PIEArray(array, PIEArrayType.Float64);

        if (target == null) {
          Module._WorldCamera_SetAutoTracking(this.handle, lockPosition, lockDistance, lockHeading, lockPitch, lockBank, arrayOffset3d.getHandle(), null);
        } else {
          Module._WorldCamera_SetAutoTracking(this.handle, lockPosition, lockDistance, lockHeading, lockPitch, lockBank, arrayOffset3d.getHandle(), target.getHandle());
        }

        arrayOffset3d.dispose();
      }
    },
    // /**
    //  *获取相机跟随本地坐标
    //  *
    //  * @memberOf WorldCamera#
    //  * @returns {Boolean} true 获取成功,false 获取失败
    //  */
    autoTrack: function autoTrack() {
      return Module._WorldCamera_AutoTrack(this.handle);
    },

    /**
     *获取相机跟随本地坐标
     *
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 返回跟随本地坐标
     */
    getTrackTargetPosition: function getTrackTargetPosition() {
      var arrayTargetPosition = new PIEArray(3, PIEArrayType.Float64);

      Module._WorldCamera_GetTrackTargetPosition(this.handle, arrayTargetPosition.getHandle());

      arrayTargetPosition.updateData();
      var vecArray = arrayTargetPosition.toArray();
      var vector3d = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
      arrayTargetPosition.dispose();
      return vector3d;
    },

    /**
     *设置相机跟随本地坐标
     * @param {(PIEVector3/Array)} position -跟随本地坐标
     * @memberOf WorldCamera#
     *
     */
    setTrackTargetPosition: function setTrackTargetPosition(position) {
      var array = [];

      if (position instanceof Array) {
        array = position;
      } else if (position instanceof PIEVector3) {
        array = [position.x, position.y, position.z];
      }

      if (array.length) {
        var arrayPosition = new PIEArray(array, PIEArrayType.Float64);

        Module._WorldCamera_SetTrackTargetPosition(this.handle, arrayPosition.getHandle());

        arrayPosition.dispose();
      }
    },

    /**
     *获取相机跟随旋转角度
     *
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 返回跟随旋转角度
     */
    getTrackTargetRotation: function getTrackTargetRotation() {
      var arrayTargetRotation = new PIEArray(3, PIEArrayType.Float64);

      Module._WorldCamera_GetTrackTargetRotation(this.handle, arrayTargetRotation.getHandle());

      arrayTargetRotation.updateData();
      var vecArray = arrayTargetRotation.toArray();
      var vector3d = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
      arrayTargetRotation.dispose();
      return vector3d;
    },

    /**
     *设置相机跟随旋转角度
     * @param {(PIEVector3/Array)} rotation -跟随旋转角度
     * @memberOf WorldCamera#
     *
     */
    setTrackTargetRotation: function setTrackTargetRotation(rotation) {
      var array = [];

      if (rotation instanceof Array) {
        array = rotation;
      } else if (rotation instanceof PIEVector3) {
        array = [rotation.x, rotation.y, rotation.z];
      }

      if (array.length) {
        var arrayRotation = new PIEArray(array, PIEArrayType.Float64);

        Module._WorldCamera_SetTrackTargetRotation(this.handle, arrayRotation.getHandle());

        arrayRotation.dispose();
      }
    },

    /**
     *获取相机跟随世界坐标
     *
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 返回跟随世界坐标
     */
    getTrackTargetWorldPosition: function getTrackTargetWorldPosition() {
      var arrayTargetPosition = new PIEArray(3, PIEArrayType.Float64);

      Module._WorldCamera_GetTrackTargetWorldPosition(this.handle, arrayTargetPosition.getHandle());

      arrayTargetPosition.updateData();
      var vecArray = arrayTargetPosition.toArray();
      var vector3d = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
      arrayTargetPosition.dispose();
      return vector3d;
    },

    /**
     *设置相机跟随世界坐标
     * @param {(PIEVector3/Array)} position -跟随世界坐标
     * @memberOf WorldCamera#
     *
     */
    setTrackTargetWorldPosition: function setTrackTargetWorldPosition(position) {
      var array = [];

      if (position instanceof Array) {
        array = position;
      } else if (position instanceof PIEVector3) {
        array = [position.x, position.y, position.z];
      }

      if (array.length) {
        var arrayPosition = new PIEArray(array, PIEArrayType.Float64);

        Module._WorldCamera_SetTrackTargetWorldPosition(this.handle, arrayPosition.getHandle());

        arrayPosition.dispose();
      }
    },

    /**
     * 设置是否自定义相机参数
     * @param {Boolean} custom -是否自定义
     * @memberOf WorldCamera#
     *
     */
    setCustomCamera: function setCustomCamera(custom) {
      Module._WorldCamera_SetCustomCamera(this.handle, custom);
    },

    /**
     * 获取是否自定义相机参数
     *
     * @memberOf WorldCamera#
     * @returns {Boolean}  true 是自定义相机 ,false 不是自定义相机
     */
    isCustomCamera: function isCustomCamera() {
      return Boolean(Module._WorldCamera_IsCustomCamera(this.handle));
    },

    /**
     *设置相机视场角度
     * @param {Number} fov -视场角度
     * @memberOf WorldCamera#
     *
     */
    setFov: function setFov(fov) {
      Module._WorldCamera_SetFov(this.handle, fov);
    },

    /**
     *获取相机视场角度
     *
     * @memberOf WorldCamera#
     * @returns {Number} 视场角度
     */
    getFov: function getFov() {
      return Module._WorldCamera_GetFov(this.handle);
    },

    /**
     *获取相机视口宽高比
     *
     * @memberOf WorldCamera#
     * @returns {Number} 视口宽高比
     */
    getAspect: function getAspect() {
      return Module._WorldCamera_GetAspect(this.handle);
    },

    /**
     *获取相机近裁剪面距离
     *
     * @memberOf WorldCamera#
     * @returns {Number} 近裁剪面距离
     */
    getNearClipDistance: function getNearClipDistance() {
      return Module._WorldCamera_GetNearClipDistance(this.handle);
    },

    /**
     *获取相机远裁剪面距离
     *
     * @memberOf WorldCamera#
     * @returns {Number} 远裁剪面距离
     */
    getFarClipDistance: function getFarClipDistance() {
      return Module._WorldCamera_GetFarClipDistance(this.handle);
    },

    /**
     *获取相机相对视图矩阵
     *
     * @memberOf WorldCamera#
     * @returns {PIEMatrix4} 相机相对视图矩阵
     */
    getRelativeViewMatrix: function getRelativeViewMatrix() {
      var matrix = new PIEArray(16, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetRelativeViewMatrix(this.handle, matrix.getHandle());

      matrix.updateData();

      if (res) {
        var viewArray = matrix.toArray();
        var viewMatrix = PIEMatrix4.fromArray(viewArray);
        matrix.dispose();
        return viewMatrix;
      }

      matrix.dispose();
      return null;
    },
    // /**
    //  *获取相机相对视图矩阵
    //  *
    //  * @memberOf WorldCamera#
    //  * @returns {PIEMatrix4} 相机相对视图矩阵
    //  *
    //  */
    getRelativeViewMatrixF: function getRelativeViewMatrixF() {
      var matrix = new PIEArray(16, PIEArrayType.Float32);

      var res = Module._WorldCamera_GetRelativeViewMatrixF(this.handle, matrix.getHandle());

      matrix.updateData();

      if (res) {
        var viewArray = matrix.toArray();
        var viewMatrix = PIEMatrix4.fromArray(viewArray);
        matrix.dispose();
        return viewMatrix;
      }

      matrix.dispose();
      return null;
    },

    /**
     *获取相机自定义相对中心
     *
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 自定义相对中心(获取失败返回null)
     */
    getReferenceCenter: function getReferenceCenter() {
      var arrayCenter3d = new PIEArray(3, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetReferenceCenter(this.handle, arrayCenter3d.getHandle());

      if (res) {
        arrayCenter3d.updateData();
        var vecArray = arrayCenter3d.toArray();
        var vector3 = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
        arrayCenter3d.dispose();
        return vector3;
      }

      arrayCenter3d.dispose();
      return null;
    },

    /**
     *获取相机位置
     *
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 相机位置(获取失败返回null)
     */
    getCameraPosition: function getCameraPosition() {
      var array = new PIEArray(3, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetCameraPosition(this.handle, array.getHandle());

      if (res) {
        array.updateData();
        var vecArray = array.toArray();
        var vector3 = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
        array.dispose();
        return vector3;
      }

      array.dispose();
      return null;
    },

    /**
     *设置相机自定义相对中心
     * @param {Boolean} custom -是否自定义
     * @param {(PIEVector3/Array)} center3d -自定义相对中心
     * @returns {Boolean} 设置是否成功
     * @memberOf WorldCamera#
     */
    setCustomReferenceCenter: function setCustomReferenceCenter(custom, center3d) {
      var array = [];
      var res = false;

      if (center3d instanceof Array) {
        array = center3d;
      } else if (center3d instanceof PIEVector3) {
        array = [center3d.x, center3d.y, center3d.z];
      }

      if (array.length) {
        var arrayCenter = new PIEArray(array, PIEArrayType.Float64);
        res = Module._WorldCamera_SetCustomReferenceCenter(this.handle, custom, arrayCenter.getHandle());
        arrayCenter.dispose();
      }

      return Boolean(res);
    },

    /**
     *获取相机自定义相对中心
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 相机自定义相对中心(获取失败返回null)
     */
    getCustomReferenceCenter: function getCustomReferenceCenter() {
      var array = new PIEArray(3, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetCustomReferenceCenter(this.handle, array.getHandle());

      if (res) {
        array.updateData();
        var vecArray = array.toArray();
        var vector3 = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
        array.dispose();
        return vector3;
      }

      array.dispose();
      return null;
    },

    /** 设置相机自定义视图矩阵
     *  @param {Boolean} custom -是否自定义
     *  @param {PIEMatrix4} matrix -自定义视图矩阵
     *  @return {Boolean} 设置是否成功
     *  @memberOf WorldCamera#
     */
    setCustomViewMatrix: function setCustomViewMatrix(custom, matrix) {
      if (matrix instanceof PIEMatrix4) {
        var arrayMatrix = new PIEArray(matrix.m, PIEArrayType.Float64);

        var res = Module._WorldCamera_SetCustomViewMatrix(this.handle, custom, arrayMatrix.getHandle());

        arrayMatrix.dispose();
        return Boolean(res);
      }

      return false;
    },

    /** 获取相机自定义视图矩阵
     *  @return {PIEMatrix4}自定义视图矩阵(获取失败返回null)
     *  @memberOf WorldCamera#
     */
    getCustomViewMatrix: function getCustomViewMatrix() {
      var matrix = new PIEArray(16, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetCustomViewMatrix(this.handle, matrix.getHandle());

      if (res) {
        matrix.updateData();
        var viewArray = matrix.toArray();
        var viewMatrix = PIEMatrix4.fromArray(viewArray);
        matrix.dispose();
        return viewMatrix;
      }

      matrix.dispose();
      return null;
    },

    /** 设置相机自定义投影矩阵
     *  @param {Boolean} custom -是否自定义
     *  @param {PIEMatrix4}  matrix -自定义投影矩阵
     *  @return {Boolean} 设置是否成功
     *  @memberOf WorldCamera#
     */
    setCustomProjectionMatrix: function setCustomProjectionMatrix(custom, matrix) {
      if (matrix instanceof PIEMatrix4) {
        var arrayMatrix = new PIEArray(matrix.m, PIEArrayType.Float64);

        var res = Module._WorldCamera_SetCustomProjectionMatrix(this.handle, custom, arrayMatrix.getHandle());

        arrayMatrix.dispose();
        return Boolean(res);
      }

      return false;
    },

    /** 获取相机自定义投影矩阵
     *  @return {PIEMatrix4} 自定义投影矩阵(获取失败返回null)
     *  @memberOf WorldCamera#
     */
    getCustomProjectionMatrix: function getCustomProjectionMatrix() {
      var matrix = new PIEArray(16, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetCustomProjectionMatrix(this.handle, matrix.getHandle());

      if (res) {
        matrix.updateData();
        var viewArray = matrix.toArray();
        var viewMatrix = PIEMatrix4.fromArray(viewArray);
        matrix.dispose();
        return viewMatrix;
      }

      matrix.dispose();
      return null;
    },

    /** 获取相机视图矩阵
     *  @return {PIEMatrix4}相机视图矩阵(获取失败返回null)
     *  @memberOf WorldCamera#
     */
    getViewMatrix: function getViewMatrix() {
      var matrix = new PIEArray(16, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetViewMatrix(this.handle, matrix.getHandle());

      if (res) {
        matrix.updateData();
        var viewArray = matrix.toArray();
        var viewMatrix = PIEMatrix4.fromArray(viewArray);
        matrix.dispose();
        return viewMatrix;
      }

      matrix.dispose();
      return null;
    },

    /** 获取相机投影矩阵
     *  @return {PIEMatrix4} 相机投影矩阵(获取失败返回null)
     *  @memberOf WorldCamera#
     */
    getProjectionMatrix: function getProjectionMatrix() {
      var matrix = new PIEArray(16, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetProjectionMatrix(this.handle, matrix.getHandle());

      if (res) {
        matrix.updateData();
        var projectionArray = matrix.toArray();
        var projectionMatrix = PIEMatrix4.fromArray(projectionArray);
        matrix.dispose();
        return projectionMatrix;
      }

      matrix.dispose();
      return null;
    },

    /** 获取相机相对投影矩阵
     *  @return {PIEMatrix4} 相对投影矩阵(获取失败返回null)
     *  @memberOf WorldCamera#
     */
    getRelativeProjectionMatrix: function getRelativeProjectionMatrix() {
      var matrix = new PIEArray(16, PIEArrayType.Float64);

      var res = Module._WorldCamera_GetRelativeProjectionMatrix(this.handle, matrix.getHandle());

      var projectionMatrix = null;

      if (res) {
        matrix.updateData();
        var projectionArray = matrix.toArray();
        projectionMatrix = PIEMatrix4.fromArray(projectionArray);
      }

      matrix.dispose();
      return projectionMatrix;
    },
    // /** 获取相机相对投影矩阵
    //  *  @return {PIEMatrix4} 相对投影矩阵(获取失败返回null)
    //  *  @memberOf WorldCamera#
    //  */
    getRelativeProjectionMatrixF: function getRelativeProjectionMatrixF() {
      var matrix = new PIEArray(16, PIEArrayType.Float32);

      var res = Module._WorldCamera_GetRelativeProjectionMatrixF(this.handle, matrix.getHandle());

      var projectionMatrix = null;

      if (res) {
        matrix.updateData();
        var projectionArray = matrix.toArray();
        projectionMatrix = PIEMatrix4.fromArray(projectionArray);
      }

      matrix.dispose();
      return projectionMatrix;
    },

    /**
     *刷新相机
     * @memberOf WorldCamera#
     *
     */
    refresh: function refresh() {
      Module._WorldCamera_Refresh(this.handle);
    },
    // /**
    //  *刷新相机俯仰参数
    //  * @memberOf WorldCamera#
    //  *
    //  */
    refreshPitch: function refreshPitch() {
      Module._WorldCamera_RefreshPitch(this.handle);
    },
    // /** 刷新相机俯仰参数
    //  *  @param {PIEVector3/Array} center -相机观察中心点
    //  *  @memberOf WorldCamera#
    //  */
    refreshCenterPitch: function refreshCenterPitch(center) {
      var centerArray = null;

      if (center instanceof PIEVector3) {
        centerArray = center.toArray();
      } else if (center instanceof Array) {
        centerArray = center;
      }

      if (centerArray) {
        var arrayCenter = new PIEArray(centerArray, PIEArrayType.Float64);

        Module._WorldCamera_RefreshCenterPitch(this.handle, arrayCenter.getHandle());

        arrayCenter.dispose();
      }
    },

    /** 相机观察点定位
     *  @param {PIEVector3/Array} center -相机观察中心点
     *  @param {Number}  distance -相机距离
     *  @param {Number}  headingAngle -相机旋转角度
     *  @param {Number}  pitchAngle -相机俯仰角度
     *  @param {Number}  bankAngle -相机偏转角度
     *  @memberOf WorldCamera#
     */
    setLookAt: function setLookAt(center, distance) {
      var headingAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var pitchAngle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var bankAngle = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var centerArray = null;

      if (center instanceof PIEVector3) {
        centerArray = center.toArray();
      } else if (center instanceof Array) {
        centerArray = center;
      }

      if (centerArray) {
        var headingRadian = headingAngle * Math.PI / 180;
        var pitchRadian = pitchAngle * Math.PI / 180;
        var bankRadian = bankAngle * Math.PI / 180;
        var arrayCenter = new PIEArray(centerArray, PIEArrayType.Float64);

        Module._WorldCamera_SetLookAt(this.handle, arrayCenter.getHandle(), distance, headingRadian, pitchRadian, bankRadian);

        arrayCenter.dispose();
      }
    },
    // /** 开始相机俯仰
    //  *  @memberOf WorldCamera#
    //  */
    beginPitch: function beginPitch() {
      Module._WorldCamera_BeginPitch(this.handle);
    },
    // /** 结束相机俯仰
    //  *  @memberOf WorldCamera#
    //  */
    endPitch: function endPitch() {
      Module._WorldCamera_EndPitch(this.handle);
    },

    /**
     *计算相机矩阵
     * @memberOf WorldCamera#
     *
     */
    computeMatrix: function computeMatrix() {
      Module._WorldCamera_ComputeMatrix(this.handle);
    },
    // setRenderCamera: function (referenceCenter3d, viewMatrix, projectionMatrix) {
    //     var arrayReferenceCenter3d = new PIEArray(referenceCenter3d, PIEArrayType.Float64);
    //     var arrayViewMatrix = new PIEArray(viewMatrix, PIEArrayType.Float64);
    //     var arrayProjectionMatrix = new PIEArray(projectionMatrix, PIEArrayType.Float64);
    //     var res = Module._WorldCamera_SetRenderCamera(this.handle, arrayReferenceCenter3d.getHandle(), arrayViewMatrix.getHandle(), arrayProjectionMatrix.getHandle());
    //     arrayReferenceCenter3d.dispose();
    //     arrayViewMatrix.dispose();
    //     arrayProjectionMatrix.dispose();
    //     return res;
    // },
    // /**
    //  *设置是否支持线程渲染
    //  * @param {Boolean} threadRendering -否线程渲染
    //  * @memberOf WorldCamera#
    //  *
    //  */
    setThreadRendering: function setThreadRendering(threadRendering) {
      Module._WorldCamera_SetThreadRendering(this.handle, threadRendering);
    },
    // /**
    //  *获取是否支持线程渲染
    //  *
    //  * @memberOf WorldCamera#
    //  * @returns {Boolean} true 是线程渲染 ,false 不是线程渲染
    //  */
    isThreadRendering: function isThreadRendering() {
      return Module._WorldCamera_IsThreadRendering(this.handle);
    },

    /**
     *设置是否自定义相机平滑
     * @param {Boolean} custom -是否自定义
     * @memberOf WorldCamera#
     *
     */
    setCustomSmooth: function setCustomSmooth(custom) {
      Module._WorldCamera_SetCustomSmooth(this.handle, custom);
    },

    /**
     *获取是否自定义相机平滑
     * @memberOf WorldCamera#
     * @return {Boolean} 返回是否自定义相机平滑
     */
    isCustomSmooth: function isCustomSmooth() {
      return Boolean(Module._WorldCamera_IsCustomSmooth(this.handle));
    },

    /**
     *设置是否刷新相机
     * @param {Boolean} refresh -是否刷新相机
     * @memberOf WorldCamera#
     *
     */
    setRefreshCamera: function setRefreshCamera(refresh) {
      Module._WorldCamera_SetRefreshCamera(this.handle, refresh);
    },

    /**
     *获取是否刷新相机
     *
     * @memberOf WorldCamera#
     * @returns {Boolean} refresh -是否刷新相机
     */
    isRefreshCamera: function isRefreshCamera() {
      return Boolean(Module._WorldCamera_IsRefreshCamera(this.handle));
    },

    /**
     *平滑移动相机(当IsSmooth时false时用户可在外部调用)
     * @memberOf WorldCamera#
     *
     */
    smooth: function smooth() {
      return Boolean(Module._WorldCamera_Smooth(this.handle));
    },

    /**
     * 设置瓦片多层级拉伸比例
     * @param {Number} lodScale -瓦片多层级拉伸比例
     * @memberOf WorldCamera#
     *
     */
    setTileLodScale: function setTileLodScale(lodScale) {
      Module._WorldCamera_SetTileLodScale(this.handle, lodScale);
    },

    /**
     * 获取瓦片多层级拉伸比例
     * @memberOf WorldCamera#
     * @returns {Number} lodScale -瓦片多层级拉伸比例
     */
    getTileLodScale: function getTileLodScale() {
      return Module._WorldCamera_GetTileLodScale(this.handle);
    },

    /**
     * 设置观察点位置
     * @param {(PIEVector3/Array)} lookAt -观察点位置
     * @memberOf WorldCamera#
     */
    setLookAtCenter: function setLookAtCenter(lookAt) {
      var lookAtArray = null;

      if (lookAt instanceof PIEVector3) {
        lookAtArray = lookAt.toArray();
      } else if (lookAt instanceof Array) {
        lookAtArray = lookAt;
      }

      if (lookAtArray) {
        var arrayLookAt = new PIEArray(lookAtArray, PIEArrayType.Float64);

        Module._WorldCamera_SetLookAtCenter(this.handle, arrayLookAt.getHandle());

        arrayLookAt.dispose();
      }
    },

    /**
     * 获取观察点位置
     *
     * @memberOf WorldCamera#
     * @returns {PIEVector3} 返回观察点位置
     */
    getLookAtCenter: function getLookAtCenter() {
      var arrayLookAt = new PIEArray(3, PIEArrayType.Float64);

      Module._WorldCamera_GetLookAtCenter(this.handle, arrayLookAt.getHandle());

      arrayLookAt.updateData();
      var array = arrayLookAt.toArray();
      arrayLookAt.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     *执行相机动画
     * @param {PIEAction} action -动画对象
     * @memberOf WorldCamera#
     *
     */
    runAction: function runAction(action) {
      Module._WorldCamera_RunAction(this.handle, action.getHandle());
    },

    /**
     *停止相机动画
     * @param {PIEAction} action -动画对象
     * @memberOf WorldCamera#
     *
     */
    stopAction: function stopAction(action) {
      Module._WorldCamera_StopAction(this.handle, action.getHandle());
    },

    /**
     *停止所有相机动画
     * @memberOf WorldCamera#
     *
     */
    stopAllActions: function stopAllActions() {
      Module._WorldCamera_StopAllActions(this.handle);
    },

    /**
     *相机动画是否完成
     * @memberOf WorldCamera#
     * @returns {Boolean} 返回是否完成
     *
     */
    isAllActionsDone: function isAllActionsDone() {
      return Module._WorldCamera_IsAllActionsDone(this.handle);
    } // /**
    //  * 设置是否支持VR渲染
    //  * @param {Boolean} vRRendering -是否线程渲染
    //  * @memberOf WorldCamera#
    //  */
    // setVRRendering: function (vRRendering) {
    //     Module._WorldCamera_SetVRRendering(this.handle, vRRendering);
    // },
    // /**
    //  * 获取是否支持VR渲染
    //  *
    //  * @memberOf WorldCamera#
    //  * @returns {Boolean} 返回是否线程渲染(true-是线程渲染， false-不是线程渲染)
    //  *
    //  */
    // isVRRendering: function () {
    //     return Module._WorldCamera_IsVRRendering(this.handle);
    // },

  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *  场景图层类型枚举
   * @readonly
   * @enum {number}
   */
  var PIEGlobeLayerType = {
    /** 未知图层 */
    UnKnown: -1,

    /** 基本要素图层 */
    BaseFeature: 1,

    /** 要素图层 */
    Feature: 3,

    /** 要素图层 */
    FeatureMap: 4,

    /** 基本栅格图层*/
    BaseRaster: 17,

    /** 栅格图层*/
    Raster: 19,

    /** 瓦片栅格图层*/
    TileRaster: 21,

    /**  高程图层*/
    Elevation: 31,

    /**  图形图层*/
    Graphics: 33,

    /**  渲染对象图层*/
    Renderable: 35,

    /**  渲染对象图层*/
    Plot: 37,

    /**  组合图层*/
    Composite: 65,

    /** 组图层*/
    Group: 67,
    // /** 基础地图图层*/
    // BaseMap: 69,
    // /** MVT图层*/
    // MVT: 70,

    /** 模型图层*/
    OSGBModel: 71,

    /** GE图层*/
    TileGEData: 72,

    /** 动态图层*/
    Dynamic: 257,

    /** 海图图层*/
    SeaMap: 73,

    /**mapbox矢量瓦片 */
    MapBoxData: 390
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维场景过滤器效果相关操作函数
   * @name GlobeEffectFilter
   * @class GlobeEffectFilter
   *
   */

  function PIEGlobeEffectFilter(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGlobeEffectFilter.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 获取名称
     *
     * @memberOf GlobeEffectFilter#
     * @returns {String} 返回名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Globe_EffectFilter_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置名称
     * @param {String} name -名称
     * @memberOf GlobeEffectFilter#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      var res = Module._Globe_EffectFilter_SetName(this.handle, strName);

      strName.dispose();
      return res;
    },

    /**
     * 获取是否可用
     *
     * @memberOf GlobeEffectFilter#
     * @returns {Boolean} 返回是否可用
     */
    isEnable: function isEnable() {
      return Module._Globe_EffectFilter_IsEnable(this.handle);
    },

    /**
     * 设置是否可用
     * @param {Boolean} enable -是否可用
     * @memberOf GlobeEffectFilter#
     */
    setEnable: function setEnable(enable) {
      Module._Globe_EffectFilter_SetEnable(this.handle, enable);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 效果组合器
   * @name GlobeEffectComposer
   */

  function PIEGlobeEffectComposer(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGlobeEffectComposer.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     *添加过滤器
     * @param {PIEGlobeEffectFilter} hEffectFilter -过滤器
     * @memberOf GlobeEffectComposer#
     */
    addFilter: function addFilter(hEffectFilter) {
      Module._Globe_EffectComposer_AddFilter(this.handle, hEffectFilter.getHandle());
    },

    /**
     * 获取过滤器
     * @param {Number} nIndex -索引
     * @memberOf GlobeEffectComposer#
     * @returns {PIEGlobeEffectFilter} 返回过滤器
     */
    getFilter: function getFilter(nIndex) {
      var handle = Module._Globe_EffectComposer_GetFilter(this.handle, nIndex);

      if (handle) {
        return new PIEGlobeEffectFilter(handle);
      }
    },

    /**
     * 移除过滤器
     * @param {Number} nIndex -索引
     * @memberOf GlobeEffectComposer#
     */
    removeFilter: function removeFilter(nIndex) {
      Module._Globe_EffectComposer_RemoveFilter(this.handle, nIndex);
    },

    /**
     * 移除所有的过滤器
     * @memberOf GlobeEffectComposer#
     */
    removeAllFilters: function removeAllFilters() {
      Module._Globe_EffectComposer_RemoveAllFilters(this.handle);
    },

    /**
     * 获取过滤器个数
     *
     * @memberOf GlobeEffectComposer#
     * @returns {Number} -过滤器个数
     */
    getFilterCount: function getFilterCount() {
      return Module._Globe_EffectComposer_GetFilterCount(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维组合图层操作函数
   * @name GlobeCompositeLayer
   * @extends GlobeLayer

   */

  function PIEGlobeCompositeLayer(handle, autoRelease) {
    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeCompositeLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    /**
     * 添加图层
     * @param {PIEGlobeLayer} globeLayer - 目标图层对象
     * @param {Boolean} addToHead -是否添加到图层顶部
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} 如果成功返回true 失败返回false
     *
     */
    addLayer: function addLayer(globeLayer, addToHead) {
      if (!addToHead) {
        addToHead = true;
      }

      return Boolean(Module._GlobeCompositeLayer_AddLayer(this.handle, globeLayer.getHandle(), addToHead));
    },

    /**
     * 根据图层名移除图层
     * @param {PIEGlobeLayer} globeLayer -目标图层对象
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} 如果成功返回true，失败返回false
     *
     */
    removeLayer: function removeLayer(globeLayer) {
      return Boolean(Module._GlobeCompositeLayer_RemoveLayer(this.handle, globeLayer.getHandle()));
    },

    /**
     * 根据图层序列号移除图层
     * @param {Number} index -目标图层序列号
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} 如果成功返回true，失败返回false
     *
     */
    removeLayerAt: function removeLayerAt(index) {
      return Boolean(Module._GlobeCompositeLayer_RemoveLayerAt(this.handle, index));
    },

    /**
     * 根据图层名获取图层
     * @param {String} name -目标图层名称
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {PIEGlobeLayer} 返回图层对象
     *
     */
    getLayer: function getLayer(name) {
      var strName = new PIEString$1(name);

      var hLayer = Module._GlobeCompositeLayer_GetLayer(this.handle, strName.getHandle());

      strName.dispose();
      return PIEGlobeLayerFactory.CreateInstance(hLayer);
    },

    /**
     * 根据图层序列号获取图层
     * @param {Number} index -目标图层名称
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {PIEGlobeLayer} 返回图层对象
     *
     */
    getLayerAt: function getLayerAt(index) {
      var hLayer = Module._GlobeCompositeLayer_GetLayerAt(this.handle, index);

      return PIEGlobeLayerFactory.CreateInstance(hLayer);
    },

    /**
     * 获取图层索引
     * @param {PIEGlobeLayer} globeLayer -图层对象
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Number} 成功返回当前图层的索引，失败返回-1
     *
     */
    getLayerIndex: function getLayerIndex(globeLayer) {
      return Module._GlobeCompositeLayer_GetLayerIndex(this.handle, globeLayer.getHandle());
    },

    /**
     * 获取图层总数
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Number} 如果成功返回图层总数
     *
     */
    getLayerCount: function getLayerCount() {
      return Module._GlobeCompositeLayer_GetLayerCount(this.handle);
    },

    /**
     * 移除所有图层
     * @memberOf GlobeCompositeLayer#
     *
     */
    removeAllLayers: function removeAllLayers() {
      Module._GlobeCompositeLayer_RemoveAllLayers(this.handle);
    },

    /**
     * 将指定图层上移
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerUp: function moveLayerUp(index) {
      return Boolean(Module._GlobeCompositeLayer_MoveLayerUp(this.handle, index));
    },

    /**
     * 将指定图层下移
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerDown: function moveLayerDown(index) {
      return Boolean(Module._GlobeCompositeLayer_MoveLayerDown(this.handle, index));
    },

    /**
     * 将指定图层移到最顶端
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerTop: function moveLayerTop(index) {
      return Boolean(Module._GlobeCompositeLayer_MoveLayerTop(this.handle, index));
    },

    /**
     * 将指定图层移到最底端
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerBottom: function moveLayerBottom(index) {
      return Boolean(Module._GlobeCompositeLayer_MoveLayerBottom(this.handle, index));
    },

    /**
     * 将指定图层移到指定位置
     * @param {Number} indexSrc -源图层索引
     * @param {Number} indexDest -目标位置索引
     *
     * @memberOf GlobeCompositeLayer#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerTo: function moveLayerTo(indexSrc, indexDest) {
      return Boolean(Module._GlobeCompositeLayer_MoveLayerTo(this.handle, indexSrc, indexDest));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维组图层
   * @name GlobeGroupLayer
   * @class GlobeGroupLayer
   *  三维组图层操作函数
   * @extends GlobeCompositeLayer
   *
   * @example
   * let globeGroupLayer = new PIE.GlobeGroupLayer()
   */

  function PIEGlobeGroupLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_GroupLayer_Create();
      autoRelease = true;
    }

    PIEGlobeCompositeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeGroupLayer.prototype = Object.assign(Object.create(PIEGlobeCompositeLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维图层基础操作函数
   * @name GlobeLayer
   *
   */

  function PIEGlobeLayer(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGlobeLayer.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 销毁对象
     * @memberOf GlobeLayer#
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._GlobeLayer_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 获取图层的类型
     *
     * @memberOf GlobeLayer#
     * @returns {PIEGlobeLayerType} 成功返回类型，失败返回NULL
     */
    getType: function getType() {
      return Module._GlobeLayer_GetType(this.handle);
    },

    /**
     * 设置图层的名字
     * @param {String} name -图层名
     * @memberOf GlobeLayer#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeLayer_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取图层的名字
     *
     * @memberOf GlobeLayer#
     * @returns {String} 图层名
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._GlobeLayer_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置图层是否可见
     * @param {Boolean} visible -是否可见
     * @memberOf GlobeLayer#
     */
    setVisible: function setVisible(visible) {
      Module._GlobeLayer_SetVisible(this.handle, visible);
    },

    /**
     * 获取图层是否可见
     *
     * @memberOf GlobeLayer#
     * @returns {Boolean} 可见返回true,不可见返回false
     */
    isVisible: function isVisible() {
      return Boolean(Module._GlobeLayer_IsVisible(this.handle));
    },

    /**
     * 设置图层的最大比例尺
     * @param {Number} scale -最大比例尺
     * @memberOf GlobeLayer#
     */
    setMaxVisibleScale: function setMaxVisibleScale(scale) {
      Module._GlobeLayer_SetMaxVisibleScale(this.handle, scale);
    },

    /**
     * 获取图层的最大比例尺
     *
     * @memberOf GlobeLayer#
     * @returns {Number} 如果成功返回比例尺值，失败返回0.0
     */
    getMaxVisibleScale: function getMaxVisibleScale() {
      return Module._GlobeLayer_GetMaxVisibleScale(this.handle);
    },

    /**
     * 设置图层的最小比例尺
     * @param {Number} scale -最小比例尺
     * @memberOf GlobeLayer#
     */
    setMinVisibleScale: function setMinVisibleScale(scale) {
      Module._GlobeLayer_SetMinVisibleScale(this.handle, scale);
    },

    /**
     * 获取图层的最小比例尺
     *
     * @memberOf GlobeLayer#
     * @returns {Number} 如果成功返回比例尺值，失败返回0.0
     */
    getMinVisibleScale: function getMinVisibleScale() {
      return Module._GlobeLayer_GetMinVisibleScale(this.handle);
    },

    /**
     * 设置图层是否总是可见
     * @param {Boolean} visible -是否总是可见
     * @memberOf GlobeLayer#
     */
    setAlwaysVisible: function setAlwaysVisible(visible) {
      Module._GlobeLayer_SetAlwaysVisible(this.handle, visible);
    },

    /**
     * 获取图层是否总是可见
     *
     * @memberOf GlobeLayer#
     * @returns {Boolean} 如果可见返回true，不可见返回false
     */
    isAlwaysVisible: function isAlwaysVisible() {
      return Boolean(Module._GlobeLayer_IsAlwaysVisible(this.handle));
    },

    /**
     * 获取图层范围
     *
     * @memberOf GlobeLayer#
     * @returns {PIEBounds} 图层范围
     */
    getBounds: function getBounds() {
      var arrayBounds = new PIEArray(4, PIEArrayType.Float64);

      Module._GlobeLayer_GetBounds(this.handle, arrayBounds.getHandle());

      arrayBounds.updateData();
      var bounds = PIEBounds.fromArray(arrayBounds);
      arrayBounds.dispose();
      return bounds;
    },

    /**
     * 获取图层投影对象
     *
     * @memberOf GlobeLayer#
     * @returns {PIESpatialReference} 投影对象
     */
    getSpatialReference: function getSpatialReference() {
      var handle = Module._GlobeLayer_GetSpatialReference(this.handle);

      if (handle) {
        return new PIESpatialReference(handle);
      }

      return null;
    },

    /**
     * 获取图层的父图层
     *
     * @memberOf GlobeLayer#
     * @returns {PIEGlobeLayer} 图层的父图层
     */
    getParent: function getParent() {
      var handle = Module._GlobeLayer_GetParent(this.handle);

      if (handle) {
        return PIEGlobeLayerFactory.CreateInstance(handle);
      }

      return null;
    },

    /**
     * 获取特效组合对象
     *
     * @memberOf GlobeLayer#
     * @returns {PIEGlobeEffectComposer} 返回特效组合对象  （不支持PIEGlobeGraphicsLayer）
     */
    getEffectComposer: function getEffectComposer() {
      var handle = Module._Globe_Layer_GetEffectComposer(this.handle);

      if (handle) {
        return new PIEGlobeEffectComposer(handle);
      }

      return null;
    },

    /**
     * 判断图层缓存是否已经准备好
     *
     * @memberOf GlobeLayer#
     * @returns {Boolean} 缓存是否已经准备好
     */
    isCacheReady: function isCacheReady() {
      return Module._Globe_Layer_IsCacheReady(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 图层选择集基础操作相关函数
   * @name Selection
   *
   */
  function PIESelection(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESelection.prototype, {
    /**
     * 取消选中所有对象
     * @memberOf Selection#
     *
     */
    removeAll: function removeAll() {
      Module._Selection_RemoveAll(this.handle);
    },

    /**
     * 获取选中集大小
     *
     * @memberOf Selection#
     * @returns {Number} 返回选中对象集中选中对象的数量
     *
     */
    getSize: function getSize() {
      return Module._Selection_GetSize(this.handle);
    },

    /**
     * 获取选中对象集中指定索引值的选中对象的ID
     * @param {Number} index -选中对象的索引值
     * @memberOf Selection#
     *
     * @returns {Number} 返回选中对象集中指定索引值的选中对象的ID
     *
     */
    getAt: function getAt(index) {
      return Module._Selection_GetAt(this.handle, index);
    },

    /**
     * 设置选中对象集中指定索引值的选中对象的ID
     * @param {Number} index -选中对象的索引值
     * @param {Number} ID -选中对象的ID
     * @memberOf Selection#
     *
     * @returns {Boolean} 返回是否成功设置选中对象集中指定索引值的选中对象的ID
     *
     */
    setAt: function setAt(index, ID) {
      return Module._Selection_SetAt(this.handle, index, ID);
    },

    /**
     * 选中对象集中增加选中对象ID
     * @param {Number} ID -选中对象的ID
     * @memberOf Selection#
     *
     * @returns {Number} 返回选中对象集中对象的个数
     *
     */
    add: function add(ID) {
      return Module._Selection_Add(this.handle, ID);
    },

    /**
     * 选中对象集中指定索引值处插入选中对象的ID
     * @param {Number} index -选中对象的索引值
     * @param {Number} ID -选中对象的ID
     * @memberOf Selection#
     *
     * @returns {Boolean} 返回选中对象集中指定索引处插入选中对象的ID是否成功
     *
     */
    insertAt: function insertAt(index, ID) {
      return Module._Selection_InsertAt(this.handle, index, ID);
    },

    /**
     * 查找指定ID在选择集中的索引
     * @param {Number} ID -选中对象的ID值
     * @param {Number} searchCount -查询个数
     * @memberOf Selection#
     *
     * @returns {Number} 返回索引
     *
     */
    findID: function findID(ID, searchCount) {
      return Module._Selection_FindID(this.handle, ID, searchCount);
    },

    /**
     * 删除指定索引后的count个选中对象
     * @param {Number} index -选中对象的索引值
     * @param {Number} count -索引后的count选中对象
     * @memberOf Selection#
     *
     * @returns {Number} 返回真正删除的个数
     *
     */
    removeAt: function removeAt(index, count) {
      return Module._Selection_RemoveAt(this.handle, index, count);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *  矢量渲染器类型枚举
   * @readonly
   * @enum {String}
   */
  var PIEFeatureRenderType = {
    /**  未知渲染器  */
    Null: -1,

    /**  简单矢量渲染器  */
    Simple: 1,

    /** 分段专题图  */
    ThemeRange: 3,

    /** 标签专题图  */
    ThemeLabel: 5,

    /** 唯一值专题图  */
    ThemeUnique: 7,

    /** 分类渲染器 只有分类渲染器才支持矢量沿模型显示或者分类显示  */
    Classify: 8,

    /** 军图渲染器 */
    SMS: 10,

    /** 海图渲染器 */
    Seamap: 11
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   *
   * 矢量渲染器操作函数
   * @name FeatureRenderer
   *
   */
  function PIEFeatureRenderer(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEFeatureRenderer.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     *
     * 删除渲染器对象
     * @memberOf FeatureRenderer#
     *
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._FeatureRenderer_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     *
     * 获取渲染器类型
     *
     * @memberOf FeatureRenderer#
     * @returns {PIEFeatureRendererType} 返回渲染器类型
     */
    getType: function getType() {
      return Module._FeatureRenderer_GetType(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   *创建简单渲染器对象
   * @name SimpleFeatureRenderer
   *@class SimpleFeatureRenderer
   * 简单矢量渲染器操作函数
   *
   * @extends FeatureRenderer
   * @example
   *
   *let simpleFeatureRenderer = new PIE.SimpleFeatureRenderer();
   */

  function PIESimpleFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._SFeatureRenderer_Create();
      autoRelease = true;
    }

    PIEFeatureRenderer.call(this, handle, autoRelease);
  }

  PIESimpleFeatureRenderer.prototype = Object.assign(Object.create(PIEFeatureRenderer.prototype), {
    /**
     *设置渲染器的风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格句柄内部是否克隆(如果是true，风格句柄需要外部释放，否则会出现内存泄露；如果是false，风格句柄由内部保存并释放，外部不能释放，否则会出现崩溃) 默认值（false）
     * @memberOf SimpleFeatureRenderer#
     */
    setStyle: function setStyle(style) {
      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      Module._SFeatureRenderer_SetStyle(this.handle, style.getHandle(), clone);
    },

    /**
     *获取渲染器风格
     *
     * @memberOf SimpleFeatureRenderer#
     * @returns {PIEStyle} 返回风格对象，失败返回NULL
     */
    getStyle: function getStyle() {
      var hStyle = Module._SFeatureRenderer_GetStyle(this.handle);

      return PIEStyleFactory.CreateInstance(hStyle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 创建分类矢量渲染器对象
   * @name ClassifyFeatureRenderer
   *@class ClassifyFeatureRenderer
   * 分类矢量渲染器操作函数
   *
   * @extends SimpleFeatureRenderer
   * @example
   *
   *let classifyFeatureRenderer = PIE.ClassifyFeatureRenderer();
   */

  function PIEClassifyFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._ClassifyFeatureRenderer_Create();
      autoRelease = true;
    }

    PIESimpleFeatureRenderer.call(this, handle, autoRelease);
  }

  PIEClassifyFeatureRenderer.prototype = Object.assign(Object.create(PIESimpleFeatureRenderer.prototype), {
    /**
     *设置渲染器的底部字段名称
     * @param {String} strField -字段名称
     * @memberOf ClassifyFeatureRenderer#
     */
    setBottomField: function setBottomField(strField) {
      var Field = new PIEString$1(strField);

      Module._ClassifyFeatureRenderer_SetBottomField(this.handle, Field.handle);
    },

    /**
     *获取渲染器的底部字段名称
     * @returns {String} 返回字段名称
     * @memberOf ClassifyFeatureRenderer#
     */
    getBottomField: function getBottomField() {
      var BottomField = new PIEString$1(256);

      Module._ClassifyFeatureRenderer_GetBottomField(this.handle, BottomField.getHandle());

      var strBottomField = BottomField.toString();
      BottomField.dispose();
      return strBottomField;
    },

    /**
     *设置渲染器的顶部字段名称
     * @param {String} field -字段名称
     * @memberOf ClassifyFeatureRenderer#
     */
    setTopField: function setTopField(field) {
      var strField = new PIEString$1(field);

      Module._ClassifyFeatureRenderer_SetTopField(this.handle, strField.getHandle());

      strField.dispose();
    },

    /**
     *获取渲染器的顶部字段名称
     * @returns {String} 返回字段名称
     * @memberOf ClassifyFeatureRenderer#
     */
    getTopField: function getTopField() {
      var BottomField = new PIEString$1(256);

      Module._ClassifyFeatureRenderer_GetTopField(this.handle, BottomField.getHandle());

      var strBottomField = BottomField.toString();
      BottomField.dispose();
      return strBottomField;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 创建分段项对象
   * @name RangeItem
   * @class RangeItem
   * 分段项操作函数
   *
   * @example
   * let rangeItem = new PIE.RangeItem()
   */

  function PIERangeItem(handle, autoRelease) {
    if (handle == null) {
      this.handle = Module._RangeItem_Create();
      this.autoRelease = true;
    } else {
      this.handle = handle;
      this.autoRelease = false;
    }
  }

  Object.assign(PIERangeItem.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._RangeItem_Delete(this.handle);

        this.handle = null;
      } else {
        this.handle = null;
      }
    },

    /**
     * 设置分段项是否可见
     * @param {Boolean} visible -分段项是否可见
     * @memberOf RangeItem#
     */
    setVisible: function setVisible(visible) {
      Module._RangeItem_SetVisible(this.handle, visible);
    },

    /**
     * 获取分段项是否可见
     * @memberOf RangeItem#
     * @returns {Boolean} 返回分段项是否可见
     */
    isVisible: function isVisible() {
      return Boolean(Module._RangeItem_IsVisible(this.handle));
    },

    /**
     * 设置分段项标题
     * @param {String} caption -分段项标题
     * @memberOf RangeItem#
     */
    setCaption: function setCaption(caption) {
      var strCaption = new PIEString$1(caption);

      Module._RangeItem_SetCaption(this.handle, strCaption.getHandle());

      strCaption.dispose();
    },

    /**
     * 获取分段项标题
     *
     * @memberOf RangeItem#
     * @returns {String} 返回分段项标题
     * @example
     * let rangeItem = new PIE.RangeItem()
     * var caption = rangeItem.getCaption()
     */
    getCaption: function getCaption() {
      var strCaption = new PIEString$1(256);

      Module._RangeItem_GetCaption(this.handle, strCaption.getHandle());

      var caption = strCaption.toString();
      strCaption.dispose();
      return caption;
    },

    /**
     * 设置分段项风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格句柄内部是否克隆(如果是true，风格句柄需要外部释放，否则会出现内存泄露；如果是false，风格句柄由内部保存并释放，外部不能释放，否则会出现崩溃) 默认值（false）
     * @memberOf RangeItem#
     */
    setStyle: function setStyle(style) {
      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      Module._RangeItem_SetStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取分段项风格
     *
     * @memberOf RangeItem#
     * @returns {PIEVectorStyle|PIETextStyle|PIESymbolStyle|PIEModelStyle} 返回分段项对象，失败返回NULL
     *
     */
    getStyle: function getStyle() {
      var hStyle = Module._RangeItem_GetStyle(this.handle);

      return PIEStyleFactory.CreateInstance(hStyle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 创建分段专题图渲染器对象
   * @name ThemeRangeFeatureRenderer
   * @class ThemeRangeFeatureRenderer
   * 分段专题图渲染器对象
   *
   * @returns {PIEThemeRangeFeatureRenderer} 成功返回渲染器对象，否则返回NULL
   * @extends FeatureRenderer
   * @example
   * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
   */

  function PIEThemeRangeFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._TRFeatureRenderer_Create();
      autoRelease = true;
    }

    PIEFeatureRenderer.call(this, handle, autoRelease);
  }

  PIEThemeRangeFeatureRenderer.prototype = Object.assign(Object.create(PIEFeatureRenderer.prototype), {
    /**
     * 制作分段专题图
     * @param {PIEDataSource} dataSource -数据源对象
     * @param {Number} count -分段个数
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {Boolean} 成功返回true，否则返回false
     */
    makeDefault: function makeDefault(dataSource, count) {
      return Boolean(Module._TRFeatureRenderer_MakeDefault(this.handle, dataSource.getDataset().getHandle(), count));
    },

    /**
     * 查询数据集中字段值的最小值和最大值
     * @param {PIEDataset} dataset -数据集对象
     * @param {String} expression -分段专题图字段
     * @memberOf ThemeRangeFeatureRenderer#
     *
     * @returns {Array} 返回最小值和最大值
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var extremes = themeRangeFeatureRenderer.queryExtremes(dataset, expression);
     */
    queryExtremes: function queryExtremes(dataset, expression) {
      var strExpression = new PIEString$1(expression);
      var arrayExtremes = new PIEArray(2, PIEArrayType.Float64);

      Module._TRFeatureRenderer_QueryExtremes(this.handle, dataset.getHandle(), strExpression.getHandle(), arrayExtremes.getHandle());

      strExpression.dispose();
      arrayExtremes.updateData();
      var extremes = arrayExtremes.toArray();
      arrayExtremes.dispose();
      return extremes;
    },

    /**
     * 设置渲染器的分段专题图字段
     * @param {String} expression -分段专题图字段
     * @memberOf ThemeRangeFeatureRenderer#
     */
    setRangeExpression: function setRangeExpression(expression) {
      var strExpression = new PIEString$1(expression);

      Module._TRFeatureRenderer_SetRangeExpression(this.handle, strExpression.getHandle());

      strExpression.dispose();
    },

    /**
     * 获取渲染器的分段专题图字段
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {String} 返回分段专题图字段
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var expression = themeRangeFeatureRenderer.getRangeExpression();
     */
    getRangeExpression: function getRangeExpression() {
      var strExpression = new PIEString$1(256);

      Module._TRFeatureRenderer_GetRangeExpression(this.handle, strExpression.getHandle());

      var expression = strExpression.toString();
      strExpression.dispose();
      return expression;
    },

    /**
     * 是否降序排列分段范围数组
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {Boolean} 返回是否是降序排列分段范围的数组
     *
     */
    isDescending: function isDescending() {
      return Boolean(Module._TRFeatureRenderer_IsDescending(this.handle));
    },

    /**
     * 设置降序排列分段范围数组
     * @param {Boolean} bDescending 是否降序排列
     * @memberOf ThemeRangeFeatureRenderer#
     */
    setDescending: function setDescending(descending) {
      Module._TRFeatureRenderer_SetDescending(this.handle, descending);
    },

    /**
     * 获取分段范围值数组个数
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {Number} 返回分段范围值数组个数
     */
    getRangeValueCount: function getRangeValueCount() {
      return Module._TRFeatureRenderer_GetRangeValueCount(this.handle);
    },

    /**
     * 设置分段范围值数组
     * @param {Array} RangeValueArray -分段范围值数组
     * @memberOf ThemeRangeFeatureRenderer#
     */
    setRangeValues: function setRangeValues(RangeValueArray) {
      var arrayRange = new PIEArray(RangeValueArray, PIEArrayType.Float64);

      Module._TRFeatureRenderer_SetRangeValues(this.handle, arrayRange.getHandle(), RangeValueArray.length);

      arrayRange.dispose();
    },

    /**
     * 获取分段范围值数组
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {Array} 返回分段范围值数组
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var rangeValues = themeRangeFeatureRenderer.getRangeValues();
     */
    getRangeValues: function getRangeValues() {
      var count = this.getRangeValueCount();

      if (count) {
        var arrayRangeValues = new PIEArray(count, PIEArrayType.Float64);

        Module._TRFeatureRenderer_GetRangeValues(this.handle, arrayRangeValues.getHandle(), count);

        arrayRangeValues.updateData();
        var rangeValues = arrayRangeValues.toArray();
        arrayRangeValues.dispose();
        return rangeValues;
      }

      return null;
    },

    /**
     * 设置分段项数组
     * @param {Array} rangeItems -分段项数组(PIERangeItem为数组对象)
     * @memberOf ThemeRangeFeatureRenderer#
     *
     */
    setRangeItems: function setRangeItems(rangeItems) {
      var arrayRangeItem = [];

      for (var i = 0; i < rangeItems.length; i++) {
        var item = rangeItems[i];
        arrayRangeItem.push(item.getHandle());
      }

      if (arrayRangeItem.length > 0) {
        var rangeItemArray = new PIEArray(arrayRangeItem, PIEArrayType.UInt32);

        Module._TRFeatureRenderer_SetRangeItems(this.handle, rangeItemArray.getHandle(), rangeItems.length);

        rangeItemArray.dispose();
      }
    },

    /**
     * 获取分段项数组个数(段范围数组比分段项数组的个数>1)
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {Number} 返回分段项数组个数
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var rangeItemCount = themeRangeFeatureRenderer.getRangeItemCount();
     */
    getRangeItemCount: function getRangeItemCount() {
      return Module._TRFeatureRenderer_GetRangeItemCount(this.handle);
    },

    /**
     * 获取分段项数组
     *
     * @memberOf ThemeRangeFeatureRenderer#
     * @returns {Array} 返回分段项
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var rangeItems = themeRangeFeatureRenderer.getRangeItems();
     */
    getRangeItems: function getRangeItems() {
      var count = this.getRangeItemCount();

      if (count) {
        var arrayRangeItems = new PIEArray(count, PIEArrayType.UInt32);

        Module._TRFeatureRenderer_GetRangeItems(this.handle, arrayRangeItems.getHandle(), count);

        arrayRangeItems.updateData();
        var items = arrayRangeItems.toArray();
        var rangeItems = [];

        for (var i = 0; i < count; i++) {
          var item = new PIERangeItem(items[i]);
          rangeItems.push(item);
        }

        arrayRangeItems.dispose();
        return rangeItems;
      }

      return null;
    },

    /**
     * 获取指定索引分段范围值
     * @param {Number} index -分段范围值数组索引
     * @memberOf ThemeRangeFeatureRenderer#
     *
     * @returns {Number} 返回指定索引的分段范围值
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var rangeValueAt = themeRangeFeatureRenderer.getRangeValueAt();
     */
    getRangeValueAt: function getRangeValueAt(index) {
      return Module._TRFeatureRenderer_GetRangeValueAt(this.handle, index);
    },

    /**
     * 设置指定索引分段项
     * @param {Number} index -分段范围值数组索引
     * @param {Number} value -分段范围值
     * @memberOf ThemeRangeFeatureRenderer#
     */
    setRangeValueAt: function setRangeValueAt(index, value) {
      Module._TRFeatureRenderer_SetRangeValueAt(this.handle, index, value);
    },

    /**
     * 获取指定索引分段项
     * @param {Number} index -分段项数组索引
     * @memberOf ThemeRangeFeatureRenderer#
     *
     * @returns {PIERangeItem} 返回指定索引的分段项
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var rangeItemAt = themeRangeFeatureRenderer.getRangeItemAt(index);
     */
    getRangeItemAt: function getRangeItemAt(index) {
      var hRangeItem = Module._TRFeatureRenderer_GetRangeItemAt(this.handle, index);

      if (hRangeItem) {
        return new PIERangeItem(hRangeItem);
      }

      return null;
    },

    /**
     * 设置指定索引分段项
     * @param {Number} index -分段项数组索引
     * @param {PIERangeItem} rangeItem -分段项
     * @memberOf ThemeRangeFeatureRenderer#
     */
    setRangeItemAt: function setRangeItemAt(index, rangeItem) {
      if (rangeItem instanceof PIERangeItem) {
        Module._TRFeatureRenderer_SetRangeItemAt(this.handle, index, rangeItem.getHandle());
      }
    },

    /**
     * 通过字段值查找项
     * @param {Number} value -字段值
     * @memberOf ThemeRangeFeatureRenderer#
     *
     * @returns {PIERangeItem} 返回指定字段值的分段项
     * @example
     * let themeRangeFeatureRenderer = new PIE.ThemeRangeFeatureRenderer();
     * var rangeItem = themeRangeFeatureRenderer.findRangeItem(value);
     */
    findRangeItem: function findRangeItem(value) {
      var hRangeItem = Module._TRFeatureRenderer_FindRangeItem(this.handle, value);

      if (hRangeItem) {
        return new PIERangeItem(hRangeItem);
      }

      return null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 创建标签专题图渲染器对象
   * @name ThemeLabelFeatureRenderer
   * @class ThemeLabelFeatureRenderer
   * 标签专题图渲染器操作函数
   *
   * @returns {PIEThemeLabelFeatureRenderer} 成功返回渲染器对象，否则返回NULL
   * @extends FeatureRenderer
   * @example
   * let themeLabelFeatureRenderer = new PIE.ThemeLabelFeatureRenderer()
   */

  function PIEThemeLabelFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._TLFeatureRenderer_Create();
      autoRelease = true;
    }

    PIEFeatureRenderer.call(this, handle, autoRelease);
  }

  PIEThemeLabelFeatureRenderer.prototype = Object.assign(Object.create(PIEFeatureRenderer.prototype), {
    /**
     * 制作标签专题图
     * @param {PIEFeatureDatasource} featureDataSource -矢量数据源对象
     * @memberOf ThemeLabelFeatureRenderer#
     * @return {Boolean} 成功返回true，否则返回false
     */
    makeDefault: function makeDefault(featureDataSource) {
      return Boolean(Module._TLFeatureRenderer_MakeDefault(this.handle, featureDataSource.getDataset().getHandle()));
    },

    /**
     * 设置渲染器的标签专题图字段
     * @param {String} expression -标签专题图字段
     * @memberOf ThemeLabelFeatureRenderer#
     */
    setTextExpression: function setTextExpression(expression) {
      var strExpression = new PIEString$1(expression);

      Module._TLFeatureRenderer_SetTextExpression(this.handle, strExpression.getHandle());

      strExpression.dispose();
    },

    /**
     * 获取渲染器的标签专题图字段
     * @memberOf ThemeLabelFeatureRenderer#
     * @returns {String} 返回标签专题图字段
     *
     */
    getTextExpression: function getTextExpression() {
      var strExpression = new PIEString$1(256);

      Module._TLFeatureRenderer_GetTextExpression(this.handle, strExpression.getHandle());

      var expression = strExpression.toString();
      strExpression.dispose();
      return expression;
    },

    /**
     * 设置渲染器的风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格句柄内部是否克隆(如果是true，风格句柄需要外部释放，否则会出现内存泄露；如果是false，风格句柄由内部保存并释放，外部不能释放，否则会出现崩溃) 默认值（false）
     * @memberOf ThemeLabelFeatureRenderer#
     */
    setStyle: function setStyle(style) {
      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      Module._TLFeatureRenderer_SetStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取渲染器的风格
     *
     * @memberOf ThemeLabelFeatureRenderer#
     * @returns {PIEStyle}  返回渲染器的风格，异常返回NULL
     */
    getStyle: function getStyle() {
      var hStyle = Module._TLFeatureRenderer_GetStyle(this.handle);

      return PIEStyleFactory.CreateInstance(hStyle);
    }
  });

  function PIEFeatureRenderFactory() {}

  Object.assign(PIEFeatureRenderFactory.prototype, {});

  PIEFeatureRenderFactory.CreateInstance = function (hRender) {
    var render = new PIEFeatureRenderer(hRender);
    var type = render.getType();

    if (type == PIEFeatureRenderType.Simple) {
      return new PIESimpleFeatureRenderer(hRender);
    } else if (type == PIEFeatureRenderType.Classify) {
      return new PIEClassifyFeatureRenderer(hRender);
    } else if (type == PIEFeatureRenderType.ThemeRange) {
      return new PIEThemeRangeFeatureRenderer(hRender);
    } else if (type == PIEFeatureRenderType.ThemeLabel) {
      return new PIEThemeLabelFeatureRenderer(hRender);
    } //  } else if (strRenderableType == PIEFeatureRenderType.ThemePie) {
    //     return new PIERenderPolyline3D(hRender);
    // }
    else {
      return new PIEFeatureRenderer(hRender);
    }
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 三维矢量图层基本操作函数
   * @name GlobeBaseFeatureLayer
   * @extends GlobeLayer
   *
   */

  function PIEGlobeBaseFeatureLayer(handle, autoRelease) {
    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeBaseFeatureLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    // /**
    //  * 设置数据源名称
    //  * @param {String} name -目标数据源名称
    //  * @memberOf GlobeBaseFeatureLayer#
    //  *
    //  */
    setDataSourceName: function setDataSourceName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeBaseFeatureLayer_SetDataSourceName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取数据源名称
    //  *
    //  * @memberOf GlobeBaseFeatureLayer#
    //  * @returns {String}  -返回数据源名称
    //  *
    //  */
    getDataSourceName: function getDataSourceName() {
      var strName = new PIEString$1(256);

      Module._GlobeBaseFeatureLayer_GetDataSourceName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },
    // /**
    //  * 设置数据集名称
    //  * @param {String} name -目标数据集名称
    //  * @memberOf GlobeBaseFeatureLayer#
    //  *
    //  */
    setDatasetName: function setDatasetName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeBaseFeatureLayer_SetDatasetName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取数据集名称
    //  *
    //  * @memberOf GlobeBaseFeatureLayer#
    //  * @returns {String} -返回数据集名称
    //  *
    //  */
    getDatasetName: function getDatasetName() {
      var strName = new PIEString$1(256);

      Module._GlobeBaseFeatureLayer_GetDatasetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 获取数据源
     *
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {PIEFeatureDataSource}  -返回数据源
     *
     */
    getDataSource: function getDataSource() {
      var hDataset = Module._GlobeBaseFeatureLayer_GetDataset(this.handle);

      var hDataSource = Module._Dataset_GetDataSource(hDataset);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },

    /**
     * 设置数据源
     * @param {PIEDataSource} datasource -数据源对象
     * @memberOf GlobeBaseFeatureLayer#
     *
     */
    setDataSource: function setDataSource(datasource) {
      Module._GlobeBaseFeatureLayer_SetDataset(this.handle, datasource.getDataset().getHandle());
    },
    setDataset: function setDataset(dataset) {
      Module._GlobeBaseFeatureLayer_SetDataset(this.handle, dataset.getHandle());
    },
    getDataset: function getDataset() {
      var hDataset = Module._GlobeBaseFeatureLayer_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(hDataset);
    },

    /**
     * 设置要素图层渲染器
     * @param {PIEFeatureRenderer} featureRenderer -要素渲染器对象
     * @memberOf GlobeBaseFeatureLayer#
     *
     */
    setRenderer: function setRenderer(featureRenderer) {
      Module._GlobeBaseFeatureLayer_SetRenderer(this.handle, featureRenderer.getHandle());
    },

    /**
     * 获取要素图层渲染器
     * @memberOf GlobeBaseFeatureLayer#
     *
     * @returns {PIEFeatureRenderer} 成功返回要素渲染器对象，失败返回null
     */
    getRenderer: function getRenderer() {
      var handle = Module._GlobeBaseFeatureLayer_GetRenderer(this.handle);

      if (handle) {
        return PIEFeatureRenderFactory.CreateInstance(handle);
      }
    },

    /**
     * 设置图层是否可选择
     * @param {Boolean} isSelectable -是否可选择
     * @memberOf GlobeBaseFeatureLayer#
     *
     */
    setSelectable: function setSelectable(isSelectable) {
      Module._GlobeBaseFeatureLayer_SetSelectable(this.handle, isSelectable);
    },

    /**
     * 判断图层是否可选
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 可见返回true，不可见返回false
     */
    isSelectable: function isSelectable() {
      return Boolean(Module._GlobeBaseFeatureLayer_IsSelectable(this.handle));
    },

    /**
     * 获取图层选择集
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {PIESelection} 成功返回选中的对象，失败返回null
     */
    getSelection: function getSelection() {
      var handle = Module._GlobeBaseFeatureLayer_GetSelection(this.handle);

      return new PIESelection(handle);
    },

    /**
     * 清空要素图层选择集
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 是否清空成功
     */
    clearSelection: function clearSelection() {
      return Boolean(Module._GlobeBaseFeatureLayer_ClearSelection(this.handle));
    },

    /**
     * 添加几何对象
     * @param {PIEGeometry} geometry -几何对象
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Number} 几何对象id
     */
    addGemetry: function addGemetry(geometry) {
      geometry.setAutoRelease(false);
      return Module._GlobeBaseFeatureLayer_AddGeometry(this.handle, geometry.getHandle());
    },

    /**
     * 添加几何对象数组
     * @param {Array} geometrys -几何对象数组
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 是否添加成功
     */
    addGemetrys: function addGemetrys(geometrys) {
      var arrayHandles = [];

      for (var i = 0; i < geometrys.length; ++i) {
        var geometry = geometrys[i];
        geometry.setAutoRelease(false);
        arrayHandles.push(geometry.getHandle());
      }

      var arrays = new PIEArray(arrayHandles, PIEArrayType.Int32);

      var result = Module._GlobeBaseFeatureLayer_AddGeometrys(this.handle, arrays.getHandle(), geometrys.length);

      arrays.dispose();
      return Boolean(result);
    },

    /**
     * 更新几何对象
     * @param {PIEGeometry} geometry -几何对象
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 是否更新成功
     */
    updateGeometry: function updateGeometry(geometry) {
      return Boolean(Module._GlobeBaseFeatureLayer_UpdateGeometry(this.handle, geometry.getHandle()));
    },

    /**
     * 更新几何对象数组
     * @param {Array} geometrys -几何对象数组
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 是否更新成功
     */
    updateGeometrys: function updateGeometrys(geometrys) {
      var arrayHandles = [];

      for (var i = 0; i < geometrys.length; ++i) {
        var geometry = geometrys[i];
        arrayHandles.push(geometry.getHandle());
      }

      var arrays = new PIEArray(arrayHandles, PIEArrayType.Int32);

      var result = Module._GlobeBaseFeatureLayer_UpdateGeometrys(this.handle, arrays.getHandle(), geometrys.length);

      arrays.dispose();
      return Boolean(result);
    },

    /**
     * 删除几何对象
     * @param {Number} id -几何对象id
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 是否更新成功
     */
    deleteGeometry: function deleteGeometry(id) {
      return Boolean(Module._GlobeBaseFeatureLayer_DeleteGeometry(this.handle, id));
    },

    /**
     * 删除几何对象数组
     * @param {Array} idList -几何对象id数组
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {Boolean} 是否删除成功
     */
    deleteGeometrys: function deleteGeometrys(idList) {
      var arrayRange = new PIEArray(idList, PIEArrayType.Int32);

      var result = Module._GlobeBaseFeatureLayer_DeleteGeometrys(this.handle, arrayRange.getHandle(), idList.length);

      arrayRange.dispose();
      return Boolean(result);
    },

    /**
     * 获取几何对象
     * @param {Number} id -几何对象id
     * @memberOf GlobeBaseFeatureLayer#
     * @returns {PIEGeometry} 几何对象
     */
    getGeometry: function getGeometry(id) {
      var hGeometry = Module._GlobeBaseFeatureLayer_GetGeometry(this.handle, id);

      return PIEGeometryFactory.CreateInstance(hGeometry);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维矢量数据图层
   * @name GlobeFeatureLayer
   * @class GlobeFeatureLayer
   * 三维矢量数据图层操作函数
   * @extends GlobeBaseFeatureLayer
   *
   * @example
   * let globeFeatureLayer = new PIE.GlobeFeatureLayer()
   */

  function PIEGlobeFeatureLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_FeatureLayer_Create();
      autoRelease = true;
    }

    PIEGlobeBaseFeatureLayer.call(this, handle, autoRelease);
  }

  PIEGlobeFeatureLayer.prototype = Object.assign(Object.create(PIEGlobeBaseFeatureLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 创建三维矢量图层
   * @name GlobeFeatureMapLayer
   * @class GlobeFeatureMapLayer
   * 三维矢量图层基本操作函数
   * @extends GlobeCompostieLayer
   *
   */

  function PIEGlobeFeatureMapLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._GlobeFeatureMapLayer_Create();
      autoRelease = true;
    }

    PIEGlobeCompositeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeFeatureMapLayer.prototype = Object.assign(Object.create(PIEGlobeCompositeLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 栅格渲染器基础操作函数
   * @name RasterRenderer
   *
   */

  function PIERasterRenderer(handle) {
    this.handle = handle;
  }

  function PIEPreRasterFilter(handle) {
    this.handle = handle;
  }

  function PIEAfterRasterFilter(handle) {
    this.handle = handle;
  }

  Object.assign(PIERasterRenderer.prototype, {
    /**
     * 获取栅格渲染器类型
     *
     * @memberOf RasterRenderer#
     * @returns {PIERasterRendererType} 返回栅格渲染器类型
     *
     */
    getType: function getType() {
      return Module._RasterRenderer_GetType(this.handle);
    },

    /**
     * 释放栅格渲染器对象
     * @memberOf RasterRenderer#
     *
     */
    "delete": function _delete() {
      Module._RasterRenderer_Delete(this.handle);
    },

    /**
     * 获取前置过滤器数量
     *
     * @memberOf RasterRenderer#
     * @returns {Number} 前置过滤器数量
     *
     */
    getPreRasterFilterCount: function getPreRasterFilterCount() {
      return Module._RasterRenderer_GetPreRasterFilterCount(this.handle);
    },

    /**
     * 根据索引获取前置过滤器
     * @param {Number} index -前置过滤器索引
     * @memberOf RasterRenderer#
     *
     * @returns {PIEPreRasterFilter} 前置过滤器索引
     *
     */
    getPreRasterFilterAt: function getPreRasterFilterAt(index) {
      var handle = Module._RasterRenderer_GetPreRasterFilterAt(this.handle, index);

      if (handle) {
        return new PIEPreRasterFilter(handle);
      }
    },

    /**
     * 根据类ID获取前置过滤器
     * @param {String} classID -前置过滤器ID
     * @memberOf RasterRenderer#
     *
     * @returns {PIEPreRasterFilter} 前置过滤器
     *
     */
    getPreRasterFilter: function getPreRasterFilter(classID) {
      var strClassID = new PIEString$1(classID);

      var handle = Module._RasterRenderer_GetPreRasterFilter(this.handle, strClassID.getHandle());

      strClassID.dispose();

      if (handle) {
        return new PIEPreRasterFilter(handle);
      }
    },

    /**
     * 添加前置过滤器
     * @param {PIEPreRasterFilter} preFilter -前置过滤器对象
     * @memberOf RasterRenderer#
     *
     * @returns {Boolean} 添加是否成功
     *
     */
    addPreRasterFilter: function addPreRasterFilter(preFilter) {
      return Module._RasterRenderer_AddPreRasterFilter(this.handle, preFilter.getHandle());
    },

    /**
     * 移除前置过滤器
     * @param {PIEPreRasterFilter} preFilter 前置过滤器对象
     * @memberOf RasterRenderer#
     *
     * @returns {Boolean} 是否移除成功
     *
     */
    removePreRasterFilter: function removePreRasterFilter(preFilter) {
      return Module._RasterRenderer_RemovePreRasterFilter(this.handle, preFilter.getHandle());
    },

    /**
     * 移除所有的前置过滤器
     * @memberOf RasterRenderer#
     *
     */
    removeAllPreRasterFilters: function removeAllPreRasterFilters() {
      Module._RasterRenderer_RemoveAllPreRasterFilters(this.handle);
    },

    /**
     * 获取后置过滤器数量
     *
     * @memberOf RasterRenderer#
     * @returns {Number} 后置过滤器数量
     *
     */
    getAfterRasterFilterCount: function getAfterRasterFilterCount() {
      return Module._RasterRenderer_GetAfterRasterFilterCount(this.handle);
    },

    /**
     * 根据索引获取后置过滤器
     * @param {Number} index -后置过滤器索引
     * @memberOf RasterRenderer#
     *
     * @returns {PIEAfterRasterFilter} 后置过滤器
     *
     */
    getAfterRasterFilterAt: function getAfterRasterFilterAt(index) {
      var handle = Module._RasterRenderer_GetAfterRasterFilterAt(this.handle, index);

      if (handle) {
        return new PIEAfterRasterFilter(handle);
      }
    },

    /**
     * 根据类ID获取后置过滤器
     * @param {String} classID -后置过滤器ID
     * @memberOf RasterRenderer#
     *
     * @returns {PIEAfterRasterFilter} 后置过滤器
     *
     */
    getAfterRasterFilter: function getAfterRasterFilter(classID) {
      var strClassID = new PIEString$1(classID);

      var handle = Module._RasterRenderer_GetAfterRasterFilter(this.handle, strClassID.getHandle());

      strClassID.dispose();

      if (handle) {
        return new PIEAfterRasterFilter(handle);
      }
    },

    /**
     * 添加后置过滤器
     * @param {PIEAfterRasterFilter} afterFilter 后置过滤器对象
     * @memberOf RasterRenderer#
     *
     * @returns {Boolean} 添加是否成功
     *
     */
    addAfterRasterFilter: function addAfterRasterFilter(afterFilter) {
      return Module._RasterRenderer_AddAfterRasterFilter(this.handle, afterFilter.getHandle());
    },

    /**
     * 移除后置过滤器
     * @param {PIEAfterRasterFilter} afterFilter -后置过滤器对象
     * @memberOf RasterRenderer#
     *
     * @returns {Boolean} 是否移除成功
     *
     */
    removeAfterRasterFilter: function removeAfterRasterFilter(afterFilter) {
      return Module._RasterRenderer_RemoveAfterRasterFilter(this.handle, afterFilter.getHandle());
    },

    /**
     * 移除所有的后置过滤器
     * @memberOf RasterRenderer#
     *
     */
    removeAllAfterRasterFilters: function removeAllAfterRasterFilters() {
      Module._RasterRenderer_RemoveAllAfterRasterFilters(this.handle);
    },

    /**
     * 获取xml中配置参数
     * @param {String} xML -xml数据
     * @memberOf RasterRenderer#
     *
     * @returns {Boolean} 是否成功
     *
     */
    fromXML: function fromXML(xML) {
      var strXML = new PIEString$1(xML);

      var res = Module._RasterRenderer_FromXML(this.handle, strXML.getHandle());

      strXML.dispose();
      return res;
    },

    /**
     * 配置参数导出xml
     * @memberOf RasterRenderer#
     * @returns {PIEString} 返回配置数据
     *
     */
    toXML: function toXML() {
      var handle = Module._RasterRenderer_ToXML(this.handle);

      if (handle) {
        return PIEString$1(handle);
      }
    },

    /**
     * 设置共用属性，常用于滤波器共用参数交换
     * @param {String} name -属性名称
     * @param {String} value -属性值
     * @memberOf RasterRenderer#
     *
     */
    setProperty: function setProperty(name, value) {
      var strName = new PIEString$1(name);
      var strValue = new PIEString$1(value);

      Module._RasterRenderer_SetProperty(this.handle, strName.getHandle(), strValue.getHandle());

      strName.dispose();
      strValue.dispose();
    },

    /**
     * 获取是否为GPU渲染
     *
     * @memberOf RasterRenderer#
     * @returns {Boolean} GPU渲染返回true，否则返回false
     *
     */
    isSupportGPU: function isSupportGPU() {
      return Module._RasterRenderer_IsSupportGPU(this.handle);
    },

    /**
     * 获取是否请求（采样）全部波段数据
     *
     * @memberOf RasterRenderer#
     * @returns {Boolean} 请求全部波段返回true，否则返回false，结果由滤波器和NeedAllBand设置共同决定
     *
     */
    isRequestAllBands: function isRequestAllBands() {
      return Module._RasterRenderer_IsRequestAllBands(this.handle);
    },

    /**
     * 设置请求（采样）全部波段数据
     * @param {Boolean} needAllBand -请求全部波段为true，否则为false
     * @memberOf RasterRenderer#
     *
     */
    setNeedAllBand: function setNeedAllBand(needAllBand) {
      Module._RasterRenderer_SetNeedAllBand(this.handle, needAllBand);
    },

    /**
     * 设置允许渲染的最大数据范围
     * @param {PIERect} bounds -最大数据范围
     * @memberOf RasterRenderer#
     *
     */
    setMaxDataBounds: function setMaxDataBounds(bounds) {
      var arrayBounds = new PIEArray(bounds, PIEArrayType.Float64);

      Module._RasterRenderer_SetMaxDataBounds(this.handle, arrayBounds.getHandle());

      arrayBounds.dispose();
    },

    /**
     * 设置最大绘制范围无效，会触发最大绘制范围更新
     * @memberOf RasterRenderer#
     *
     *
     */
    dirtyMaxDrawBounds: function dirtyMaxDrawBounds() {
      Module._RasterRenderer_DirtyMaxDrawBounds(this.handle);
    },

    /**
     * 设置对比度
     * @param {Number} contrast -对比度（-100~100），默认值：0
     * @memberOf RasterRenderer#
     *
     */
    setContrast: function setContrast(contrast) {
      Module._RasterRenderer_SetContrast(this.handle, contrast);
    },

    /**
     * 获取对比度
     *
     * @memberOf RasterRenderer#
     * @returns {Number} 对比度（-100~100），默认值：0
     *
     */
    getContrast: function getContrast() {
      return Module._RasterRenderer_GetContrast(this.handle);
    },

    /**
     * 设置亮度
     * @param {Number} brightness -亮度（-255~255），默认值：0
     * @memberOf RasterRenderer#
     *
     */
    setBrightness: function setBrightness(brightness) {
      Module._RasterRenderer_SetBrightness(this.handle, brightness);
    },

    /**
     * 获取亮度
     *
     * @memberOf RasterRenderer#
     * @returns {Number} 亮度（-255~255），默认值：0
     *
     */
    getBrightness: function getBrightness() {
      return Module._RasterRenderer_GetBrightness(this.handle);
    },

    /**
     * 设置透明度
     * @param {Number} transparent -透明度（0~255），默认值：255
     * @memberOf RasterRenderer#
     *
     */
    setTransparent: function setTransparent(transparent) {
      Module._RasterRenderer_SetTransparent(this.handle, transparent);
    },

    /**
     * 获取透明度
     *
     * @memberOf RasterRenderer#
     * @returns {Number} 透明度（0~255），默认值：255
     *
     */
    getTransparent: function getTransparent() {
      return Module._RasterRenderer_GetTransparent(this.handle);
    },

    /**
     * 设置渲染采样类型
     * @param {PIEDataSampleType} resampleType -采样类型
     * @memberOf RasterRenderer#
     *
     * @returns {Boolean} 返回设置是否成功
     */
    setResampleType: function setResampleType(resampleType) {
      return Module._RasterRenderer_SetResampleType(this.handle, resampleType);
    },

    /**
     * 获取渲染采样类型
     *
     * @memberOf RasterRenderer#
     * @returns {PIEDataSampleType} 返回采样类型
     *
     */
    getResampleType: function getResampleType() {
      return Module._RasterRenderer_GetResampleType(this.handle);
    },

    /**
     * 获取自动投影转换启用状态
     *
     * @memberOf RasterRenderer#
     * @returns {Boolean} 自动投影转换是否启用
     *
     */
    getProjConvertEnabled: function getProjConvertEnabled() {
      return Module._RasterRenderer_GetProjConvertEnabled(this.handle);
    },

    /**
     * 设置自动投影转换启用状态
     * @param {Boolean} enabled -是否启用自动投影转换
     * @memberOf RasterRenderer#
     *
     */
    setProjConvertEnabled: function setProjConvertEnabled(enabled) {
      Module._RasterRenderer_SetProjConvertEnabled(this.handle, enabled);
    },

    /**
     * 设置无值颜色
     * @param {PIEColor/Array} color -无值对应的颜色
     * @memberOf RasterRenderer#
     *
     */
    setNoDataColor: function setNoDataColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RasterRenderer_SetNoDataColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },

    /**
     * 获取无值颜色
     *
     * @memberOf RasterRenderer#
     * @returns {PIEColor} 无值对应的颜色
     *
     */
    getNoDataColor: function getNoDataColor() {
      var arrayColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._RasterRenderer_GetNoDataColor(this.handle, arrayColor.getHandle());

      arrayColor.updateData();
      var color = arrayColor.toArray();
      arrayColor.dispose();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 栅格渲染器类型
   * @readonly
   * @enum {number}
   */
  var PIERasterRendererType = {
    /** 未知渲染器 */
    Null: 0,

    /** 多波段渲染器 */
    Bands: 10,

    /** 颜色带渲染器 */
    ColorBar: 20,

    /**分级渲染器*/
    ClassifyColorRampRender: 30,

    /** 颜色对照表渲染器*/
    ColormapRender: 50
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 创建栅格多波段（RGB）渲染器
   * @name BandRasterRenderer
   * @class BandRasterRenderer
   *  栅格多波段（RGB）渲染器操作函数
   * @extends RasterRenderer
   */

  function PIEBandRasterRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._BRasterRenderer_Create();
      autoRelease = true;
    }

    PIERasterRenderer.call(this, handle, autoRelease);
  }

  PIEBandRasterRenderer.prototype = Object.assign(Object.create(PIERasterRenderer.prototype), {
    /**
     * 设置RGB通道的波段索引
     * @param {Number} RGBType -RGB通道类型, R:0,G:1,B:2
     * @param {Number} bandIndex -RGB通道使用的波段索引
     * @memberOf BandRasterRenderer#
     *
     */
    setBandIndex: function setBandIndex(RGBType, bandIndex) {
      Module._BRasterRenderer_SetRGBBandIndex(this.handle, RGBType, bandIndex);
    },

    /**
     * 获取渲染波段索引
     * @param {Number} RGBType -RGB通道类型, R:0,G:1,B:2
     * @memberOf BandRasterRenderer#
     * @returns {Number} 返回RGB通道使用的波段索引
     *
     */
    getBandIndex: function getBandIndex(RGBType) {
      return Module._BRasterRenderer_GetRGBBandIndex(this.handle, RGBType);
    },

    /**
     * 设置RGB通道使用的无值
     * @param {Number} RGBType -RGB通道类型, R:0,G:1,B:2
     * @param {Number} value -无效值
     * @memberOf BandRasterRenderer#
     *
     */
    setRGBNoValue: function setRGBNoValue(RGBType, value) {
      Module._BRasterRenderer_SetRGBNoValue(this.handle, RGBType, value);
    },

    /**
     * 设置RGB通道使用的无值
     * @param {Number} RGBType -RGB通道类型, R:0,G:1,B:2
     * @memberOf BandRasterRenderer#
     * @returns {Number} 返回对应的无效值
     */
    getRGBNoValue: function getRGBNoValue(RGBType) {
      return Module._BRasterRenderer_GetRGBNoValue(this.handle, RGBType);
    },

    /**
     * 设置拉伸类型
     * @param {PIEStretchType} stretchType -拉伸类型
     * @param {Number} RGBType -RGB通道类型, R:0,G:1,B:2（全部通道: -1）
     * @memberOf BandRasterRenderer#
     *
     */
    setBandStrethType: function setBandStrethType(stretchType, RGBType) {
      Module._BRasterRenderer_SetBandStrethType(this.handle, stretchType, RGBType);
    },

    /**
     * 获取拉伸类型
     * @param {Number} RGBType -RGB通道类型, R:0,G:1,B:2（全部通道: -1）
     * @memberOf BandRasterRenderer#
     * @returns {PIEStretchType} 返回对应的拉伸类型
     */
    getBandStrethType: function getBandStrethType(RGBType) {
      return Module._BRasterRenderer_GetBandStrethType(this.handle, RGBType);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 创建拉伸渲染器对象
   * @name ColorBarRasterRenderer
   * @class ColorBarRasterRenderer
   * 拉伸渲染器操作函数
   *
   *
   * @extends RasterRenderer
   * @example
   * let colorBarRasterRenderer = new PIE.ColorBarRasterRenderer();
   *
   */

  function PIEColorBarRasterRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._CBRasterRenderer_Create();
      autoRelease = true;
    }

    PIERasterRenderer.call(this, handle, autoRelease);
  }

  PIEColorBarRasterRenderer.prototype = Object.assign(Object.create(PIERasterRenderer.prototype), {
    /**
     * 获取是否为颜色平滑拉伸
     *
     * @memberOf ColorBarRasterRenderer#
     * @returns {Boolean} 颜色平滑拉伸返回TRUE，否则返回FALSE
     *
     */
    isStretchColor: function isStretchColor() {
      return Module._CBRasterRenderer_IsStretchColor(this.handle);
    },

    /**
     * 设置为颜色平滑拉伸
     * @param {Boolean} stretch 颜色平滑拉伸返回TRUE，否则返回FALSE
     * @memberOf ColorBarRasterRenderer#
     *
     */
    setStretchColor: function setStretchColor(stretch) {
      Module._CBRasterRenderer_SetStretchColor(this.handle, stretch);
    },

    /**
     * 设置有效值范围
     * @param {Number} minValue -最小值
     * @param {Number} maxValue -最大值
     * @param {Number} useRangeValue -是否应用设置的有效值范围
     * @memberOf ColorBarRasterRenderer#
     *
     */
    setValueRange: function setValueRange(minValue, maxValue, useRangeValue) {
      Module._CBRasterRenderer_SetValueRange(this.handle, minValue, maxValue, useRangeValue);
    },

    /**
     * 设置渲染波段索引
     * @param {Number} bandIndex -渲染波段索引
     * @memberOf ColorBarRasterRenderer#
     *
     */
    setBandIndex: function setBandIndex(bandIndex) {
      Module._CBRasterRenderer_SetBandIndex(this.handle, bandIndex);
    },

    /**
     * 获取渲染波段索引
     *
     * @memberOf ColorBarRasterRenderer#
     * @returns {Number} 返回渲染波段索引
     *
     */
    getBandIndex: function getBandIndex() {
      return Module._CBRasterRenderer_GetBandIndex(this.handle);
    },

    /**
     * 设置无效值
     * @param {Number} value -返回渲染波段索引
     * @memberOf ColorBarRasterRenderer#
     *
     */
    setNoValue: function setNoValue(value) {
      Module._CBRasterRenderer_SetNoValue(this.handle, value);
    },

    /**
     * 获取无效值
     *
     * @memberOf ColorBarRasterRenderer#
     * @returns {Number}  返回无效值
     *
     */
    getNoValue: function getNoValue() {
      return Module._CBRasterRenderer_GetNoValue(this.handle);
    },

    /**
     * 设置拉伸类型
     *
     * @memberOf ColorBarRasterRenderer#
     * @returns {PIEStretchType} -返回渲染波段索引
     *
     */
    getBandStrethType: function getBandStrethType() {
      return Module._CBRasterRenderer_GetBandStrethType(this.handle);
    }
  });

  function PIERasterRenderFactory() {}

  Object.assign(PIERasterRenderFactory.prototype, {});

  PIERasterRenderFactory.CreateInstance = function (hRender) {
    var render = new PIERasterRenderer(hRender);
    var type = render.getType();

    if (type == PIERasterRendererType.Bands) {
      return new PIEBandRasterRenderer(hRender);
    } else if (type == PIERasterRendererType.ColorBar) {
      return new PIEColorBarRasterRenderer(hRender);
    } else if (type == PIERasterRendererType.ClassifyColorRampRender) ; else if (type == PIERasterRendererType.ColormapRender) {
      return new PIEColormapRasterRenderer(hRender);
    } else {
      return new PIERasterRenderer(hRender);
    }
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 三维矢量图层基本操作函数
   * @name GlobeBaseRasterLayer
   * @extends GlobeLayer
   *
   */

  function PIEGlobeBaseRasterLayer(handle, autoRelease) {
    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeBaseRasterLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    // /**
    //  * 设置数据源名称
    //  * @param {String} name -目标数据源名称
    //  * @memberOf GlobeBaseRasterLayer#
    //  *
    //  */
    setDataSourceName: function setDataSourceName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeBaseRasterLayer_SetDataSourceName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取数据源名称
    //  *
    //  * @memberOf GlobeBaseRasterLayer#
    //  * @returns {String} 如果成功返回数据源名称，失败返回NULL
    //  *
    //  */
    getDataSourceName: function getDataSourceName() {
      var strName = new PIEString$1(256);

      Module._GlobeBaseRasterLayer_GetDataSourceName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },
    // /**
    //  * 设置数据集名称
    //  * @param {String} name -目标数据集名称
    //  * @memberOf GlobeBaseRasterLayer#
    //  *
    //  */
    setDatasetName: function setDatasetName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeBaseRasterLayer_SetDatasetName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取数据集名称
    //  *
    //  * @memberOf GlobeBaseRasterLayer#
    //  * @returns {String} 如果成功返回数据集名称，失败返回NULL
    //  *
    //  */
    getDatasetName: function getDatasetName() {
      var strName = new PIEString$1(256);

      Module._GlobeBaseRasterLayer_GetDatasetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置数据源
     * @param {PIEDataSource} datasource -数据源对象
     * @memberOf GlobeBaseRasterLayer#
     *
     */
    setDataSource: function setDataSource(datasource) {
      Module._GlobeBaseRasterLayer_SetDataset(this.handle, datasource.getDataset().getHandle());
    },

    /**
     * 获取数据源
     *
     * @memberOf GlobeBaseRasterLayer#
     * @returns {PIERasterDataSource}  -返回数据源
     *
     */
    getDataSource: function getDataSource() {
      var hDataset = Module._GlobeBaseRasterLayer_GetDataset(this.handle);

      var hDataSource = Module._Dataset_GetDataSource(hDataset);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },
    setDataset: function setDataset(dataset) {
      Module._GlobeBaseRasterLayer_SetDataset(this.handle, dataset.getHandle());
    },
    getDataset: function getDataset() {
      var hDataset = Module._GlobeBaseRasterLayer_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(hDataset);
    },
    getRenderer: function getRenderer() {
      var hRender = Module._GlobeBaseRasterLayer_GetRenderer(this.handle);

      return PIERasterRenderFactory.CreateInstance(hRender);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * @name GlobeRasterLayer
   * 三维栅格图层操作函数
   *
   * @extends GlobeBaseRasterLayer
   * @example
   * let globeRasterLayer = new PIE.GlobeRasterLayer()
   */

  function PIEGlobeRasterLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_RasterLayer_Create();
      autoRelease = true;
    }

    PIEGlobeBaseRasterLayer.call(this, handle, autoRelease);
  }

  PIEGlobeRasterLayer.prototype = Object.assign(Object.create(PIEGlobeBaseRasterLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建栅格瓦片图层
   * @name GlobeTileRasterLayer
   * @class GlobeTileRasterLayer
   * 栅格瓦片图层操作函数
   *
   * @extends GlobeRasterLayer
   * @example
   * let globeTileRasterLayer = new PIE.GlobeTileRasterLayer()
   */

  function PIEGlobeTileRasterLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_TileRasterLayer_Create();
      autoRelease = true;
    }

    PIEGlobeRasterLayer.call(this, handle, autoRelease);
  }

  PIEGlobeTileRasterLayer.prototype = Object.assign(Object.create(PIEGlobeRasterLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维高程图层
   * @name GlobeElevationLayer
   * @class GlobeElevationLayer
   * 三维高程图层操作函数
   * @extends GlobeLayer
   *
   * @example
   * let globeElevationLayer = new PIE.GlobeElevationLayer()
   */

  function PIEGlobeElevationLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._GlobeElevationLayer_Create();
      autoRelease = true;
    }

    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeElevationLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    // /**
    //  * 设置数据源名称
    //  * @param {String} name -目标数据源名称
    //  * @memberOf GlobeElevationLayer#
    //  *
    //  */
    setDataSourceName: function setDataSourceName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeElevationLayer_SetDataSourceName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取数据源名称
    //  *
    //  * @memberOf GlobeElevationLayer#
    //  * @returns {String} 返回数据源名称
    //  *
    //  */
    getDataSourceName: function getDataSourceName() {
      var strName = new PIEString$1(256);

      Module._GlobeElevationLayer_GetDataSourceName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },
    // /**
    //  * 设置数据集名称
    //  * @param {String} name -数据集名称
    //  * @memberOf GlobeElevationLayer#
    //  */
    setDatasetName: function setDatasetName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeElevationLayer_SetDatasetName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取数据集名称
    //  *
    //  * @memberOf GlobeElevationLayer#
    //  * @returns {String} 返回数据集名称
    //  */
    getDatasetName: function getDatasetName() {
      var strName = new PIEString$1(256);

      Module._GlobeElevationLayer_GetDatasetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置图层数据集
     * @param {PIEDataSource} datasource -图层数据集
     * @memberOf GlobeElevationLayer#
     *
     */
    setDataSource: function setDataSource(datasource) {
      Module._GlobeElevationLayer_SetDataset(this.handle, datasource.getDataset().getHandle());
    },

    /**
     * 获取数据源
     *
     * @memberOf GlobeElevationLayer#
     * @returns {PIEDataSource}  -返回数据源
     *
     */
    getDataSource: function getDataSource() {
      var hDataset = Module._GlobeElevationLayer_GetDataset(this.handle);

      var hDataSource = Module._Dataset_GetDataSource(hDataset);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },
    setDataset: function setDataset(dataset) {
      Module._GlobeElevationLayer_SetDataset(this.handle, dataset.getHandle());
    },
    getDataset: function getDataset() {
      var hDataset = Module._GlobeElevationLayer_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(hDataset);
    },

    /**
     * 设置夸张系数
     * @param {Number} value -夸张系数 [1,3]
     * @memberOf GlobeElevationLayer#
     *
     */
    setExaggeration: function setExaggeration(value) {
      Module._GlobeElevationLayer_SetExaggeration(this.handle, value);
    },

    /**
     * 获取夸张系数
     * @memberOf GlobeElevationLayer#
     * @returns {Number} 返回夸张系数
     */
    getExaggeration: function getExaggeration() {
      return Module._GlobeElevationLayer_GetExaggeration(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维地图元素模块
   * ---
   */

  /**
   * 三维地图元素操作函数
   * @name GlobeElement
   *
   */

  function PIEGlobeElement(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGlobeElement.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 删除地图元素
     * @memberOf GlobeElement#
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._GlobeElement_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 获取地图元素类型
     *
     * @memberOf GlobeElement#
     * @returns {PIEGlobeElementType} 成功返回类型，失败返回Null
     */
    getType: function getType() {
      return Module._GlobeElement_GetType(this.handle);
    },

    /**
     * 获取地图元素里的ID
     *
     * @memberOf GlobeElement#
     * @returns {Number} 如果成功返回集合元素里的ID，失败返回NULL
     */
    getID: function getID() {
      return Module._GlobeElement_GetID(this.handle);
    },

    /**
     * 设置地图元素里的ID
     * @param {Number} id -地图元素Id
     * @memberOf GlobeElement#
     */
    setID: function setID(id) {
      Module._GlobeElement_SetID(this.handle, id);
    },

    /**
     * 判断地图元素是否可见
     *
     * @memberOf GlobeElement#
     * @returns {Boolean} 如果可见返回true，不可见或失败返回false
     */
    isVisible: function isVisible() {
      return Boolean(Module._GlobeElement_IsVisible(this.handle));
    },

    /**
     * 设置地图元素是否可见
     * @param {Boolean} isVisible -是否可见
     * @memberOf GlobeElement#
     */
    setVisible: function setVisible(isVisible) {
      Module._GlobeElement_SetVisible(this.handle, isVisible);
    },

    /**
     * 获取地图元素的范围
     *
     * @memberOf GlobeElement#
     * @returns {PIEBounds} 如果成功返回地图元素范围，失败返回默认范围
     */
    getBounds: function getBounds() {
      var array = new PIEArray(4, PIEArrayType.Float64);

      Module._GlobeElement_GetBounds(this.handle, array.getHandle());

      var bounds = PIEBounds.fromArray(array);
      array.dispose();
      return bounds;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维地图元素模块
   * ---
   */

  /**
   * 创建三维地图几何元素
   * @name GlobeFeatureElement
   * @class GlobeFeatureElement
   * 三维地图几何元素操作函数
   * @param {Object} options -
   * @param {(PIEFeature)} options.feature -要素对象（参数二选一）
   * @param {(PIEGeometry)} options.geometry -几何对象 只支持二维对象（参数二选一）
   * @extends GlobeElement
   */

  function PIEGlobeFeatureElement(options) {
    var handle = null;
    var autoRelease = false;
    var feature = options.feature;
    var geometry = options.geometry;

    if (feature != null) {
      if (feature instanceof PIEFeature) {
        handle = Module._GlobeFeatureElement_CreateByFeature(feature.getHandle());
        autoRelease = true;
      } else {
        throw new Error('PIE.GlobeModel.addLayer: input feature is error');
      }
    } else if (geometry != null) {
      if (geometry instanceof PIEGeometry) {
        handle = Module._GlobeFeatureElement_CreateByGeometry(geometry.getHandle());
        autoRelease = true;
      } else {
        throw new Error('PIE.GlobeModel.addLayer: input geometry is error');
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIEGlobeElement.call(this, handle, autoRelease);
  }

  PIEGlobeFeatureElement.prototype = Object.assign(Object.create(PIEGlobeElement.prototype), {
    /**
     * 设置要素对象
     * @param {PIEFeature} feature -要素对象
     * @memberOf GlobeFeatureElement#
     * @returns {Boolean} 如果设置成功，返回true,如果设置失败，返回false
     */
    setFeature: function setFeature(feature) {
      return Module._GlobeFeatureElement_SetFeature(this.handle, feature.getHandle());
    },
    // /**
    //  * 设置要素对象显隐
    //  * @param {Boolean} visible -是否显示(true为显示，false为隐藏)
    //  * @memberOf GlobeFeatureElement#
    //  * @returns {Boolean} 如果设置成功，返回true,如果设置失败，返回false
    //  */
    // setVisible: function (visible){
    //     return Module._GlobeFeatureElement_SetVisible(this.handle, visible);
    // },
    //
    // /**
    //  * 判断要素对象元素是否可见
    //  *
    //  * @memberOf GlobeFeatureElement#
    //  * @returns {Boolean} 如果可见返回true，不可见或失败返回false
    //  */
    // isVisible: function (){
    //     return Module._GlobeFeatureElement_IsVisible(this.handle);
    // },

    /**
     * 获取几何元素里的要素对象
     *
     * @memberOf GlobeFeatureElement#
     * @returns {PIEFeature} 如果成功，返回要素对象,失败返回null
     */
    getFeature: function getFeature() {
      var handle = Module._GlobeFeatureElement_GetFeature(this.handle);

      if (handle) {
        return new PIEFeature(handle);
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建图源层图层
   * @name GlobeGraphicsLayer
   * @class GlobeGraphicsLayer
   * 图源图层操作函数
   * @extends GlobeLayer
   *
   * @example
   * let globeGraphicsLayer = new PIE.GlobeGraphicsLayer();
   */

  function PIEGlobeGraphicsLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_GraphicsLayer_Create();
      autoRelease = true;
    }

    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeGraphicsLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    /**
     * 获取跟踪图层元素个数
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {Number} 如果成功返回元素总数
     *
     */
    getCount: function getCount() {
      return Module._Globe_GraphicsLayer_GetCount(this.handle);
    },

    /**
     * 添加元素
     * @param {PIEGlobeElement} globeElement -元素对象
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {Number} 如果成功返回元素的ID 失败返回-1
     *
     */
    add: function add(globeElement) {
      if (globeElement instanceof PIEGlobeElement) {
        return Module._Globe_GraphicsLayer_Add(this.handle, globeElement.getHandle());
      }

      return -1;
    },

    /**
     * 根据索引获取元素
     * @param {Number} index -元素索引
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {PIEGlobeFeatureElement} 如果成功返回元素对象 失败返回NULL
     *
     */
    getAt: function getAt(index) {
      var element = Module._Globe_GraphicsLayer_GetAt(this.handle, index);

      if (element) {
        return new PIEGlobeFeatureElement({
          handle: element
        });
      }

      return null;
    },

    /**
     * 根据id获取元素
     * @param {Number} id -元素id
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {PIEGlobeFeatureElement} 如果成功返回元素对象 失败返回NULL
     *
     */
    get: function get(id) {
      var element = Module._Globe_GraphicsLayer_Get(this.handle, id);

      if (element) {
        return new PIEGlobeFeatureElement({
          handle: element
        });
      }

      return null;
    },

    /**
     * 根据id移除元素
     * @param {Number} id -元素id
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {Boolean} 如果成功返回true 失败返回false
     *
     */
    remove: function remove(id) {
      return Boolean(Module._Globe_GraphicsLayer_Remove(this.handle, id));
    },

    /**
     * 根据索引移除元素
     * @param {Number} index -元素索引
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {Boolean} 如果成功返回true 失败返回false
     */
    removeAt: function removeAt(index) {
      return Boolean(Module._Globe_GraphicsLayer_RemoveAt(this.handle, index));
    },

    /**
     * 移除所有元素
     * @memberOf GlobeGraphicsLayer#
     */
    removeAll: function removeAll() {
      Module._Globe_GraphicsLayer_RemoveAll(this.handle);
    },

    /**
     * 设置图层是否可选择
     * @param {Boolean} selectable -是否可选择
     * @memberOf GlobeGraphicsLayer#
     */
    setSelectable: function setSelectable(selectable) {
      Module._Globe_GraphicsLayer_SetSelectable(this.handle, selectable);
    },

    /**
     * 获取图层选择集
     *
     * @memberOf GlobeGraphicsLayer#
     * @returns {PIESelection} 成功返回selection对象，失败返回null
     */
    getSelection: function getSelection() {
      var handle = Module._Globe_GraphicsLayer_GetSelection(this.handle);

      return new PIESelection(handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * Renderable 类型枚举
   * @readonly
   * @enum {String}
   */
  var PIERenderableType = {
    /** 标签  */
    RenderLabel: 'RenderLabel',

    /** 点  */
    RenderPoint: 'RenderPoint',

    /** 3D点  */
    RenderPoint3D: 'RenderPoint3D',

    /** 多边形  */
    RenderPolygon: 'RenderPolygon',

    /** 3D多边形  */
    RenderPolygon3D: 'RenderPolygon3D',

    /** 多段线  */
    RenderPolyline: 'RenderPolyline',

    /** 3D 多段线  */
    RenderPolyline3D: 'RenderPolyline3D',

    /** 文字  */
    RenderText: 'RenderText',

    /** 3D 文字  */
    RenderText3D: 'RenderText3D',

    /** 模型 */
    RenderModel: 'RenderModel',

    /** 网格  */
    RenderMesh: 'RenderMesh',

    /** 非矢量 文字  */
    RenderNonFeatureText: 'RenderNonFeatureText',

    /** 面片  */
    RenderPatch: 'RenderPatch',

    /**  几何对象 */
    RenderGeometry: 'RenderGeometry',

    /**  节点 */
    RenderNode: 'RenderNode',

    /**  标绘 */
    RenderPlot: 'RenderPlot'
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 渲染对象操作函数
   * @name Renderable
   *
   */

  function PIERenderable(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIERenderable.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放渲染对象
     * @memberOf Renderable#
     *
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._Renderable_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 获取渲染类型
     *
     * @memberOf Renderable#
     * @returns {String} 渲染类型
     *
     */
    getType: function getType() {
      var strType = new PIEString$1(56);

      Module._Renderable_GetType(this.handle, strType.getHandle());

      var type = strType.toString();
      return type;
    },

    /**
     * 设置渲染对象可见性
     * @param {Boolean} visible -是否可见
     * @memberOf Renderable#
     *
     */
    setVisible: function setVisible(visible) {
      Module._Renderable_SetVisible(this.handle, visible);
    },

    /**
     *  获取渲染对象可见性
     *
     *  @memberOf Renderable#
     * @returns {Boolean} 是否可见,可见返回true，不可见返回false
     *
     */
    isVisible: function isVisible() {
      return Boolean(Module._Renderable_IsVisible(this.handle));
    },

    /**
     *  设置渲染对象ID
     * @param {Number} id -渲染对象ID
     * @memberOf Renderable#
     *
     */
    setID: function setID(id) {
      Module._Renderable_SetID(this.handle, id);
    },

    /**
     *  获取渲染对象ID
     *
     * @memberOf Renderable#
     * @returns {Number} 返回渲染对象ID
     *
     */
    getID: function getID() {
      return Module._Renderable_GetID(this.handle);
    },
    // /**
    //  * 设置渲染对象优先级
    //  * @param {Number} id -渲染优先级priorityID
    //  * @memberOf Renderable#
    //  *
    //  */
    setRenderPriorityID: function setRenderPriorityID(id) {
      Module._Renderable_SetRenderPriorityID(this.handle, id);
    },
    // /**
    //  * 获取渲染对象优先级
    //  *
    //  * @memberOf Renderable#
    //  * @returns {Number} 返回渲染优先级ID
    //  *
    //  */
    getRenderPriorityID: function getRenderPriorityID() {
      return Module._Renderable_GetRenderPriorityID(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 几何对象渲染操作函数
   * @name RenderGeometry
   *
   * @extends Renderable
   *
   */

  function PIERenderGeometry(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderGeometry.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 设置矢量要素
     * @param {PIEFeature} feature -矢量要素对象
     * @memberOf RenderGeometry#
     */
    setFeature: function setFeature(feature) {
      if (!feature) {
        return;
      }

      if (!feature.getHandle() || !(feature instanceof PIEFeature)) {
        throw new Error('PIE.RenderGeometry.setFeature: input feature is invalid.');
      }

      Module._RenderGeometry_SetFeature(this.handle, feature.getHandle());
    },

    /**
     * 获取矢量要素
     *
     * @memberOf RenderGeometry#
     * @returns {PIEFeature} 返回矢量要素对象
     */
    getFeature: function getFeature() {
      var hFeature = Module._RenderGeometry_GetFeature(this.handle);

      if (hFeature) {
        return new PIEFeature(hFeature);
      }

      return null;
    },

    /**
     * 设置风格
     * @param {PIEStyle} style -风格
     * @memberOf RenderGeometry#
     *
     */
    setStyle: function setStyle(style) {
      var feature = this.getFeature();
      var geometry = feature.getGeometry();

      if (geometry instanceof PIEPoint || geometry instanceof PIEPolyline || geometry instanceof PIEPolygon) {
        style.setFillStyle(3); //特殊处理 临时方案
      }

      geometry.setStyle(style);
    },

    /**
     * 获取风格
     *
     * @memberOf RenderGeometry#
     * @returns {PIEVectorStyle} 返回的风格
     */
    getStyle: function getStyle() {
      var feature = this.getFeature();
      var geometry = feature.getGeometry();
      return geometry.getStyle();
    },

    /**
     * 运行动画
     * @param {PIEAction} action -动画对象(不能为NULL)
     * @memberOf RenderGeometry#
     *
     */
    runAction: function runAction(action) {
      return Module._RenderGeometry_RunAction(this.handle, action.getHandle());
    },

    /**
     * 启动指定动画
     * @param {PIEAction} action -动画对象(不能为NULL)
     * @memberOf RenderGeometry#
     *
     */
    startAction: function startAction(action) {
      return Module._RenderGeometry_StartAction(this.handle, action.getHandle());
    },

    /**
     * 停止指定动画
     * @param {PIEAction} action -动画对象(不能为NULL)
     * @memberOf RenderGeometry#
     *
     */
    stopAction: function stopAction(action) {
      return Module._RenderGeometry_StopAction(this.handle, action.getHandle());
    },

    /**
     * 设置标绘位置
     * @param {(PIEVector3/Array)} pos -坐标位置
     * @memberOf RenderGeometry#
     */
    setPosition: function setPosition(pos) {
      var array = null;

      if (pos instanceof PIEVector3) {
        array = pos.toArray();
      } else if (pos instanceof Array) {
        array = pos;
      }

      if (array) {
        var point3Array = new PIEArray(array, PIEArrayType.Float64);

        Module._RenderGeometry_SetPosition(this.handle, point3Array.getHandle());

        point3Array.dispose();
      }
    },

    /**
     * 获取标绘位置
     *
     * @memberOf RenderGeometry#
     * @returns {PIEVector3} 返回标绘位置
     */
    getPosition: function getPosition() {
      var point3Array = new PIEArray(3, PIEArrayType.Float64);

      Module._RenderGeometry_GetPosition(this.handle, point3Array.getHandle());

      point3Array.updateData();
      var array = point3Array.toArray();
      point3Array.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     * 设置渲染对象的高度
     * @param {Number} height -高度
     * @memberOf RenderGeometry#
     */
    setHeight: function setHeight(height) {
      var pos = this.getPosition();
      var newPos = [pos.x, pos.y, height];
      this.setPosition(newPos);
    },

    /**
     * 获取渲染对象的高度
     * @memberOf RenderGeometry#
     * @returns {Number} 返回渲染对象的高度
     */
    getHeight: function getHeight() {
      var pos = this.getPosition();
      return pos.z;
    },

    /**
     * 设置旋转弧度
     * @param {PIEVector3/Array} rotation -旋转弧度
     * @memberOf RenderGeometry#
     */
    setRotation: function setRotation(rotation) {
      var array = null;

      if (rotation instanceof PIEVector3) {
        array = rotation.toArray();
      } else if (rotation instanceof Array) {
        array = rotation;
      }

      if (array) {
        var rotationArray = new PIEArray(array, PIEArrayType.Float64);

        Module._RenderGeometry_SetRotation(this.handle, rotationArray.getHandle());

        rotationArray.dispose();
      }
    },

    /**
     * 获取旋转弧度
     *
     * @memberOf RenderGeometry#
     * @returns {PIEVector3} 返回标绘位置
     */
    getRotation: function getRotation() {
      var rotationArray = new PIEArray(3, PIEArrayType.Float64);

      Module._RenderGeometry_GetRotation(this.handle, rotationArray.getHandle());

      rotationArray.updateData();
      var array = rotationArray.toArray();
      rotationArray.dispose();
      return new PIEVector3(array[0], array[1], array[2]);
    },

    /**
     * 刷新地球
     * @param {PIEGlobe} globe -地球
     * @memberOf RenderGeometry#
     *
     * @returns {Boolean} 是否刷新成功
     */
    refresh: function refresh(globe) {
      return Boolean(Module._RenderGeometry_Refresh(this.handle, globe.handle));
    },

    /**
     * 设置数据是否改变
     * @param {Boolean} dirty -数据是否改变
     * @memberOf RenderGeometry#
     *
     */
    setDirty: function setDirty(dirty) {
      Module._RenderGeometry_SetDirty(this.handle, dirty);
    },

    /**
     * 获取数据是否改变
     *
     * @memberOf RenderGeometry#
     * @returns {Boolean} 返回是否成功改变的数据
     */
    getDirty: function getDirty() {
      return Boolean(Module._RenderGeometry_GetDirty(this.handle));
    },

    /**
     * 设置是否选中
     * @param {Boolean} selected -是否选中
     * @memberOf RenderGeometry#
     */
    setSelected: function setSelected(selected) {
      Module._RenderGeometry_SetSelected(this.handle, selected);
    },

    /**
     * 获取是否选中
     *
     * @memberOf RenderGeometry#
     * @returns {Boolean} 返回是否选中
     */
    isSelected: function isSelected() {
      return Boolean(Module._RenderGeometry_IsSelected(this.handle));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 点符号对齐方式
   * @readonly
   * @enum {number}
   */
  var PIEPointAlignType = {
    /** 左上对齐*/
    LeftTop: 0,

    /** 中上对齐*/
    TopCenter: 1,

    /** 右上对齐*/
    RightTop: 2,

    /** 左下对齐*/
    LeftBottom: 3,

    /** 中下对齐*/
    BottomCenter: 4,

    /** 右下对齐*/
    RightBottom: 5,

    /** 左中对齐*/
    LeftCenter: 6,

    /** 中心对齐*/
    Center: 7,

    /** 右中对齐*/
    RightCenter: 8
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建点渲染对象
   * @param {Object} options -
   * @param {PIEPoint} options.point -点
   * @param {PIEColor/Array} options.color -点颜色
   * @param {PIEPointType} options.type -点类型
   * @param {PIEVector2/Array} options.size -点大小
   * @param {Number} options.style -点风格id(当type为PIE.PointType.Icon时，需要设置id)
   * @param {PIEPointAlignType} options.align -点对齐方式
   * @name RenderPoint
   * @class RenderPoint
   * 点渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderPoint(options) {
    var handle = null;
    var autoRelease = false;
    var point = null;

    if (options != null) {
      if (options.point != null) {
        point = options.point;

        if (point && point instanceof PIEPoint) {
          var color = options.color;
          var size = options.size;
          var type = options.type;
          var style = options.style;
          var align = options.align;

          if (color || size || type || style || align) {
            var vectorStyle = new PIEVectorStyle();
            vectorStyle.setAutoRelease(true);
            vectorStyle.setPointColor(color);
            vectorStyle.setPointSize(size);
            vectorStyle.setPointStyle(style);
            vectorStyle.setPointType(type);
            vectorStyle.setPointAlign(align);
            vectorStyle.setAltitudeMode(PIEAltitudeMode.ClampToGround);
            point.setStyle(vectorStyle);
            vectorStyle.dispose();
          }

          handle = Module._RenderGeometry_Create(point.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPoint.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维点渲染对象
   * @param {Object} options -
   * @param {PIEPoint3D} options.point3D - 三维点
   * @param {PIEColor/Array} options.color -点颜色
   * @param {Number} options.size -点大小
   * @param {PIEPointType} options.type -点类型
   * @param {PIEStyle} options.style -点风格
   * @param {PIEPointAlignType} options.align -点对齐
   * @param {PIEAltitudeMode} options.altitudeMode -依地模式 默认值（PIEAltitudeMode.AbsoluteAltitude）
   *
   * @name RenderPoint3D
   * @class RenderPoint3D
   * 三维点渲染操作函数
   * @extends RenderGeometry
   */

  function PIERenderPoint3D(options) {
    var handle = null;
    var autoRelease = false;
    var point3D = null;

    if (options != null) {
      if (options.point3D != null) {
        point3D = options.point3D;

        if (point3D && point3D && point3D instanceof PIEPoint3D) {
          var color = options.color;
          var size = options.size;
          var type = options.type;
          var style = options.style;
          var align = options.align;
          var altitudeMode = options.altitudeMode;
          if (altitudeMode == null) altitudeMode = PIEAltitudeMode.AbsoluteAltitude;

          if (color || size || type || style || align) {
            var vectorStyle = new PIEVectorStyle();
            vectorStyle.setAutoRelease(false);
            vectorStyle.setPointStyle(style);
            vectorStyle.setPointType(type);
            vectorStyle.setPointAlign(align);
            vectorStyle.setPointColor(color);
            vectorStyle.setPointSize(size);
            vectorStyle.setAltitudeMode(altitudeMode);
            point3D.setStyle(vectorStyle);
          }

          handle = Module._RenderGeometry_Create(point3D.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPoint3D.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建面渲染对象
   * @param {Object} options -
   * @param {PIEPolygon} options.polygon -面
   * @param {PIEColor/Array} options.color -面颜色
   *
   * @name RenderPolygon
   * @class RenderPolygon
   *  面渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderPolygon(options) {
    var handle = null;
    var autoRelease = false;
    var polygon = null;

    if (options != null) {
      if (options.polygon != null) {
        polygon = options.polygon;

        if (polygon.isCounterClockwise(0)) {
          polygon.reverseSubPolygon(0);
        }

        if (polygon && polygon instanceof PIEPolygon) {
          var color = options.color;
          var type = PIEFillType.Null;
          var style = 3;

          if (color) {
            var vectorStyle = new PIEVectorStyle();
            vectorStyle.setAutoRelease(true);
            vectorStyle.setFillStyle(style);
            vectorStyle.setFillType(type);
            vectorStyle.setForeFillColor(color);
            polygon.setStyle(vectorStyle);
            vectorStyle.dispose();
          }

          handle = Module._RenderGeometry_Create(polygon.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPolygon.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维面渲染对象
   * @param {Object} options -
   * @param {PIEPolygon3D} options.polygon3D -三维面
   * @param {PIEColor/Array} options.color -面颜色
   * @param {PIEFillType} options.type -面类型
   *
   * @name RenderPolygon3D
   * @class RenderPolygon3D
   *  三维面渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderPolygon3D(options) {
    var handle = null;
    var autoRelease = null;
    var polygon3D = null;

    if (options != null) {
      if (options.polygon3D != null) {
        polygon3D = options.polygon3D;

        if (polygon3D && polygon3D && polygon3D instanceof PIEPolygon3D) {
          var color = options.color;
          var type = options.type;
          var style = 0;
          var vectorStyle = new PIEVectorStyle();
          vectorStyle.setAutoRelease(true);
          vectorStyle.setFillStyle(style);
          vectorStyle.setForeFillColor(color);
          vectorStyle.setFillType(type);
          polygon3D.setStyle(vectorStyle);
          vectorStyle.dispose();
          handle = Module._RenderGeometry_Create(polygon3D.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = options.autoRelease != null ? options.autoRelease : false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPolygon3D.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建多段线渲染对象
   * @param {Object} options -
   * @param {PIEPolyline} options.polyline -多段线
   * @param {PIEColor/Array} options.color -线条颜色
   * @param {Number} options.width -线条宽度
   * @name RenderPolyline
   * @class RenderPolyline
   * 多段线渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderPolyline(options) {
    var handle = null;
    var autoRelease = false;
    var polyline = null;

    if (options != null) {
      if (options.polyline != null) {
        polyline = options.polyline;

        if (polyline && polyline instanceof PIEPolyline) {
          var color = options.color;
          var width = options.width;
          var type = PIELineType.Null;
          var style = 3;

          if (color || width) {
            var vectorStyle = new PIEVectorStyle();
            vectorStyle.setAutoRelease(true);
            vectorStyle.setLineColor(color);
            vectorStyle.setLineWidth(width);
            vectorStyle.setLineType(type);
            vectorStyle.setLineStyle(style);
            polyline.setStyle(vectorStyle);
            vectorStyle.dispose();
          }

          handle = Module._RenderGeometry_Create(polyline.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPolyline.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维多段线渲染对象
   * @param {Object} options -
   * @param {PIEPolyline3D} options.polyline3D -三维多段线
   * @param {PIEColor/Array} options.color -线条颜色
   * @param {Number} options.width -线条宽度
   * @param {PIELineType} options.type -线条类型
   * @name RenderPolyline3D
   * @class RenderPolyline3D
   * 三维多段线渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderPolyline3D(options) {
    var handle = null;
    var autoRelease = null;
    var polyline3D = null;

    if (options != null) {
      if (options.polyline3D != null) {
        polyline3D = options.polyline3D;

        if (polyline3D && polyline3D && polyline3D instanceof PIEPolyline3D) {
          var color = options.color;
          var width = options.width;
          var type = options.type;
          var style = options.style != null ? options.style : 0;
          var vectorStyle = new PIEVectorStyle();
          vectorStyle.setAutoRelease(true);
          vectorStyle.setLineColor(color);
          vectorStyle.setLineWidth(width);
          vectorStyle.setLineStyle(style);
          vectorStyle.setLineType(type);
          polyline3D.setStyle(vectorStyle);
          vectorStyle.dispose();
          handle = Module._RenderGeometry_Create(polyline3D.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPolyline3D.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 创建文本渲染对象
   * @param {Object} options -
   * @param {PIEText} options.text -文本
   * @param {PIEColor/Array} options.color -文本颜色
   * @param {Number} options.width -文本宽度
   * @param {Number} options.height -文本高度
   * @param {PIETextAlignType} options.align -文本对齐
   *
   * @name RenderText
   * @class RenderText
   * 文本渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderText(options) {
    var handle = null;
    var autoRelease = false;
    var text = null;

    if (options != null) {
      if (options.text != null) {
        text = options.text;

        if (text && text instanceof PIEText) {
          var color = options.color;
          var width = options.width;
          var height = options.height;
          var align = options.align;

          if (color || width || height || align) {
            var textStyle = new PIETextStyle();
            textStyle.setAutoRelease(false);
            textStyle.setForeColor(color);
            textStyle.setWidth(width);
            textStyle.setHeight(height);
            textStyle.setAlign(align);
            text.setTextStyle(textStyle);
          }

          handle = Module._RenderGeometry_Create(text.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderText.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {
    /**
     * 设置选择文本风格
     * @param {PIETextStyle} style -几何对象风格
     * @memberOf RenderText#
     *
     */
    setTextStyle: function setTextStyle(style) {
      var feature = this.getFeature();
      var geometry = feature.getGeometry();

      if (geometry instanceof PIEText) {
        geometry.setTextStyle(style);
      }
    },

    /**
     * 获取选择文本风格
     *
     * @memberOf RenderText#
     * @returns {PIETextStyle} 返回的文本对象风格
     *
     */
    getTextStyle: function getTextStyle() {
      var feature = this.getFeature();
      var geometry = feature.getGeometry();
      return geometry.getTextStyle();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维文本渲染对象
   * @param {Object} options -
   * @param {PIEText3D} options.text3D - 三维文本
   * @param {PIEColor/Array} options.color -文本颜色
   * @param {Number} options.width -文本宽度
   * @param {Number} options.height -文本高度
   * @param {PIETextAlignType} options.align -文本对齐
   *
   * @name RenderText3D
   * @class RenderText3D
   * 三维文本渲染操作函数
   * @extends RenderGeometry
   */

  function PIERenderText3D(options) {
    var handle = null;
    var autoRelease = null;
    var text3D = null;

    if (options != null) {
      if (options.text3D != null) {
        text3D = options.text3D;

        if (text3D || text3D || text3D instanceof PIEText3D) {
          var color = options.color;
          var width = options.width;
          var height = options.height;
          var align = options.align;

          if (color || width || height || align) {
            var textStyle = new PIETextStyle();
            textStyle.setAutoRelease(false);
            textStyle.setForeColor(color);
            textStyle.setWidth(width);
            textStyle.setHeight(height);
            textStyle.setAlign(align);
          }

          handle = Module._RenderGeometry_Create(text3D.getHandle());
          autoRelease = true;
        }
      }
    }

    if (options.handle != null) {
      handle = options.handle;
      autoRelease = false;
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderText3D.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {
    /**
     * 设置选择文本风格
     * @param {PIETextStyle} style -几何对象风格
     * @memberOf RenderText3D#
     *
     */
    setTextStyle: function setTextStyle(style) {
      var feature = this.getFeature();
      var geometry = feature.getGeometry();

      if (geometry instanceof PIEText3D) {
        geometry.setTextStyle(style);
      }
    },

    /**
     * 获取选择文本风格
     *
     * @memberOf RenderText3D#
     * @returns {PIETextStyle} 返回的文本对象风格
     *
     */
    getTextStyle: function getTextStyle() {
      var feature = this.getFeature();
      var geometry = feature.getGeometry();
      return geometry.getTextStyle();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建模型渲染对象
   * @param {Object} options
   * @param {PIEModel3D} options.model -模型
   * @param {PIEVector3/Array} options.position -坐标位置
   * @param {PIEVector3/Array} options.scale -缩放比例
   * @param {PIEVector3/Array} options.rotation -旋转角度
   *
   * @name RenderModel
   * @class RenderModel
   * 模型渲染操作函数
   * @extends RenderGeometry
   *
   */

  function PIERenderModel(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      if (options.model != null) {
        var model = options.model;

        if (model && model instanceof PIEModel3D) {
          var position = options.position;
          var scale = options.scale;
          var rotation = options.rotation;
          model.setPosition(position);
          model.setScale(scale);
          model.setRotation(rotation);
          handle = Module._RenderGeometry_Create(model.getHandle());
          autoRelease = true;
        }
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderModel.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 创建几何渲染类对象
   * @name RenderPlot
   *@class RenderPlot
   *标绘对象渲染操作函数
   *
   * @param {Object} options -
   * @param {Object} options.plot -军标对象
   * @param {PIEVector4} options.color -军标线符号颜色
   * @param {Number} options.width -几何对象的宽度
   * @param {Number} options.style -线风格
   * @param {Number} options.fillMode -填充模式
   * @param {Number} options.fillForeColor -填充颜色
   *
   * @extends RenderGeometry
   * @example
   * var plotPtsWgs84 = [118, 39.5];
     var posGlobeSR = patialReference.forward(plotPtsWgs84);
     var geoPlot = new PIE.GeoPlot({code:10107, points:posGlobeSR, unitLength:1})
     var renderPlot = new PIE.RenderPlot({plot:geoPlot, color:[255, 255, 0, 255], width:3, style:0});
   */

  function PIERenderPlot(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var plot = options.plot;

      if (plot != null) {
        if (plot instanceof PIEGeoPlot) {
          var color = options.color;
          var width = options.width;
          var style = options.style;
          var fillMode = options.fillMode;
          var fillForeColor = options.fillForeColor;

          if (color || width || style || fillMode || fillForeColor) {
            var plotStyle = new PIEPlotStyle();
            plotStyle.setAutoRelease(false);
            plotStyle.setLineColor(color);
            plotStyle.setLineWidth(width);
            plotStyle.setLineStyle(style);
            plotStyle.setFillMode(fillMode);
            plotStyle.setFillForeColor(fillForeColor);
            plot.setStyle(plotStyle);
          }

          handle = Module._RenderPlot_Create(plot.getHandle());
          autoRelease = true;
        }
      }

      if (options.handle != null) {
        handle = options.handle;
        autoRelease = false;
      }
    }

    PIERenderGeometry.call(this, handle, autoRelease);
  }

  PIERenderPlot.prototype = Object.assign(Object.create(PIERenderGeometry.prototype), {
    /**
     * 获取几何对象
     *
     * @memberOf RenderPlot#
     * @returns {PIEGeoPlot} 返回几何对象
     */
    getGeometry: function getGeometry() {
      var hGeometry = Module._RenderPlot_GetGeometry(this.handle);

      if (hGeometry) {
        return new PIEGeoPlot({
          handle: hGeometry
        });
      }

      return null;
    },

    /**
     *设置标绘位置
     * @param {(Array/PIEVector3)} position -标绘位置
     * @memberOf RenderPlot#
     */
    setPosition: function setPosition(position) {
      var posArray = [];

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = [position.x, position.y, position.z];
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderPlot_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     *获取标绘位置
     *
     * @memberOf RenderPlot#
     * @returns {PIEVector3} position -标绘位置
     */
    getPosition: function getPosition() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._RenderPlot_GetPosition(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var position = arrayPos.toArray();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     *设置是否可见
     * @param {Boolean} visible -是否可见
     * @memberOf RenderPlot#
     */
    setVisible: function setVisible(visible) {
      Module._RenderPlot_SetVisible(this.handle, visible);
    },

    /**
     *获取是否可见
     *
     * @memberOf RenderPlot#
     * @returns {Boolean} 返回是否可见
     */
    getVisible: function getVisible() {
      return Module._RenderPlot_GetVisible(this.handle);
    }
  });

  function PIERenderableFactory() {}

  Object.assign(PIERenderableFactory.prototype, {});

  PIERenderableFactory.CreateInstance = function (hRenderable) {
    var renderable = new PIERenderable(hRenderable);
    var type = renderable.getType();

    if (type == PIERenderableType.RenderPoint) {
      return new PIERenderPoint({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderPoint3D) {
      return new PIERenderPoint3D({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderPolygon) {
      return new PIERenderPolygon({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderPolygon3D) {
      return new PIERenderPolygon3D({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderPolyline) {
      return new PIERenderPolyline({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderPolyline3D) {
      return new PIERenderPolyline3D({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderText) {
      return new PIERenderText({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderText3D) {
      return new PIERenderText3D({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderModel) {
      return new PIERenderModel({
        handle: hRenderable
      });
    } else if (type == PIERenderableType.RenderPlot) {
      return new PIERenderPlot({
        handle: hRenderable
      });
    } else {
      return new PIERenderable(hRenderable);
    }
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建绘制对象图层
   * @name GlobeRenderableLayer
   * @class GlobeRenderableLayer
   * 三维渲染图层操作函数
   *
   * @extends GlobeLayer
   * @example
   * let globeRenderableLayer = new PIE.GlobeRenderableLayer()
   */

  function PIEGlobeRenderableLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._GlobeRenderableLayer_Create();
      autoRelease = true;
    }

    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeRenderableLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    /**
     * 获取绘制对象图层元素个数
     *
     * @memberOf GlobeRenderableLayer#
     * @returns {Number} 如果成功返回元素个数
     */
    getCount: function getCount() {
      return Module._GlobeRenderableLayer_GetCount(this.handle);
    },

    /**
     * 添加绘制对象
     *
     * @param {PIERenderable} renderable -绘制对象
     * @memberOf GlobeRenderableLayer#
     * @returns {Boolean} 如果成功返回true，失败返回false
     */
    add: function add(renderable) {
      return Boolean(Module._GlobeRenderableLayer_Add(this.handle, renderable.getHandle()));
    },

    /**
     * 根据序列号获取绘制对象
     * @param {Number} index -绘制对象序列号
     * @memberOf GlobeRenderableLayer#
     * @returns {PIERenderable} 如果成功返回绘制对象，失败返回NULL
     */
    getAt: function getAt(index) {
      var handle = Module._GlobeRenderableLayer_GetAt(this.handle, index);

      return PIERenderableFactory.CreateInstance(handle);
    },

    /**
     * 根据id获取绘制对象
     * @param {Number} id -绘制对象id
     * @memberOf GlobeRenderableLayer#
     * @returns {PIERenderable} 如果成功返回绘制对象，失败返回NULL
     */
    get: function get(id) {
      var handle = Module._GlobeRenderableLayer_Get(this.handle, id);

      if (handle) {
        return PIERenderableFactory.CreateInstance(handle);
      }

      return null;
    },

    /**
     * 根据id移除绘制对象(id对应的几何对象将被删除，不能继续使用)
     * @param {Number} id -绘制对象id
     * @memberOf GlobeRenderableLayer#
     * @returns {Boolean} 如果成功返回 true 失败返回false
     */
    remove: function remove(id) {
      return Boolean(Module._GlobeRenderableLayer_Remove(this.handle, id));
    },

    /**
     * 根据序列号移除绘制对象
     * @param {Number} index -绘制对象序列号
     * @memberOf GlobeRenderableLayer#
     *
     * @returns {Boolean} 如果成功返回 true 失败返回false
     */
    removeAt: function removeAt(index) {
      return Boolean(Module._GlobeRenderableLayer_RemoveAt(this.handle, index));
    },

    /**
     * 移除所有绘制对象
     * @memberOf GlobeRenderableLayer#
     *
     */
    removeAll: function removeAll() {
      Module._GlobeRenderableLayer_RemoveAll(this.handle);
    },
    // /**
    //  * 添加军标数据源
    //  * @param {PIEFeatureDataSource} plotDatasource -添加军标数据源对象
    //  * @param {PIEGlobe} globe -三维图像对象
    //  * @memberOf GlobeRenderableLayer#
    //  *
    //  * @example
    //  * let globeRenderableLayer = new PIE.GlobeRenderableLayer();
    //  * globeRenderableLayer.addPlotDatasource(plotDataSource, globe);
    //  */
    addPlotDatasource: function addPlotDatasource(plotDatasource, globe) {
      if (plotDatasource instanceof PIEDataSource) {
        var count = plotDatasource.getDatasetCount();

        for (var i = 0; i < count; i++) {
          var dataSet = Module._DataSource_GetDatasetAt(plotDatasource.getHandle(), i);

          Module._GlobeRenderableLayer_AddPlotDataset(this.handle, dataSet, globe.handle);
        }
      }
    },

    /**
     * 获取图层选择集
     *
     * @memberOf GlobeRenderableLayer#
     * @returns {PIESelection} 成功返回selection对象，失败返回null
     */
    getSelection: function getSelection() {
      var handle = Module._Globe_RenderableLayer_GetSelection(this.handle);

      return new PIESelection(handle);
    },

    /**
     * 清空要素图层选择集
     *
     * @memberOf GlobeRenderableLayer#
     * @returns {Boolean} 是否清空成功 成功返回 true 失败返回false
     */
    clearSelection: function clearSelection() {
      return Module._Globe_RenderableLayer_ClearSelection(this.handle);
    },
    // /**
    //  * 要素图层渲染器更新几何对象
    //  * @param {PIEGeometry} geometry -几何对象对象
    //  * @memberOf GlobeRenderableLayer#
    //  *
    //  * @returns {Boolean} 如果成功返回true，失败返回false
    //  *
    //  * @example
    //  * let globeRenderableLayer = new PIE.GlobeRenderableLayer();
    //  * globeRenderableLayer.updateGeometry(geometry);
    //  */
    updateGeometry: function updateGeometry(geometry) {
      return Module._Globe_RenderableLayer_UpdateGeometry(this.handle, geometry.getHandle());
    },

    /**
     * 设置图层是否可选择
     * @param {Boolean} selectable -是否可选择
     * @memberOf GlobeRenderableLayer#
     */
    setSelectable: function setSelectable(selectable) {
      Module._GlobeRenderableLayer_SetSelectable(this.handle, selectable);
    },

    /**
     * 判断图层是否可选
     * @memberOf GlobeRenderableLayer#
     * @returns {Boolean} 可选返回true，不可选返回false
     */
    isSelectable: function isSelectable() {
      return Boolean(Module._GlobeRenderableLayer_IsSelectable(this.handle));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 渲染对象操作函数
   * @name Projector
   * @class Projector
   * 创建渲染对象
   */

  function PIEProjector(handle, autoRelease) {
    if (handle == null) {
      this.handle = Module._Projector_Create();
      this.autoRelease = true;
    }
  }

  Object.assign(PIEProjector.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 设置名称
     * @param {String}  strName -名称
     * @memberOf Projector#
     */
    setName: function setName(strName) {
      var name = new PIEString$1(strName);

      Module._Projector_SetName(this.handle, name.getHandle());

      name.dispose();
    },

    /**
     * 获取名称
     *
     * @memberOf Projector#
     * @returns {String} 返回名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Projector_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置是否正投影
     * @param {Boolean} ortho -是否是正投影
     * @memberOf Projector#
     */
    setOrtho: function setOrtho(ortho) {
      Module._Projector_SetOrtho(this.handle, ortho);
    },

    /**
     * 获取是否正投影
     *
     * @memberOf Projector#
     * @returns {Boolean} 返回是否正投影(正投影返回true,否则返回false)
     */
    isOrtho: function isOrtho() {
      return Boolean(Module._Projector_IsOrtho(this.handle));
    },

    /**
     * 设置视场角度
     * @param {Number} fov -视场角度
     * @memberOf Projector#
     */
    setFov: function setFov(fov) {
      Module._Projector_SetFov(this.handle, fov);
    },

    /**
     * 获取视场角度
     *
     * @memberOf Projector#
     * @returns {Number} 返回视场角度
     */
    getFov: function getFov() {
      return Module._Projector_GetFov(this.handle);
    },

    /**
     * 设置宽高比
     * @param {Number} aspectRatio -宽高比
     * @memberOf Projector#
     */
    setAspectRatio: function setAspectRatio(aspectRatio) {
      Module._Projector_SetAspectRatio(this.handle, aspectRatio);
    },

    /**
     * 获取宽高比
     *
     * @memberOf Projector#
     * @returns {Number} 返回宽高比
     */
    getAspectRatio: function getAspectRatio() {
      return Module._Projector_GetAspectRatio(this.handle);
    },

    /**
     * 设置近裁剪面距离
     * @param {Number} distance -近裁剪面距离
     * @memberOf Projector#
     */
    setNearDistance: function setNearDistance(distance) {
      Module._Projector_SetNearDistance(this.handle, distance);
    },

    /**
     * 获取近裁剪面距离
     *
     * @memberOf Projector#
     * @returns {Number}  返回近裁剪面距离
     */
    getNearDistance: function getNearDistance() {
      return Module._Projector_GetNearDistance(this.handle);
    },

    /**
     * 设置远裁剪面距离
     * @param {Number}  distance -远裁剪面距离
     * @memberOf Projector#
     */
    setFarDistance: function setFarDistance(distance) {
      Module._Projector_SetFarDistance(this.handle, distance);
    },

    /**
     * 获取远裁剪面距离
     *
     * @memberOf Projector#
     * @returns {Number} 返回远裁剪面距离
     */
    getFarDistance: function getFarDistance() {
      return Module._Projector_GetFarDistance(this.handle);
    },

    /**
     * 设置视点位置
     * @param {(Array/PIEVector3)} position -视点位置
     * @memberOf Projector#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._Projector_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取视点位置
     *
     * @memberOf Projector#
     * @returns {PIEVector3} 返回视点位置
     */
    getPosition: function getPosition() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._Projector_GetPosition(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var position = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 设置视点方向
     * @param {(Array/PIEVector3)} direction -视点方向
     * @memberOf Projector#
     */
    setDirection: function setDirection(direction) {
      var posArray = null;

      if (direction instanceof Array) {
        posArray = direction;
      } else if (direction instanceof PIEVector3) {
        posArray = direction.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._Projector_SetDirection(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取视点方向
     *
     * @memberOf Projector#
     * @returns {PIEVector3} 返回视点方向
     */
    getDirection: function getDirection() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._Projector_GetDirection(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var position = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 设置视点向上方向
     * @param {(Array/PIEVector3)} up -视点向上方向
     * @memberOf Projector#
     */
    setUp: function setUp(up) {
      var posArray = null;

      if (up instanceof Array) {
        posArray = direction;
      } else if (up instanceof PIEVector3) {
        posArray = up.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._Projector_SetUp(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取视点向上方向
     *
     * @memberOf Projector#
     * @returns {PIEVector3} 返回视点向上方向
     */
    getUp: function getUp() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._Projector_GetUp(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var up = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(up[0], up[1], up[2]);
    },

    /**
     * 设置投射纹理
     * @param {PIETexture} texture -投射纹理
     * @memberOf Projector#
     */
    setTexture: function setTexture(texture) {
      Module._Projector_SetTexture(this.handle, texture.getHandle());
    },

    /**
     * 获取投射纹理
     *
     * @memberOf Projector#
     * @returns {PIETexture} 返回投射纹理
     */
    getTexture: function getTexture() {
      var handle = Module._Projector_GetTexture(this.handle);

      if (handle) {
        return new PIETexture(handle);
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维模型图层操作函数
   * @name GlobeModelLayer
   * @extends GlobeLayer
   */

  function PIEGlobeModelLayer(handle, autoRelease) {
    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeModelLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    // /**
    //  * 设置倾斜摄影模型数据源名称
    //  * @param {String} name -数据源名称
    //  * @memberOf GlobeModelLayer#
    //  */
    setDataSourceName: function setDataSourceName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeModelLayer_SetDataSourceName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取倾斜摄影模型数据源名称
    //  *
    //  * @memberOf GlobeModelLayer#
    //  * @returns {String} 返回数据源名称
    //  */
    getDataSourceName: function getDataSourceName() {
      var strName = new PIEString$1(256);

      Module._GlobeModelLayer_GetDataSourceName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },
    // /**
    //  * 设置倾斜摄影模型数据集名称
    //  * @param {String} name -数据集名称
    //  * @memberOf GlobeModelLayer#
    //  */
    setDatasetName: function setDatasetName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeModelLayer_SetDatasetName(this.handle, strName.getHandle());

      strName.dispose();
    },
    // /**
    //  * 获取倾斜摄影模型数据集名称
    //  *
    //  * @memberOf GlobeModelLayer#
    //  * @returns {String} 返回数据集名称
    //  */
    getDatasetName: function getDatasetName() {
      var strName = new PIEString$1(256);

      Module._GlobeModelLayer_GetDatasetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置倾斜摄影数据源
     * @param {PIEDataSource} datasource -数据源
     * @memberOf GlobeModelLayer#
     */
    setDataSource: function setDataSource(datasource) {
      Module._GlobeModelLayer_SetDataset(this.handle, datasource.getDataset().getHandle());
    },

    /**
     * 获取数据源
     *
     * @memberOf GlobeModelLayer#
     * @returns {PIEDataSource}  -返回数据源
     *
     */
    getDataSource: function getDataSource() {
      var hDataset = Module._GlobeModelLayer_GetDataset(this.handle);

      var hDataSource = Module._Dataset_GetDataSource(hDataset);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },
    setDataset: function setDataset(dataset) {
      Module._GlobeModelLayer_SetDataset(this.handle, dataset.getHandle());
    },
    getDataset: function getDataset() {
      var hDataset = Module._GlobeModelLayer_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(hDataset);
    },

    /**
     * 添加压平区域
     * @param {String} name -压平区域名称
     * @param {PIEPolygon3D} polygon -压平区域对象
     * @memberOf GlobeModelLayer#
     */
    addFlatten: function addFlatten(name, polygon) {
      var strName = new PIEString$1(name);

      Module._Globe_ModelLayer_AddFlatten(this.handle, strName.getHandle(), polygon.getHandle());

      strName.dispose();
    },

    /**
     * 根据名称获取压平区域
     * @param {String} name -压平区域名称
     * @memberOf GlobeModelLayer#
     * @returns {PIEPolygon3D} 返回压平区域
     */
    getFlatten: function getFlatten(name) {
      var strName = new PIEString$1(name);

      var handle = Module._Globe_ModelLayer_GetFlatten(this.handle, strName.getHandle());

      strName.dispose();

      if (handle) {
        return new PIEPolygon3D(handle);
      }
    },

    /**
     * 移除压平区域
     * @param {String} name -压平区域名称
     * @memberOf GlobeModelLayer#
     */
    removeFlatten: function removeFlatten(name) {
      var strName = new PIEString$1(name);

      Module._Globe_ModelLayer_RemoveFlatten(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 移除所有压平区域
     * @memberOf GlobeModelLayer#
     */
    removeAllFlattens: function removeAllFlattens() {
      Module._Globe_ModelLayer_RemoveAllFlattens(this.handle);
    },

    /**
     * 获取压平区域数量
     *
     * @memberOf GlobeModelLayer#
     * @returns {Number} 返回压平区域数量
     */
    getFlattenCount: function getFlattenCount() {
      return Module._Globe_ModelLayer_GetFlattenCount(this.handle);
    },

    /**
     * 添加渲染对象
     * @param {PIEProjector} projector -渲染对象
     * @memberOf GlobeModelLayer#
     */
    addProjector: function addProjector(projector) {
      Module._Globe_ModelLayer_AddProjector(this.handle, projector.getHandle());
    },

    /**
     * 获取渲染对象
     * @param {String} name -渲染对象名称
     * @memberOf GlobeModelLayer#
     * @returns {PIEProjector} 返回渲染对象
     */
    getProjector: function getProjector(name) {
      var strName = new PIEString$1(name);

      var handle = Module._Globe_ModelLayer_GetProjector(this.handle, strName.getHandle());

      strName.dispose();
      return new PIEProjector(handle);
    },

    /**
     * 移除渲染对象
     * @param {String} name -渲染对象名称
     * @memberOf GlobeModelLayer#
     */
    removeProjector: function removeProjector(name) {
      var strName = new PIEString$1(name);

      Module._Globe_ModelLayer_RemoveProjector(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 移除所有渲染对象
     * @memberOf GlobeModelLayer#
     */
    removeAllProjectors: function removeAllProjectors() {
      Module._Globe_ModelLayer_RemoveAllProjectors(this.handle);
    },

    /**
     * 获取渲染对象数量
     *
     * @memberOf GlobeModelLayer#
     * @returns {Number} 返回渲染对象数量
     */
    getProjectorCount: function getProjectorCount() {
      return Module._Globe_ModelLayer_GetProjectorCount(this.handle);
    },

    /**
     * 设置模型图层的饱和度
     * @param {Number} contrast -饱和度
     * @memberOf GlobeModelLayer#
     */
    setContrast: function setContrast(contrast) {
      Module._Globe_ModelLayer_SetContrast(this.handle, contrast);
    },

    /**
     * 获取模型图层的饱和度
     * @memberOf GlobeModelLayer#
     * @returns {Number} 返回饱和度
     */
    getContrast: function getContrast() {
      return Module._Globe_ModelLayer_GetContrast(this.handle);
    },

    /**
     * 设置模型图层的对比度
     * @param {Number} saturation -对比度
     * @memberOf GlobeModelLayer#
     */
    setSaturation: function setSaturation(saturation) {
      Module._Globe_ModelLayer_SetSaturation(this.handle, saturation);
    },

    /**
     * 获取模型图层的对比度
     * @memberOf GlobeModelLayer#
     * @returns {Number} 返回对比度
     */
    getSaturation: function getSaturation() {
      return Module._Globe_ModelLayer_GetSaturation(this.handle);
    },

    /**
     * 设置模型图层的亮度
     * @param {Number} brightness -亮度
     * @memberOf GlobeModelLayer#
     */
    setBrightness: function setBrightness(brightness) {
      Module._Globe_ModelLayer_SetBrightness(this.handle, brightness);
    },

    /**
     * 获取模型图层的亮度
     * @memberOf GlobeModelLayer#
     * @returns {Number} 返回亮度
     */
    getBrightness: function getBrightness() {
      return Module._Globe_ModelLayer_GetBrightness(this.handle);
    },

    /**
     * 判断模型图层是否自动投影转换
     * @memberOf GlobeModelLayer#
     * @returns {Boolean} 返回是否自动投影转换
     */
    IsAutoProjection: function IsAutoProjection() {
      Module._Globe_ModelLayer_IsAutoProjection(this.handle);
    },

    /**
     * 设置模型图层是否自动投影转换
     * @param {Boolean} autoProjection -是否自动投影转换
     * @memberOf GlobeModelLayer#
     */
    setAutoProjection: function setAutoProjection(autoProjection) {
      Module._Globe_ModelLayer_SetAutoProjection(this.handle, autoProjection);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建倾斜摄影模型图层
   * @name GlobeOSGBModelLayer
   * @class GlobeOSGBModelLayer
   * 倾斜摄影模型图层
   *
   * @extends GlobeModelLayer
   * @example
   * let globeTiltModelLayer = new PIE.GlobeTiltModelLayer()
   */

  function PIEGlobeOSGBModelLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_TiltModelLayer_Create();
      autoRelease = true;
    }

    PIEGlobeModelLayer.call(this, handle, autoRelease);
  }

  PIEGlobeOSGBModelLayer.prototype = Object.assign(Object.create(PIEGlobeModelLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建谷歌数据图层对象
   * @name GlobeTileGEDataLayer
   * @class GlobeTileGEDataLayer
   * 谷歌数据图层
   *
   * @extends GlobeLayer
   * @example
   * let globeTileGEDataLayer = new PIE.GlobeTileGEDataLayer()
   */

  function PIEGlobeTileGEDataLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._GlobeTileGEDataLayer_Create();
      autoRelease = true;
    }

    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeTileGEDataLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    /**
     * 设置谷歌数据图层数据源名称
     * @param {String} name -数据源名称
     * @memberOf GlobeTileGEDataLayer#
     *
     * @example
     * let globeTileGEDataLayer = new PIE.GlobeTileGEDataLayer();
     * globeTileGEDataLayer.setDataSourceName(name);
     */
    setDataSourceName: function setDataSourceName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeTileGEDataLayer_SetDataSourceName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取谷歌数据图层数据源名称
     *
     * @memberOf GlobeTileGEDataLayer#
     * @returns {String} 返回数据源名称
     *
     * @example
     * let globeTileGEDataLayer = new PIE.GlobeTileGEDataLayer();
     * var name = globeTileGEDataLayer.getDataSourceName();
     */
    getDataSourceName: function getDataSourceName() {
      var strName = new PIEString$1(256);

      Module._GlobeTileGEDataLayer_GetDataSourceName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置谷歌数据图层数据集名称
     * @param {String} name -数据集名称
     * @memberOf GlobeTileGEDataLayer#
     *
     * @example
     * let globeTileGEDataLayer = new PIE.GlobeTileGEDataLayer();
     * globeTileGEDataLayer.setDatasetName(name);
     */
    setDatasetName: function setDatasetName(name) {
      var strName = new PIEString$1(name);

      Module._GlobeTileGEDataLayer_SetDatasetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取谷歌数据图层数据集名称
     *
     * @memberOf GlobeTileGEDataLayer#
     * @returns {String} 数据集名称
     *
     * @example
     * let globeTileGEDataLayer = new PIE.GlobeTileGEDataLayer();
     * var name = globeTileGEDataLayer.getDatasetName();
     */
    getDatasetName: function getDatasetName() {
      var strName = new PIEString$1(256);

      Module._GlobeTileGEDataLayer_GetDatasetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置数据源
     * @param {PIEDataSources} datasource -数据源
     * @memberOf GlobeTileGEDataLayer#
     *
     * @example
     * let globeTileGEDataLayer = new PIE.GlobeTileGEDataLayer();
     * globeTileGEDataLayer.setDataSource(datasource);
     */
    setDataSource: function setDataSource(datasource) {
      Module._GlobeTileGEDataLayer_SetDataset(this.handle, datasource.getDataset().getHandle());
    },
    setDataset: function setDataset(dataset) {
      Module._GlobeTileGEDataLayer_SetDataset(this.handle, dataset.getHandle());
    },
    getDataset: function getDataset() {
      var hDataset = Module._GlobeTileGEDataLayer_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(hDataset);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 创建海图图层
   * @name GlobeSeamapLayer
   * @class GlobeSeamapLayer
   * 海图图层基本操作函数
   * @extends GlobeFeatureMapLayer
   *
   */

  function PIEGlobeSeamapLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_SeamapLayer_Create();
      autoRelease = true;
    }

    PIEGlobeCompositeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeSeamapLayer.prototype = Object.assign(Object.create(PIEGlobeCompositeLayer.prototype), {
    /**
     * 打开图层
     * @param {PIEDataSource} dataSource -海图数据源
     * @memberOf GlobeSeamapLayer#
     * @returns {Boolean} 返回是否成功
     */
    setDataSource: function setDataSource(dataSource) {
      return Module._Globe_SeamapLayer_Open(this.handle, dataSource.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建瓦片地图图层对象
   * @name GlobeTileMapLayer
   * @class GlobeTileMapLayer
   * 三维瓦片地图图层操作函数
   *
   * @extends GlobeCompositeLayer
   */

  function PIEGlobeTileMapLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_TileMapLayer_Create();
      autoRelease = true;
    }

    PIEGlobeCompositeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeTileMapLayer.prototype = Object.assign(Object.create(PIEGlobeCompositeLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 标绘图层
   * @name GLobePlotLayer
   *
   * @extends GlobeRenderableLayer
   */

  function PIEGlobePlotLayer(handle, autoRelease) {
    // if (handle == null) {
    //         handle = Module._GlobeRenderPlotLayer_Create();
    //         autoRelease = true;
    //     }
    PIEGlobeRenderableLayer.call(this, handle, autoRelease);
  }

  PIEGlobePlotLayer.prototype = Object.assign(Object.create(PIEGlobeRenderableLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建动态对象
   * @name DynamicFeature
   * @class DynamicFeature
   * 动态对象操作函数
   *
   * @param {Object} options -
   * @param {Number} options.id -动态对象ID
   * @param {(Array/PIEVector2)} options.position -对象定位点
   * @param {PIEGeometry} options.geometry -几何对象
   * @param {Number} options.blinkType -闪烁类型
   * @param {Number} options.plotType -军标类型
   * @example
   * var point = patialReference.forward([x, y]);
   var geoTexture = new PIE.GeoTexture({
                          texture: 11800,
                          point: point,
                          size: [32, 32],
                          color: [255, 0, 0, 255],
                          angle: 60
                      });

   var featurePos = [point[0], point[1], 0];
   var dynamicFeature = new PIE.DynamicFeature({
                          id: i,
                          position: featurePos,
                          geometry: geoTexture,
                          blinkType: 0,
                          plotType: 0
                      });
   *
   */

  function PIEDynamicFeature(options) {
    var handle = null;
    var autoRelease = false;

    if (options) {
      var id = options.id;
      var position = options.position;
      var geometry = options.geometry;
      var blinkType = options.blinkType;
      var plotType = options.plotType;

      if (id != null && position && geometry && blinkType != null && plotType != null) {
        var arrayPos = null;

        if (position instanceof Array) {
          arrayPos = new PIEArray(position, PIEArrayType.Float64);
        } else if (position instanceof PIEVector2) {
          arrayPos = new PIEArray([position.x, position.y], PIEArrayType.Float64);
        }

        if (arrayPos) {
          handle = Module._DynamicFeature_Make(id, arrayPos.getHandle(), geometry.getHandle(), blinkType, plotType);
          arrayPos.dispose();
          autoRelease = true;
        }
      }
    }

    if (options.handle) {
      handle = options.handle;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEDynamicFeature.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 删除动态对象
     * @memberOf DynamicFeature#
     */
    dispose: function dispose() {
      if (this.autoRelease) ;

      this.handle = null;
    },

    /**
     * 获取动态对象的ID
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 返回动态对象的ID
     *
     */
    getID: function getID() {
      return Module._DynamicFeature_GetID(this.handle);
    },

    /**
     * 设置动态对象的ID
     * @param {Number} id -输入的ID
     * @memberOf DynamicFeature#
     *
     */
    setID: function setID(id) {
      Module._DynamicFeature_SetID(this.handle, id);
    },

    /**
     * 获取动态对象的定位点
     *
     * @memberOf DynamicFeature#
     * @returns {PIEVector3} 返回对象定位点
     *
     */
    getPosition: function getPosition() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._DynamicFeature_GetPosition(this.handle, arrayPos.getHandle());

      arrayPos.updateData();
      var position = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 设置动态对象的定位点
     * @param {(Array/PIEVector3)} position -定位点
     * @memberOf DynamicFeature#
     *
     */
    setPosition: function setPosition(position) {
      var arrayPos = null;

      if (position instanceof Array) {
        arrayPos = new PIEArray(position, PIEArrayType.Float64);
      } else if (position instanceof PIEVector3) {
        arrayPos = new PIEArray(position.toArray(), PIEArrayType.Float64);
      }

      if (arrayPos) {
        Module._DynamicFeature_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取动态对象的纹理ID
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 返回对象纹理ID
     *
     */
    getTexture: function getTexture() {
      return Module._DynamicFeature_GetTexture(this.handle);
    },

    /**
     * 设置动态对象的纹理ID
     * @param {Number} textureId -纹理ID
     * @memberOf DynamicFeature#
     *
     */
    setTexture: function setTexture(textureId) {
      Module._DynamicFeature_SetTexture(this.handle, textureId);
    },

    /**
     *获取动态对象的旋转角度
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 返回动态对象的旋转角度
     *
     */
    getRotation: function getRotation() {
      return Module._DynamicFeature_GetRotation(this.handle);
    },

    /**
     * 设置动态对象的旋转角度
     * @param {Number} rotation -旋转角度
     * @memberOf DynamicFeature#
     *
     */
    setRotation: function setRotation(rotation) {
      Module._DynamicFeature_SetRotation(this.handle, rotation);
    },

    /**
     * 设置动态对象是否可见
     * @param {Boolean} visible -是否可见
     * @memberOf DynamicFeature#
     *
     */
    setVisible: function setVisible(visible) {
      Module._DynamicFeature_SetVisible(this.handle, visible);
    },

    /**
     * 获取动态对象是否可见
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否可见(true-可见，false-不可见)
     *
     */
    isVisible: function isVisible() {
      return Module._DynamicFeature_IsVisible(this.handle);
    },

    /**
     * 设置动态对象是否可选
     * @param {Boolean} selectable -是否可选
     * @memberOf DynamicFeature#
     *
     */
    setSelectable: function setSelectable(selectable) {
      Module._DynamicFeature_SetSelectable(this.handle, selectable);
    },

    /**
     * 设置动态对象是否闪烁
     * @param {Boolean} visible -是否闪烁
     * @memberOf DynamicFeature#
     *
     */
    setVisibleBlink: function setVisibleBlink(visible) {
      Module._DynamicFeature_SetVisibleBlink(this.handle, visible);
    },

    /**
     * 获取动态对象是否可选
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} -返回是否可选(true-可选，false-不可选)
     *
     */
    isSelectable: function isSelectable() {
      return Module._DynamicFeature_IsSelectable(this.handle);
    },

    /**
     * 设置动态对象是否颜色闪烁
     * @param {Boolean} colorBlink -是否颜色闪烁
     * @memberOf DynamicFeature#
     *
     */
    setColorBlink: function setColorBlink(colorBlink) {
      Module._DynamicFeature_SetColorBlink(this.handle, colorBlink);
    },

    /**
     * 获取动态对象是否颜色闪烁
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} -返回是否颜色闪烁(true-闪烁，false-不闪烁)
     *
     */
    isColorBlink: function isColorBlink() {
      return Module._DynamicFeature_IsColorBlink(this.handle);
    },

    /**
     *设置动态对象是否执行动画
     * @param {Boolean} animation -是否执行动画
     * @memberOf DynamicFeature#
     *
     */
    setAnimation: function setAnimation(animation) {
      Module._DynamicFeature_SetAnimation(this.handle, animation);
    },

    /**
     *获取动态对象是否执行动画
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否执行动画(true-执行，false-不执行)
     *
     */
    isAnimation: function isAnimation() {
      return Module._DynamicFeature_IsAnimation(this.handle);
    },

    /**
     *设置闪烁图标
     * @param {Number} iconIds -图标ID
     * @memberOf DynamicFeature#
     *
     */
    setBlinkIcons: function setBlinkIcons(iconIds) {
      var arrayId = new PIEArray(iconIds, PIEArrayType.Int32);

      Module._DynamicFeature_SetBlinkIcons(this.handle, arrayId.getHandle(), iconIds.length);
    },

    /**
     *设置动态对象是否显示轨迹
     * @param {Boolean} visible -是否显示轨迹
     * @memberOf DynamicFeature#
     *
     */
    setLocusVisible: function setLocusVisible(visible) {
      Module._DynamicFeature_SetLocusVisible(this.handle, visible);
    },

    /**
     *获取动态对象是否显示轨迹
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否显示轨迹(true-显示，false-不显示)
     *
     */
    isLocusVisible: function isLocusVisible() {
      return Module._DynamicFeature_IsLocusVisible(this.handle);
    },

    /**
     *设置是否渲染尾迹
     *
     * @param {Boolean} bWake -是否渲染尾迹
     * @memberOf DynamicFeature#
     *
     */
    setWakeVisible: function setWakeVisible(bWake) {
      Module._DynamicFeature_SetWakeVisible(this.handle, bWake);
    },

    /**
     *获取是否渲染尾迹
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否渲染尾迹(true-渲染，false-不渲染)
     *
     */
    isWakeVisible: function isWakeVisible() {
      return Module._DynamicFeature_IsWakeVisible(this.handle);
    },

    /**
     *设置尾迹线起始点
     * @param {Number} nWakeStartPixel -距离图标起始点像素坐标位置
     * @memberOf DynamicFeature#
     *
     */
    setWakeStartPixel: function setWakeStartPixel(nWakeStartPixel) {
      Module._DynamicFeature_SetWakeStartPixel(this.handle);
    },

    /**
     *获取尾迹线起始点
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 距离图标起始点像素坐标位置
     *
     */
    getWakeStartPixel: function getWakeStartPixel() {
      return Module._DynamicFeature_GetWakeStartPixel(this.handle);
    },

    /**
     *设置尾迹线终止点
     * @param {Number} nWakeEndPixel -距离图标终止点像素坐标位置
     * @memberOf DynamicFeature#
     *
     */
    setWakeEndPixel: function setWakeEndPixel(nWakeEndPixel) {
      Module._DynamicFeature_SetWakeEndPixel(this.handle, nWakeEndPixel);
    },

    /**
     *获取尾迹线终止点
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 距离图标终止点像素坐标位置
     *
     */
    getWakeEndPixel: function getWakeEndPixel() {
      return Module._DynamicFeature_GetWakeEndPixel(this.handle);
    },

    /**
     *设置尾迹线宽
     * @param {Number} nWakeWidth -尾迹线宽
     * @memberOf DynamicFeature#
     *
     */
    setWakeLineWidth: function setWakeLineWidth(nWakeWidth) {
      Module._DynamicFeature_SetWakeLineWidth(this.handle, nWakeWidth);
    },

    /**
     *获取尾迹线终止点
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 返回尾迹线宽
     *
     */
    getWakeLineWidth: function getWakeLineWidth() {
      return Module._DynamicFeature_GetWakeLineWidth(this.handle);
    },

    /**
     *设置尾迹线色
     * @param {(PIEColor/Array)} color -尾迹线色
     * @memberOf DynamicFeature#
     *
     */
    setWakeLineColor: function setWakeLineColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._DynamicFeature_SetWakeLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     *获取尾迹线色
     *
     * @memberOf DynamicFeature#
     * @returns {PIEColor} 尾迹线色
     *
     */
    getWakeLineColor: function getWakeLineColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._DynamicFeature_GetWakeLineColor(this.handle, colorArray);

      colorArray.updateData();
      var array = colorArray.toArray();
      var Color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return Color;
    },

    /**
     *设置是否启用点画轨迹
     * @param {Boolean} bPoint -是否启用
     * @memberOf DynamicFeature#
     *
     */
    setLocusPointsMode: function setLocusPointsMode(bPoint) {
      Module._DynamicFeature_SetLocusPointsMode(this.handle, bPoint);
    },

    /**
     *获取是否启用点画轨迹
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否启用点画轨迹(true-启用点画轨迹，false-不启用点画轨迹)
     *
     */
    isLocusPointsMode: function isLocusPointsMode() {
      return Module._DynamicFeature_IsLocusPointsMode(this.handle);
    },

    /**
     *设置是否启用虚线模式
     * @param {Boolean} bStipple -是否启用
     * @memberOf DynamicFeature#
     *
     */
    setLocusStippleMode: function setLocusStippleMode(bStipple) {
      Module._DynamicFeature_SetLocusStippleMode(this.handle, bStipple);
    },

    /**
     *获取是否启用虚线模式
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否启用虚线模式(true-启用，false-不启用)
     *
     */
    isLocusStippleMode: function isLocusStippleMode() {
      return Module._DynamicFeature_IsLocusStippleMode(this.handle);
    },

    /**
     *设置点的大小或线的宽度
     * @param {Number} nWidth -点的大小或线的宽度
     * @memberOf DynamicFeature#
     *
     */
    setLineWidth: function setLineWidth(nWidth) {
      Module._DynamicFeature_SetLineWidth(this.handle, nWidth);
    },

    /**
     *获取点的大小或线的宽度
     *
     * @memberOf DynamicFeature#
     *@returns {Number} 返回点的大小或线的宽度
     *
     */
    getLineWidth: function getLineWidth() {
      return Module._DynamicFeature_GetLineWidth(this.handle);
    },

    /**
     *设置虚线点画模式
     *@param {Number} pattern 轨迹点画模式
     * @memberOf DynamicFeature#
     *
     */
    setLinePattern: function setLinePattern(pattern) {
      Module._DynamicFeature_SetLinePattern(this.handle, pattern);
    },

    /**
     *设置虚线点画模式
     *@param {Number} nFactor -轨迹点画模式重复系数
     *@param {Number} pattern -轨迹点画模式
     * @memberOf DynamicFeature#
     *
     */
    setLinePatternWithFactor: function setLinePatternWithFactor(nFactor, pattern) {
      Module._DynamicFeature_SetLinePatternWithFactor(this.handle, nFactor, pattern);
    },

    /**
     *设置点或线的颜色
     *@param {(PIEColor/Array)} Color -颜色值
     * @memberOf DynamicFeature#
     *
     */
    setLocusLineColor: function setLocusLineColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._DynamicFeature_SetLocusLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     *删除动态对象
     *
     * @memberOf DynamicFeature#
     */
    "delete": function _delete() {
      Module._DynamicFeature_Delete(this.handle);
    },

    /**
     *向集合中添加角度不变对象
     *@param {Number} code -添加对象
     * @memberOf DynamicFeature#
     *
     */
    addKeepAngleSet: function addKeepAngleSet(code) {
      Module._DynamicFeature_AddKeepAngleSet(code);
    },

    /**
     *设置是否显示广告牌
     *@param {Boolean} billBoard -是否显示广告牌
     * @memberOf DynamicFeature#
     *
     */
    setEnableBillboard: function setEnableBillboard(billBoard) {
      Module._DynamicFeature_SetEnableBillboard(this.handle, billBoard);
    },

    /**
     *获取是否显示广告牌
     *
     * @memberOf DynamicFeature#
     *@returns {Boolean} 返回是否显示广告牌(true-显示广告牌，false-不显示广告牌)
     *
     */
    isEnableBillboard: function isEnableBillboard() {
      return Module._DynamicFeature_SetEnableBillboard(this.handle);
    },

    /**
     * 设置广告牌边框颜色
     * @param {(PIEColor/Array)} color -颜色值
     * @memberOf DynamicFeature#
     *
     */
    setBillboardLineColor: function setBillboardLineColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._DynamicFeature_SetBillboardLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     *获取广告牌边框颜色
     *
     * @memberOf DynamicFeature#
     *@returns {PIEColor} 返回广告牌边框颜色
     *
     */
    getBillboardLineColor: function getBillboardLineColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._DynamicFeature_GetBillboardLineColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return color;
    },

    /**
     *设置广告牌填充颜色
     *@param {(PIEColor/Array)} color -颜色值
     * @memberOf DynamicFeature#
     *
     */
    setBillboardFillColor: function setBillboardFillColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._DynamicFeature_SetBillboardFillColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     *获取广告牌填充颜色
     *
     * @memberOf DynamicFeature#
     * @returns {PIEColor} 返回广告牌填充颜色
     *
     */
    getBillboardFillColor: function getBillboardFillColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._DynamicFeature_GetBillboardFillColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return color;
    },

    /**
     *设置广告牌文本颜色
     * @param {(PIEColor/Array)} color -颜色值
     * @memberOf DynamicFeature#
     *
     */
    setBillboardTextColor: function setBillboardTextColor(color) {
      var arrayColor = null;

      if (color instanceof Array) {
        arrayColor = new PIEArray(color, PIEArrayType.UInt8);
      } else if (color instanceof PIEColor) {
        arrayColor = new PIEArray(color.toArray(), PIEArrayType.UInt8);
      }

      if (arrayColor) {
        Module._DynamicFeature_SetBillboardTextColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },

    /**
     *获取广告牌文本颜色
     *
     * @memberOf DynamicFeature#
     * @returns {PIEColor} 返回广告牌文本颜色
     *
     */
    getBillboardTextColor: function getBillboardTextColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._DynamicFeature_GetBillboardTextColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return color;
    },

    /**
     *设置广告牌内容
     *@param {Number} nAlign -点的对齐方式
     *@param {String} pText -广告牌的内容
     * @memberOf DynamicFeature#
     */
    setBillboardText: function setBillboardText(nAlign, pText) {
      Module._DynamicFeature_SetBillboardText(this.handle, nAlign, pText);
    },

    /**
     *获取广告牌内容
     *
     * @memberOf DynamicFeature#
     *@returns {String} 返回广告牌的内容
     */
    getBillboardText: function getBillboardText() {
      var strText = new PIEString$1(256);

      Module._DynamicFeature_GetBillboardText(this.handle, strText.getHandle());

      var text = strText.toString();
      strText.dispose();
      return text;
    },

    /**
     *添加标牌文字
     *
     * @param {PIEPointAlignType} alignType -指定的标牌对齐方式
     * @param {String} text -指定的标牌内容
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 是否添加成功
     */
    addBillboardText: function addBillboardText(alignType, text) {
      var strText = new PIEString$1(text);
      return Module._DynamicFeature_AddBillboardText(this.handle, alignType, strText.getHandle());
    },

    /**
     *获取标牌文字
     *
     * @param {Number} nAlignType -指定的标牌对齐方式
     * @memberOf DynamicFeature#
     *
     * @returns {String} 返回指定的标牌文字
     */
    getBillboardTextEx: function getBillboardTextEx(nAlignType) {
      var strText = new PIEString$1(256);

      Module._DynamicFeature_GetBillboardTextEx(this.handle, nAlignType, strText);

      var text = strText.toString();
      strText.dispose();
      return text;
    },

    /**
     *改变标牌文字
     * @param {Number} nAlignType -指定的标牌对齐方式
     * @param {String} pText -指定的标牌内容
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 是否设置成功
     */
    changeBillboardText: function changeBillboardText(nAlignType, pText) {
      return Module._DynamicFeature_ChangeBillboardText(this.handle, nAlignType, pText);
    },

    /**
     *移除标牌文字
     * @param {Number} nAlignType -指定的标牌对齐方式
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 是否移除成功
     */
    removeBillboardText: function removeBillboardText(nAlignType) {
      return Module._DynamicFeature_RemoveBillboardText(this.handle, nAlignType);
    },

    /**
     *设置标牌聚合后的文字
     * @param {Number} nAlignType -指定的标牌对齐方式
     * @param {String} pText -指定的标牌牌聚合后的文字
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 是否添加成功
     */
    setBillboardPolyText: function setBillboardPolyText(nAlignType, pText) {
      return Module._DynamicFeature_SetBillboardPolyText(this.handle, nAlignType, pText);
    },

    /**
     *获取标牌文字
     * @param {Number} nAlignType -指定的标牌对齐方式
     * @memberOf DynamicFeature#
     *
     * @returns {String} 指定的标牌文字
     */
    getBillboardPolyText: function getBillboardPolyText(nAlignType) {
      var strText = new PIEString$1(256);

      Module._DynamicFeature_GetBillboardPolyText(this.handle, nAlignType, strText);

      var text = strText.toString();
      strText.dispose();
      return text;
    },

    /**
     *设置聚合后的纹理
     * @param {Number} pText -聚合后的纹理
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 是否设置成功
     */
    setBillboardPolyTexture: function setBillboardPolyTexture(pText) {
      return Module._DynamicFeature_SetBillboardPolyTexture(this.handle, pText);
    },

    /**
     *获取聚合后的纹理
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 聚合后的纹理
     */
    getBillboardPolyTexture: function getBillboardPolyTexture() {
      return Module._DynamicFeature_GetBillboardPolyTexture(this.handle);
    },

    /**
     *显示隐藏标牌文字
     * @param {Number} nAlign -指定的标牌对齐方式
     * @param {Boolean} bShow -是否显示
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 是否成功显示
     */
    showBillboardText: function showBillboardText(nAlign, bShow) {
      return Module._DynamicFeature_ShowBillboardText(this.handle, nAlign, bShow);
    },

    /**
     *标牌文字是否显示
     * @param {Number} nAlign -指定的标牌对齐方式
     * @memberOf DynamicFeature#
     *
     *@returns {Boolean} 是否显示标牌文字
     */
    isBillboardTextShown: function isBillboardTextShown(nAlign) {
      return Module._DynamicFeature_IsBillboardTextShown(this.handle, nAlign);
    },

    /**
     *从集合中移除角度不变对象
     *
     * @param {Number} code -移除对象
     * @memberOf DynamicFeature#
     */
    removeCode: function removeCode(code) {
      Module._DynamicFeature_RemoveCode(code);
    },

    /**
     *设置布告板的显示模式
     * @param {PIEBillBoardModeType} modeType -布告板的显示模式(只能设置PIE.BillBoardModeType.ScreenAlignMode或者PIE.BillBoardModeType.AngleFixedMode)
     * @memberOf DynamicFeature#
     */
    setBillboardMode: function setBillboardMode(modeType) {
      Module._DynamicFeature_SetBillboardMode(this.handle, modeType);
    },

    /**
     * 获取布告板的显示模式
     * @memberOf DynamicFeature#
     * @returns {PIEBillBoardModeType} 返回布告板的显示模式
     */
    getBillboardMode: function getBillboardMode() {
      return Module._DynamicFeature_GetBillboardMode(this.handle);
    },

    /**
     *设置标牌文字的大小
     * @param {(Array/PIESize)} size -文字大小
     * @memberOf DynamicFeature#
     */
    setBillboardTextSize: function setBillboardTextSize(size) {
      var TextSize = null;

      if (size instanceof Array) {
        TextSize = new PIEArray(size, PIEArrayType.Float64);
      } else if (size instanceof PIESize) {
        TextSize = new PIEArray(size.toArray(), PIEArrayType.Float64);
      }

      if (TextSize) {
        Module._DynamicFeature_SetBillBoardTextSize(this.handle, TextSize.getHandle());

        TextSize.dispose();
      }
    },

    /**
     *设置渲染是否聚合
     * @param {Boolean} bRenderPolymerization -是否聚合
     * @memberOf DynamicFeature#
     */
    setRenderPolymerization: function setRenderPolymerization(bRenderPolymerization) {
      Module._DynamicFeature_SetRenderPolymerization(this.handle, bRenderPolymerization);
    },

    /**
     *判断是否渲染聚合
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否聚合
     */
    isIsRenderPolymerization: function isIsRenderPolymerization() {
      return Module._DynamicFeature_IsIsRenderPolymerization(this.handle);
    },

    /**
     * 设置动态对象是否闪烁颜色
     * @param {Boolean} colorBlink -是否闪烁
     * @memberOf DynamicFeature#
     */
    setBlinkColor: function setBlinkColor(colorBlink) {
      Module._DynamicFeature_SetBlinkColor(this.handle, colorBlink);
    },

    /**
     * 获取动态对象是否闪烁颜色
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回动态对象是否闪烁颜色
     */
    isBlinkColor: function isBlinkColor() {
      return Module._DynamicFeature_IsBlinkColor(this.handle);
    },

    /**
     * 获取选中对象个数
     *
     * @memberOf DynamicFeature#
     * @return {Number} 返回选中对象个数
     */
    getPolymerizationCount: function getPolymerizationCount() {
      return Module._DynamicFeature_GetPolymerizationCount(this.handle);
    },

    /**
     * 获取选中聚合对象中所有的对象
     * @param {Array} polymerizedObjects -聚合对象中所有的对象
     *
     * @memberOf DynamicFeature#
     * @return {Boolean} 是否返回选中聚合对象中所有的对象
     */
    getPolymerizedObjects: function getPolymerizedObjects(polymerizedObjects) {
      var arrayObjects = new PIEArray(polymerizedObjects, PIEArrayType.Int32);

      var result = Module._DynamicFeature_GetPolymerizedObjects(this.handle, arrayObjects.getHandle(), polymerizedObjects.length);

      arrayObjects.dispose();
      return Boolean(result);
    },
    addCutomPlotCode: function addCutomPlotCode(desPlotCode, srcPlotCode) {
      Module._Globe_CP_AddCutomPlotCode(desPlotCode, srcPlotCode);
    },
    removeCustomPlotCode: function removeCustomPlotCode(desPlotCode, srcPlotCode) {
      Module._Globe_CP_RemoveCustomPlotCode(desPlotCode, srcPlotCode);
    },
    removeCustomPlots: function removeCustomPlots(desPlotCode) {
      Module._Globe_CP_RemoveCustomPlots(desPlotCode);
    },
    removeAllCustomPlotCodes: function removeAllCustomPlotCodes() {
      Module._Globe_CP_RemoveAllCustomPlotCodes();
    },
    addDefaultPlotCode: function addDefaultPlotCode(plotType, plotCode) {
      Module._Globe_CP_AddDefaultPlotCode(plotType, plotCode);
    },
    removeDefaultPlotCode: function removeDefaultPlotCode(plotType) {
      Module._Globe_CP_RemoveDefaultPlotCode(plotType);
    },
    removeAllDefaultPlotCode: function removeAllDefaultPlotCode() {
      Module._Globe_CP_RemoveAllDefaultPlotCode();
    },
    findPolymerizationCode: function findPolymerizationCode(plotCode) {
      Module._Globe_CP_FindPolymerizationCode(plotCode);
    },
    findDefaultPolymerizationCode: function findDefaultPolymerizationCode(plotType) {
      Module._Globe_CP_FindDefaultPolymerizationCode(plotType);
    },

    /**
     * 获取风格颜色
     *
     * @memberOf DynamicFeature#
     * @returns {PIEColor} 返回风格颜色
     */
    getStyleColor: function getStyleColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._DynamicFeature_GetStyleColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(array[0], array[1], array[2], array[3]);
    },

    /**
     * 设置风格颜色
     * @param {(PIEColor/Array)} color -风格颜色
     * @memberOf DynamicFeature#
     */
    setStyleColor: function setStyleColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._DynamicFeature_SetStyleColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取风格高度
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 返回风格高度
     */
    getStyleHeight: function getStyleHeight() {
      return Module._DynamicFeature_GetStyleHeight(this.handle);
    },

    /**
     * 设置风格高度
     * @param {Number} height -风格高度
     *
     * @memberOf DynamicFeature#
     * @returns {Boolean} 返回是否设置成功
     */
    setStyleHeight: function setStyleHeight(height) {
      return Module._DynamicFeature_SetStyleHeight(this.handle, height);
    },

    /**
     * 获取风格宽度
     *
     * @memberOf DynamicFeature#
     * @returns {Number} 返回风格宽度
     */
    getStyleWidth: function getStyleWidth() {
      return Module._DynamicFeature_GetStyleWidth(this.handle);
    },

    /**
     * 设置风格宽度
     * @param {Number} width -风格宽度
     * @memberOf DynamicFeature#
     *
     * @returns {Boolean} 返回是否设置成功
     */
    setStyleWidth: function setStyleWidth(width) {
      return Module._DynamicFeature_SetStyleWidth(this.handle, width);
    },

    /**
     * 获取轨迹数组
     * @memberOf DynamicFeature#
     *
     * @returns {Array} 返回轨迹数组
     */
    getLocusPoints: function getLocusPoints() {
      var PointsArray = null;

      var count = Module._DynamicFeature_GetLocusPointsCount(this.handle);

      PointsArray = new PIEArray(count, PIEArrayType.Float64);

      Module._DynamicFeature_GetLocusPoints(this.handle, PointsArray.getHandle(), count);

      PointsArray.updateData();
      var LocusPoints = PointsArray.toArray();
      PointsArray.dispose();
      return LocusPoints;
    },

    /**
     * 设置轨迹数组
     * @param {Array} pLocusPoints -轨迹数组点
     * @param {Number} count -点个数
     * @memberOf DynamicFeature#
     *
     */
    setLocusPoints: function setLocusPoints(pLocusPoints, count) {
      var PointsArray = null;

      if (pLocusPoints instanceof Array) {
        PointsArray = new PIEArray(pLocusPoints, PIEArrayType.Float64);
      }

      if (PointsArray) {
        Module._DynamicFeature_SetLocusPoints(this.handle, PointsArray.getHandle(), count);

        PointsArray.dispose();
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建动态层图层
   * @name GlobeDynamicLayer
   * @class GlobeDynamicLayer
   * 动态层图层操作函数
   * @extends GlobeLayer
   *
   * @example
   * let globeDynamicLayer = new PIE.GlobeDynamicLayer()
   */

  function PIEGlobeDynamicLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_DynamicLayer_Create();
      autoRelease = true;
    }

    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeDynamicLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    /**
     * 获取动态层个数
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Number} 返回动态层个数
     *
     */
    getCount: function getCount() {
      return Module._Globe_DynamicLayer_GetCount(this.handle);
    },

    /**
     * 向图层中添加几何对象
     * @param {PIEDynamicFeature} dynamicFeature - 几何对象
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Boolean} 是否添加成功
     *
     */
    add: function add(dynamicFeature) {
      return Module._Globe_DynamicLayer_Add(this.handle, dynamicFeature.getHandle());
    },

    /**
     * 获取指定索引的对象
     * @param {Number} iD -几何对象索引
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {PIEDynamicFeature} 返回动态层图层对象
     *
     */
    get: function get(iD) {
      var handle = Module._Globe_DynamicLayer_Get(this.handle, iD);

      if (handle) {
        return new PIEDynamicFeature({
          handle: handle
        });
      }
    },

    /**
     * 移除指定索引的对象
     * @param {Number} iD -几何对象索引
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Boolean} 返回是否移除成功
     *
     */
    remove: function remove(iD) {
      return Module._Globe_DynamicLayer_Remove(this.handle, iD);
    },

    /**
     * 移除所有索引的对象
     * @memberOf GlobeDynamicLayer#
     */
    removeAll: function removeAll() {
      Module._Globe_DynamicLayer_RemoveAll(this.handle);
    },

    /**
     * 设置是否聚合显示
     * @param {Boolean} polymerization 是否聚合显示
     * @memberOf GlobeDynamicLayer#
     */
    setPolymerization: function setPolymerization(polymerization) {
      Module._Globe_DynamicLayer_SetPolymerization(this.handle, polymerization);
    },

    /**
     * 获取是否聚合显示
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Boolean} 返回是否聚合显示
     *
     */
    getPolymerization: function getPolymerization() {
      return Module._Globe_DynamicLayer_GetPolymerization(this.handle);
    },

    /**
     * 设置广告牌边框颜色
     * @param {(PIEColor/Array)} color -颜色值
     * @memberOf GlobeDynamicLayer#
     */
    setBillboardLineColor: function setBillboardLineColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._Globe_DynamicLayer_SetBillboardLineColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取广告牌边框颜色
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {PIEColor} 返回广告牌边框颜色
     *
     */
    getBillboardLineColor: function getBillboardLineColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._Globe_DynamicLayer_GetBillboardLineColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return color;
    },

    /**
     * 设置广告牌填充颜色
     * @param {(PIEColor/Array)} color -颜色值
     * @memberOf GlobeDynamicLayer#
     *
     */
    setBillboardFillColor: function setBillboardFillColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._Globe_DynamicLayer_SetBillboardFillColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取广告牌填充颜色
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {PIEColor} 广告牌填充颜色
     *
     */
    getBillboardFillColor: function getBillboardFillColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._Globe_DynamicLayer_GetBillboardFillColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return color;
    },

    /**
     * 设置广告牌文本颜色
     * @param {(PIEColor/Array)} color -广告牌填充颜色
     * @memberOf GlobeDynamicLayer#
     *
     */
    setBillboardTextColor: function setBillboardTextColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      if (colorArray) {
        Module._Globe_DynamicLayer_SetBillboardTextColor(this.handle, colorArray.getHandle());

        colorArray.dispose();
      }
    },

    /**
     * 获取广告牌文本颜色
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {PIEColor} 广告牌文本颜色
     *
     */
    getBillboardTextColor: function getBillboardTextColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._Globe_DynamicLayer_GetBillboardTextColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return color;
    },

    /**
     * 设置聚合容限
     * @param {Number} value -聚合容限
     * @memberOf GlobeDynamicLayer#
     *
     */
    setDistanceThreshold: function setDistanceThreshold(value) {
      Module._Globe_DynamicLayer_SetDistanceThreshold(this.handle, value);
    },

    /**
     * 获取聚合容限
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Number} 返回聚合容限
     *
     */
    getDistanceThreshold: function getDistanceThreshold() {
      return Module._Globe_DynamicLayer_GetDistanceThreshold(this.handle);
    },

    /**
     * 创建一个自定义聚合组
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Number} 返回自定义聚合组的ID
     *
     */
    createGroup: function createGroup() {
      return Module._Globe_DynamicLayer_CreateGroup(this.handle);
    },

    /**
     * 销毁一个自定义聚合组
     * @param {Number} groupID -自定义聚合组的ID
     * @memberOf GlobeDynamicLayer#
     *
     */
    destroyGroup: function destroyGroup(groupID) {
      Module._Globe_DynamicLayer_DestroyGroup(this.handle, groupID);
    },

    /**
     * 获取自定义聚合组数目
     * @memberOf GlobeDynamicLayer#
     * @returns {Number} 返回自定义聚合组数目
     */
    getGroupCount: function getGroupCount() {
      return Module._Globe_DynamicLayer_GetGroupCount(this.handle);
    },

    /**
     * 将一个动态对象添加到自定义聚合组
     * @param {Number} groupID -自定义聚合组的ID
     * @param {PIEDynamicFeature} dynamicFeature -需要添加到自定义聚合组的动态对象
     * @memberOf GlobeDynamicLayer#
     *
     */
    addFeatureToGroup: function addFeatureToGroup(groupID, dynamicFeature) {
      Module._Globe_DynamicLayer_AddFeatureToGroup(this.handle, groupID, dynamicFeature.getHandle());
    },

    /**
     * 将一个动态对象从自定义聚合组中删除
     * @param {Number} groupID -自定义聚合组的ID
     * @param {PIEDynamicFeature} dynamicFeature -需要从自定义聚合组删除的动态对象
     *
     * @memberOf GlobeDynamicLayer#
     *@returns {Boolean} 成功返回true，失败返回false
     *
     */
    removeFeatureFromGroup: function removeFeatureFromGroup(groupID, dynamicFeature) {
      return Module._Globe_DynamicLayer_RemoveFeatureFromGroup(this.handle, groupID, dynamicFeature.getHandle());
    },

    /**
     * 获取自定义聚合组的成员数目
     * @param {Number} groupID -自定义聚合组的ID
     *
     * @memberOf GlobeDynamicLayer#
     *@returns {Number} 返回自定义聚合组的数目
     *
     */
    getGroupFeatureCount: function getGroupFeatureCount(groupID) {
      return Module._Globe_DynamicLayer_GetGroupFeatureCount(this.handle, groupID);
    },

    /**
     * 获取自定义聚合组的成员
     * @param {Number} groupID -自定义聚合组的ID
     *@param {Number} index -动态对象的索引
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {PIEDynamicFeature} 返回自定义聚合组的成员
     *
     */
    getGroupFeature: function getGroupFeature(groupID, index) {
      var handle = Module._Globe_DynamicLayer_GetGroupFeature(this.handle, groupID, index);

      if (handle) {
        return new PIEDynamicFeature(handle);
      }
    },

    /**
     * 启用自定义聚合组
     * @param {Number} groupID -自定义聚合组的ID
     * @memberOf GlobeDynamicLayer#
     */
    enableGroup: function enableGroup(groupID) {
      Module._Globe_DynamicLayer_EnableGroup(this.handle, groupID);
    },

    /**
     * 禁用自定义聚合组
     * @param {Number} groupID -自定义聚合组的ID
     * @memberOf GlobeDynamicLayer#
     */
    disableGroup: function disableGroup(groupID) {
      Module._Globe_DynamicLayer_DisableGroup(this.handle, groupID);
    },

    /**
     * 判断自定义聚合组是否已经启用
     * @param {Number} groupID -自定义聚合组的ID
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {Boolean} 返回自定义聚合组是否已经启用
     *
     */
    isGroupEnabled: function isGroupEnabled(groupID) {
      return Module._Globe_DynamicLayer_IsGroupEnabled(this.handle, groupID);
    },

    /**
     * 根据聚合类别向聚合目标字典添加对象ID
     * @param {Number} plotCode -标绘的ID
     * @param {Number} iD -对象ID
     * @memberOf GlobeDynamicLayer#
     */
    addTagFeature: function addTagFeature(plotCode, iD) {
      return Module._Globe_DynamicLayer_AddTagFeature(this.handle, plotCode, iD);
    },

    /**
     * 设置是否可选择
     * @param {Boolean} bSelectable -是否可选择
     * @memberOf GlobeDynamicLayer#
     */
    setSelectable: function setSelectable(bSelectable) {
      return Module._Globe_DynamicLayer_SetSelectable(this.handle, bSelectable);
    },

    /**
     * 判断是否可选择
     * @memberOf GlobeDynamicLayer#
     * @returns {Boolean} 返回是否可选择
     */
    isSelectable: function isSelectable() {
      return Boolean(Module._Globe_DynamicLayer_IsSelectable(this.handle));
    },

    /**
     * 获取图层选择集
     *
     * @memberOf GlobeDynamicLayer#
     * @returns {PIESelection} 成功返回selection对象，失败返回null
     */
    getSelection: function getSelection() {
      var handle = Module._Globe_DynamicLayer_GetSelection(this.handle);

      return new PIESelection(handle);
    }
  });

  function PIEGlobeLayerFactory() {}

  Object.assign(PIEGlobeLayerFactory.prototype, {});

  PIEGlobeLayerFactory.CreateInstance = function (hGlobeLayer) {
    var globeType = Module._GlobeLayer_GetType(hGlobeLayer);

    if (globeType == PIEGlobeLayerType.Feature) {
      return new PIEGlobeFeatureLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.FeatureMap) {
      return new PIEGlobeFeatureMapLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Raster) {
      return new PIEGlobeRasterLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.TileRaster) {
      return new PIEGlobeTileRasterLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Elevation) {
      return new PIEGlobeElevationLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Graphics) {
      return new PIEGlobeGraphicsLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Renderable) {
      return new PIEGlobeRenderableLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Group) {
      return new PIEGlobeGroupLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.OSGBModel) {
      return new PIEGlobeOSGBModelLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.TileGEData) {
      return new PIEGlobeTileGEDataLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Plot) {
      return new PIEGlobePlotLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.SeaMap) {
      return new PIEGlobeSeamapLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.MapBoxData) {
      return new PIEGlobeTileMapLayer(hGlobeLayer);
    }

    if (globeType == PIEGlobeLayerType.Dynamic) {
      return new PIEGlobeDynamicLayer(hGlobeLayer);
    }

    return null;
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *三维地表模型操作相关函数
   * @name GlobeModel
   */

  function PIEGlobeModel(handle) {
    this.handle = handle;
  }

  Object.assign(PIEGlobeModel.prototype, {
    /**
     * 添加图层
     * @param {PIEGlobeElevationLayer} globeLayer -高程图层对象
     * @param {Boolean} addToHead -是否添加到图层顶部
     * @memberOf GlobeModel#
     * @returns {Boolean} 返回是否成功添加图层
     */
    addLayer: function addLayer(globeLayer, addToHead) {
      if (globeLayer instanceof PIE.GlobeElevationLayer) {
        var result = Module._GlobeModel_AddLayer(this.handle, globeLayer.getHandle(), addToHead);

        if (result) {
          globeLayer.autoRelease = false;
        }

        return Boolean(result);
      }

      throw new Error('PIE.GlobeModel.addLayer: input globeLayer is error');
    },

    /**
     * 获取高程图层数量
     * @memberOf GlobeModel#
     * @returns {Number} 返回图层数量
     */
    getLayerCount: function getLayerCount() {
      return Module._GlobeModel_GetLayerCount(this.handle);
    },

    /**
     *获取高程图层索引
     * @param {PIEGlobeElevationLayer} globeLayer -高程图层对象
     * @memberOf GlobeModel#
     * @returns {Number}返回图层索引
     */
    getLayerIndex: function getLayerIndex(globeLayer) {
      return Module._GlobeModel_GetLayerIndex(this.handle, globeLayer.getHandle());
    },

    /**
     * 根据名称获取高程图层对象
     * @param {String} layerName -高程图层名称
     * @memberOf GlobeModel#
     * @returns {PIEGlobeElevationLayer}返回图层对象
     */
    getLayer: function getLayer(layerName) {
      var strName = new PIEString$1(layerName);

      var hGlobeLayer = Module._GlobeModel_GetLayer(this.handle, strName.getHandle());

      strName.dispose();
      return PIEGlobeLayerFactory.CreateInstance(hGlobeLayer);
    },

    /**
     * 根据索引获取高程图层对象
     * @param {Number} index -高程图层索引
     * @memberOf GlobeModel#
     * @returns {PIEGlobeElevationLayer}返回图层对象
     */
    getLayerAt: function getLayerAt(index) {
      var hGlobeLayer = Module._GlobeModel_GetLayerAt(this.handle, index);

      return PIEGlobeLayerFactory.CreateInstance(hGlobeLayer);
    },

    /**
     * 移除高程图层
     * @param {PIEGlobeElevationLayer} globeLayer -高程图层对象
     * @memberOf GlobeModel#
     * @returns {Boolean}成功返回true，失败返回false
     */
    removeLayer: function removeLayer(globeLayer) {
      var result = Module._GlobeModel_RemoveLayer(this.handle, globeLayer.getHandle());

      if (result) {
        globeLayer.handle = null;
      }

      return Boolean(result);
    },

    /**
     * 根据索引移除高程图层
     * @param {Number} index -高程图层索引
     * @memberOf GlobeModel#
     * @returns {Boolean}成功返回true，失败返回false
     */
    removeLayerAt: function removeLayerAt(index) {
      var result = Module._GlobeModel_RemoveLayerAt(this.handle, index);

      if (result) {
        globeLayer.handle = null;
      }

      return Boolean(result);
    },

    /**
     * 移除全部高程图层
     * @memberOf GlobeModel#
     */
    removeAllLayers: function removeAllLayers() {
      Module._GlobeModel_RemoveAllLayers(this.handle);
    },

    /**
     * 将指定高程图层上移
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeModel#
     * @returns {Boolean} true 移动成功， false 移动失败
     */
    moveLayerUp: function moveLayerUp(index) {
      return Module._GlobeModel_MoveLayerUp(this.handle, index);
    },

    /**
     * 将指定高程图层下移
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeModel#
     * @returns {Boolean} true 移动成功， false 移动失败
     */
    moveLayerDown: function moveLayerDown(index) {
      return Module._GlobeModel_MoveLayerDown(this.handle, index);
    },

    /**
     * 将指定高程图层移到最顶端
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeModel#
     * @returns {Boolean} true 移动成功， false 移动失败
     */
    moveLayerTop: function moveLayerTop(index) {
      return Module._GlobeModel_MoveLayerTop(this.handle, index);
    },

    /**
     * 将指定高程图层移到最底端
     * @param {Number} index -指定图层索引
     *
     * @memberOf GlobeModel#
     * @returns {Boolean} true 移动成功， false 移动失败
     */
    moveLayerBottom: function moveLayerBottom(index) {
      return Module._GlobeModel_MoveLayerBottom(this.handle, index);
    },

    /**
     * 将指定高程图层移动到指定位置
     * @param {Number} indexSrc -源图层索引
     * @param {Number} indexDest -目标位置索引
     *
     * @memberOf GlobeModel#
     * @returns {Boolean} true 移动成功， false 移动失败
     */
    moveLayerTo: function moveLayerTo(indexSrc, indexDest) {
      return Module._GlobeModel_MoveLayerTo(this.handle, indexSrc, indexDest);
    },

    /**
     * 设置地形的夸张系数（不需要刷新地形）
     * @param {Number} terrainScale -地形的夸张系数 [0,3]
     *
     * @memberOf GlobeModel#
     */
    setTerrainScale: function setTerrainScale(terrainScale) {
      Module._GlobeModel_SetTerrainScale(this.handle, terrainScale);
    },

    /**
     * 获取地形的夸张系数
     *
     * @memberOf GlobeModel#
     * @returns {Number} 返回地形的夸张系数
     */
    getTerrainScale: function getTerrainScale() {
      return Module._GlobeModel_GetTerrainScale(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 三维经纬网操作函数
   * @name GlobeGridLine
   *
   */
  function PIEGlobeGridLine(handle) {
    this.handle = handle;
  }

  Object.assign(PIEGlobeGridLine.prototype, {
    /**
     * 设置格网层是否可见
     * @param {Boolean} visible -是否可见
     * @memberOf GlobeGridLine#
     */
    setVisible: function setVisible(visible) {
      Module._GlobeGridLine_SetVisible(this.handle, visible);
    },

    /**
     * 获取格网层是否可见
     *
     * @memberOf GlobeGridLine#
     * @returns {Boolean} 可见返回true,不可见返回false
     */
    isVisible: function isVisible() {
      return Boolean(Module._GlobeGridLine_IsVisible(this.handle));
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   *
   * 海洋特效控制函数
   * @name GlobeOcean
   *
   */
  function PIEGlobeOcean(handle) {
    this.handle = handle;
  }

  Object.assign(PIEGlobeOcean.prototype, {
    /**
     * 设置海洋特效的可见性
     * @param {Boolean} visible -海洋特效是否可见
     * @memberOf GlobeOcean#
     *
     */
    setVisible: function setVisible(visible) {
      Module._Ocean_SetVisible(this.handle, visible);
    },

    /**
     * 获取海洋特效是否可见
     *
     * @memberOf GlobeOcean#
     * @returns {Boolean} 可见返回true,不可见返回false
     */
    isVisible: function isVisible() {
      return Module._Ocean_GetVisible(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 场景集合
   * @name Globes
   */

  function PIEGlobes(handle) {
    this.handle = handle;
  }

  Object.assign(PIEGlobes.prototype, {
    /**
      * 添加工作空间中指定名称的场景路径
      * @param {String} name -指定的场景名称
      * @param {String} path - 场景路径
     *
     * @memberOf Globes#
      * @returns {Boolean} 如果添加成功返回true，否则返回false
      */
    addGlobe: function addGlobe(name, path) {
      var strName = new PIEString$1(name);
      var strPath = new PIEString$1(path);

      var result = Module._Document_AddGlobe(this.handle, strName.getHandle(), strPath.getHandle());

      strName.dispose();
      strPath.dispose();
      return result;
    },

    /**
     * 获取工作空间中场景的数量
     *
     * @memberOf Globes#
     * @returns {Number} 返回场景的数量
     */
    getGlobeCount: function getGlobeCount() {
      var count = Module._Document_GetGlobeCount(this.handle);

      return count;
    },

    /**
     * 添加工作空间中指定索引的场景路径
     * @param {Number} index -指定的场景索引值
     * @memberOf Globes#
     * @returns {String} 返回的场景名称
     */
    getGlobeNameAt: function getGlobeNameAt(index) {
      var strName = new PIEString$1(256);

      Module._Document_GetGlobeNameAt(this.handle, index, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 获取工作空间中指定名称的场景索引值
     * @param {String} name -场景名称
     * @memberOf Globes#
     * @returns {Number} 如果获取成功返回指定名称的场景索引值，否则返回-1。
     *
     */
    getGlobeNameIndex: function getGlobeNameIndex(name) {
      var strName = new PIEString$1(name);

      var index = Module._Document_GetGlobeNameIndex(this.handle, strName.getHandle());

      strName.dispose();
      return index;
    },

    /**
     * 获取工作空间中指定索引的场景路径
     * @param {Number} index -指定的场景索引值
     * @memberOf Globes#
     * @returns {String} 返回的场景路径
     *
     */
    getGlobePathAt: function getGlobePathAt(index) {
      var strPath = new PIEString$1(256);

      Module._Document_GetGlobePathAt(this.handle, index, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },

    /**
     * 获取工作空间中指定名称的场景路径
     * @param {String} name -指定的场景名称
     * @memberOf Globes#
     * @returns {String} 返回指定名称的场景路径
     *
     */
    getGlobePath: function getGlobePath(name) {
      var strPath = new PIEString$1(256);

      Module._Document_GetGlobePath(this.handle, name, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },

    /**
     * 场景另存时在工作空间中设置新的场景节点
     * @param {String} name -指定的场景名称
     * @param {String} path -指定的场景路径
     * @memberOf Globes#
     *
     * @returns {Boolean} 设置成功返回true，设置失败返回false
     *
     */
    setGlobePath: function setGlobePath(name, path) {
      var strPath = new PIEString$1(path);

      var result = Module._Document_SetGlobePath(this.handle, name, strPath.getHandle());

      strPath.dispose();
      return result;
    },

    /**
     * 重命名场景
     * @param {String} oldName -场景原名称
     * @param {String} newName -场景新名称
     * @memberOf Globes#
     *
     * @returns {Boolean} 如果重命名成功返回true，否则返回false,如果原名为空或者新名为空，那么返回false；如果新名和原名相同，返回true；如果新名与已存在的其他名称相同，返回false；
     *
     */
    renameGlobe: function renameGlobe(oldName, newName) {
      var strOldName = new PIEString$1(oldName);
      var strNewName = new PIEString$1(newName);

      var result = Module._Document_RenameGlobe(this.handle, strOldName.getHandle(), strNewName.getHandle());

      strOldName.dispose();
      strNewName.dispose();
      return result;
    },

    /**
     * 移除场景
     * @param {String} name -场景名称
     * @memberOf Globes#
     *
     * @returns {String} 如果移除成功返回true，否则返回false。(如果名称为空或者找不到，那么返回false)
     *
     */
    removeGlobe: function removeGlobe(name) {
      var strName = new PIEString$1(name);

      var result = Module._Document_RemoveGlobe(this.handle, strName.getHandle());

      strName.dispose();
      return result;
    },

    /**
     * 移除指定索引场景
     * @param {Number} index -场景索引值
     * @memberOf Globes#
     *
     * @returns {String} 如果移除成功返回true，否则返回false(nIndex若小于0或者大于等于工作空中地图总数，那么返回false)
     *
     */
    removeGlobeAt: function removeGlobeAt(index) {
      var result = Module._Document_RemoveGlobeAt(this.handle, index);

      return result;
    },

    /**
     * 移除全部场景
     * @memberOf Globes#
     *
     */
    removeAllGlobe: function removeAllGlobe() {
      Module._Document_RemoveAllGlobe(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   *  符号基类操作函数
   * @name Symbol
   */

  function PIESymbol(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESymbol.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放符号对象
     * @memberOf Symbol#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._Symbol_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 获取符号的类型
     *
     * @memberOf Symbol#
     * @returns {PIESymbolType} 成功返回类型
     */
    getType: function getType() {
      return Module._Symbol_GetType(this.handle);
    },

    /**
     * 设置符号的ID
     * @param {Number} id -符号ID
     *
     * @memberOf Symbol#
     */
    setID: function setID(id) {
      Module._Symbol_SetID(this.handle, id);
    },

    /**
     * 获取符号的名称
     *
     * @memberOf Symbol#
     * @returns {String} 返回符号名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Symbol_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置符号的名称
     * @param {String} name -符号名称
     * @memberOf Symbol#
     *
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._Symbol_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取符号的类别
     * @memberOf Symbol#
     * @returns {String} 返回符号类别
     */
    getCategory: function getCategory() {
      var strCategory = new PIEString$1(256);

      Module._Symbol_GetCategory(this.handle, strCategory.getHandle());

      var category = strCategory.toString();
      strCategory.dispose();
      return category;
    },

    /**
     * 设置符号的类别
     * @param {String} category 符号类别
     * @memberOf Symbol#
     */
    setCategory: function setCategory(category) {
      var strCategory = new PIEString$1(category);

      Module._Symbol_SetCategory(this.handle, strCategory.getHandle());

      strCategory.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 符号组操作函数
   * @name SymbolGroup
   */

  function PIESymbolGroup(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESymbolGroup.prototype, {
    /**
     * 获取符号数量
     *
     * @memberOf SymbolGroup#
     * @returns {Number} 如果获取成功，返回符号数量
     *
     */
    getCount: function getCount() {
      return Module._SymbolGroup_GetCount(this.handle);
    },

    /**
     * 添加符号对象
     * @param {PIESymbol} symbol -符号对象
     *
     * @memberOf SymbolGroup#
     * @returns {Boolean} 如果添加成功，返回true，否则返回false
     *
     */
    add: function add(symbol) {
      return Boolean(Module._SymbolGroup_Add(this.handle, symbol.getHandle()));
    },

    /**
     * 通过ID获取符号对象
     * @param {Number} id -符号ID
     *
     * @memberOf SymbolGroup#
     * @returns {PIESymbol} 如果获取成功，返回符号对象，否则返回空
     *
     */
    getByID: function getByID(id) {
      var hSymbol = Module._SymbolGroup_GetByID(this.handle, id);

      if (hSymbol) {
        return new PIESymbol(hSymbol);
      }

      return null;
    },

    /**
     * 根据符号组的索引号获取符号对象
     * @param {Number} index -索引号
     *
     * @memberOf SymbolGroup#
     * @returns {PIESymbol} 如果获取成功，返回符号对象，否则返回空
     *
     */
    getAt: function getAt(index) {
      var hSymbol = Module._SymbolGroup_GetAt(this.handle, index);

      if (hSymbol) {
        return new PIESymbol(hSymbol);
      }

      return null;
    },

    /**
     * 通过ID移除符号对象
     * @param {Number} id -符号ID
     *
     * @memberOf SymbolGroup#
     */
    removeByID: function removeByID(id) {
      Module._SymbolGroup_RemoveByID(this.handle, id);
    },

    /**
     * 根据符号组的索引号移除符号对象
     * @param {Number} index -索引号
     *
     * @memberOf SymbolGroup#
     */
    removeAt: function removeAt(index) {
      Module._SymbolGroup_RemoveAt(this.handle, index);
    },

    /**
     * 移除所有的符号对象
     * @memberOf SymbolGroup#
     */
    removeAll: function removeAll() {
      Module._SymbolGroup_RemoveAll(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 符号库操作函数（id:1~100,内部资源ID请勿使用）
   * @name SymbolLib
   */

  function PIESymbolLib(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESymbolLib.prototype, {
    // /**
    //  * 打开符号库
    //  * @param {String} path -符号库路径
    //  *
    //  * @memberOf SymbolLib#
    //  * @returns {Boolean} 打开成功返回true，失败返回false
    //  */
    open: function open(path) {
      var strPath = new PIEString$1(path);

      var res = Module._SymbolLib_Open(this.handle, strPath.getHandle());

      strPath.dispose();
      return res;
    },
    // /**
    //  * 关闭符号库
    //  *
    //  * @memberOf SymbolLib#
    //  * @returns {Boolean} 关闭成功返回true，失败返回false
    //  */
    close: function close() {
      return Module._SymbolLib_Close(this.handle);
    },

    /**
     * 获取符号组对象
     * @param {PIESymbolGroupType} groupType -符号组类型
     *
     * @memberOf SymbolLib#
     * @returns {PIESymbolGroup} 如果获取成功，返回符号组,获取失败返回NULL
     */
    getGroup: function getGroup(groupType) {
      var hSymbolGroup = Module._SymbolLib_GetGroup(this.handle, groupType);

      if (hSymbolGroup) {
        return new PIESymbolGroup(hSymbolGroup);
      }

      return null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建工作空间
   * @name Document
   * @class Document
   * 工作空间操作函数
   *
   * @example
   * let document = new PIE.Document()
   */

  function PIEDocument(handle, autoRelease) {
    if (!handle) {
      this.handle = Module._Document_Create();
      this.autoRelease = true;
    } else {
      this.handle = handle;
      this.autoRelease = false;
    }
  }

  Object.assign(PIEDocument.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     *删除工作空间
     *
     *@memberOf Document#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._Document_Close(this.handle);

        Module._Document_Delete(this.handle);

        this.handle = null;
      }
    },
    // /**
    //  * 打开工作空间
    //  *
    //  *@memberOf Document#
    //  * @param {String} path -工作空间路径
    //  * @returns {Boolean} 如果打开成功返回true，否则返回false
    //  */
    // open: function (path) {
    //     var strPath = new PIEString(path);
    //     var res = Module._Document_Open(this.handle, strPath.getHandle());
    //     strPath.dispose();
    //     return res;
    // },
    //
    // // /**
    // //  * 关闭工作空间
    // //  *@memberOf Document#
    // //  *
    // //  * @example
    // //  * let document = new PIE.Document()
    // //  * document.close()
    // //  */
    // close: function () {
    //     Module._Document_Close(this.handle);
    // },
    // /**
    //  * 保存工作空间
    //  * @returns {Boolean}如果保存成功返回true，否则返回false
    //  * @memberOf Document#
    //  */
    // save: function () {
    //     return Module._Document_Save(this.handle);
    // },
    // /**
    //  * 工作空间另存为
    //  * @param {String} path - 工作空间另存的路径
    //  * @memberOf Document#
    //  * @returns {Boolean} 如果另存为成功返回true，否则返回false
    //  */
    // saveAs: function (path) {
    //     var strPath = new PIEString(path);
    //     var res = Module._Document_SaveAs(this.handle, strPath.getHandle());
    //     strPath.dispose();
    //     return res;
    // },
    // /**
    //  * 设置工作空间的路径
    //  * @param {String} path -工作空间路径
    //  * @memberOf Document#
    //  */
    // setPath: function (path) {
    //     var strPath = new PIEString(path);
    //     Module._Document_SetPath(this.handle, strPath.getHandle());
    //     strPath.dispose();
    // },
    // /**
    //  * 获取工作空间的路径
    //  * @returns {String} 返回的工作空间路径
    //  * @memberOf Document#
    //  */
    // getPath: function () {
    //     var strPath = new PIEString(256);
    //     Module._Document_GetPath(this.handle, strPath.getHandle());
    //     var path = strPath.toString();
    //     strPath.dispose();
    //     return path;
    // },
    // /**
    //  * 获取工作空间的名称
    //  * @memberOf Document#
    //  * @returns {String} 返回的工作空间名称
    //  *
    //  */
    // getName: function () {
    //     var strName = new PIEString(256);
    //     Module._Document_GetName(this.handle, strName.getHandle());
    //     var name = strName.toString();
    //     strName.dispose();
    //     return name;
    // },

    /**
     * 获取符号库
     *
     * @memberOf Document#
     * @returns {PIESymbolLib} 返回符号库对象
     *
     */
    getSymbolLib: function getSymbolLib() {
      var hSymbolLib = Module._Document_GetSymbolLib(this.handle);

      return new PIESymbolLib(hSymbolLib);
    },

    /**
     * 获取数据源管理器
     *
     * @memberOf Document#
     * @returns {PIEDataSources} 返回数据源管理器
     */
    getDataSourceManager: function getDataSourceManager() {
      return new PIEDataSources(this.handle);
    },

    /**
     * 获取场景管理器
     *
     * @memberOf Document#
     * @returns {PIEGlobes} 返回场景管理器
     *
     */
    getGlobeManager: function getGlobeManager() {
      return new PIEGlobes(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 水下特效控制函数
   * @name UnderWater
   *
   * @extends Renderable
   */

  function PIEUnderWater(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIEUnderWater.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 获取UnderWater的可见性
     *
     * @memberOf UnderWater#
     * @returns {Boolean} 返回UnderWater是否可见(true-可见，false-不可见)
     */
    getUnderWaterVisible: function getUnderWaterVisible() {
      return Module._UW_GetUnderWaterVisible(this.handle);
    },

    /**
     * 设置UnderWater的可见性
     * @param {Boolean} visible -海洋水下特效是否可见
     * @memberOf UnderWater#
     */
    setUnderWaterVisible: function setUnderWaterVisible(visible) {
      Module._UW_SetUnderWaterVisible(this.handle, visible);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维球面场景背景板控制函数
   * @name GlobeBackground
   *
   */

  function PIEGlobeBackground(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIEGlobeBackground.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 获取背景板的颜色
     *
     * @memberOf GlobeBackground#
     * @returns {PIEColor} 返回背景板当前颜色
     */
    getColor: function getColor() {
      var arrayColor = new PIEArray(4, PIEArrayType.Float64);

      Module._GlobeBackground_GetColor(this.handle, arrayColor.getHandle());

      arrayColor.updateData();
      var color = arrayColor.toArray();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置背景板的颜色
     * @param {PIEVector4} color -背景板颜色
     * @memberOf GlobeBackground#
     */
    setColor: function setColor(color) {
      var arrayColor = new PIEArray(color, PIEArrayType.Float64);

      Module._GlobeBackground_SetColor(this.handle, arrayColor.getHandle());

      arrayColor.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 太阳特效控制函数
   * @name SunLight
   *
   * @extends Renderable
   */

  function PIESunLight(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIESunLight.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 获取太阳光照的可见性
     *
     * @memberOf SunLight#
     * @returns {Boolean} 太阳光照是否可见
     */
    getVisible: function getVisible() {
      return Module._SunLight_GetVisible(this.handle);
    },

    /**
     * 设置太阳光照的可见性
     * @param {Boolean} visible -太阳光照是否可见
     * @memberOf SunLight#
     */
    setVisible: function setVisible(visible) {
      Module._SunLight_SetVisible(this.handle, visible);
    },

    /**
     * 获取太阳照射的时间
     *
     * @memberOf SunLight#
     * @returns {Date} 成功返回日期，失败返回空日期
     */
    getTime: function getTime() {
      var arrayDateTime = new PIEArray(6, PIEArrayType.Int32);

      Module._SunLight_GetTime(this.handle, arrayDateTime.getHandle());

      arrayDateTime.updateData();
      var times = arrayDateTime.toArray();
      arrayDateTime.dispose();
      var dateTime = new Date(times[0], times[1], times[2], times[3], times[4], times[5]);
      return dateTime;
    },

    /**
     * 设置太阳照射的时间
     * @param {Date} dateTime -日期
     * @memberOf SunLight#
     */
    setTime: function setTime(dateTime) {
      var times = [dateTime.getFullYear(), dateTime.getMonth(), dateTime.getDate(), dateTime.getHours(), dateTime.getMinutes(), dateTime.getSeconds()];
      var arrayDateTime = new PIEArray(times, PIEArrayType.UInt32);

      Module._SunLight_SetTime(this.handle, arrayDateTime.getHandle());

      arrayDateTime.dispose();
    },

    /**
     * 获取太阳照射的时区
     *
     * @memberOf SunLight#
     * @returns {Number} 太阳照射的时区
     */
    getTimeZone: function getTimeZone() {
      return Module._SunLight_GetTimeZone(this.handle);
    },

    /**
     * 设置太阳照射的时区
     * @param {Number} timeZone -照射时区
     *
     * @memberOf SunLight#
     * @returns {Boolean} 返回是否设置成功
     */
    setTimeZone: function setTimeZone(timeZone) {
      return Module._SunLight_SetTimeZone(this.handle, timeZone);
    },

    /**
     * 设置太阳照射的位置
     * @param {PIEVector3/Array} worldPos -太阳光照位置
     *
     * @memberOf SunLight#
     */
    setPosition: function setPosition(worldPos) {
      var posArray = null;

      if (worldPos instanceof PIEVector3) {
        posArray = worldPos.toArray();
      } else if (worldPos instanceof Array) {
        posArray = worldPos;
      }

      if (posArray != null) {
        var arrayPosition = new PIEArray(posArray, PIEArrayType.Float64);

        Module._SunLight_SetPosition(this.handle, arrayPosition.getHandle());

        arrayPosition.dispose();
      }
    },

    /**
     * 获取太阳照射的位置
     * @returns {PIEVector3} 返回太阳光照位置
     * @memberOf SunLight#
     */
    getPosition: function getPosition() {
      var arrayPosition = new PIEArray(3, PIEArrayType.Float64);

      Module._SunLight_GetPosition(this.handle, arrayPosition.getHandle());

      arrayPosition.updateData();
      var postion = arrayPosition.toArray();
      arrayPosition.dispose();
      return new PIEVector3(postion[0], postion[1], postion[2]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */
  /**
   * 大气特效控制函数
   * @name Atmosphere
   *
   */

  function PIEAtomsphere(handle) {
    PIERenderable.call(this, handle, false);
  }

  PIEAtomsphere.prototype = Object.assign(Object.create(PIERenderable.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 天空盒操作函数
   * @name SkyDome
   * @extends Renderable
   *
   */

  function PIESkyDome(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIESkyDome.prototype = Object.assign(Object.create(PIERenderable.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 星空操作函数
   * @name Star
   * @extends Renderable
   *
   */

  function PIEStar(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIEStar.prototype = Object.assign(Object.create(PIERenderable.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维反射对象
   * @name GlobeModel
   */
  function PIEReflectManager(handle) {
    this.handle = handle;
  }

  Object.assign(PIEReflectManager.prototype, {
    /**
     * 添加渲染对象
     *  @memberOf ReflectManager#
     * @param {PIERenderable} renderable -渲染对象
     */
    addRenderable: function addRenderable(renderable) {
      Module._ReflectManager_AddRenderable(this.handle, renderable.getHandle());
    },

    /**
     * 移除渲染对象
     * @memberOf ReflectManager#
     * @param {PIERenderable} renderable -渲染对象
     */
    removeRenderable: function removeRenderable(renderable) {
      return Module._ReflectManager_RemoveRenderable(this.handle, renderable.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维场景操作相关函数
   * @name Globe
   */

  function PIEGlobe(handle) {
    this.handle = handle;
    this._pixelRatio = 1;
  }

  Object.assign(PIEGlobe.prototype, {
    setPixelRatio: function setPixelRatio(pixelRatio) {
      this._pixelRatio = pixelRatio;
    },

    /**
     * 获取维度模式
     *
     * @memberOf Globe#
     * @returns {PIEDimensionMode} 返回维度模式
     *
     */
    getDimensionMode: function getDimensionMode() {
      return Module._Globe_GetDimensionMode(this.handle);
    },
    // /**
    //  * 设置设备DPI
    //  * @param {Number} deviceDPI -设备DPI
    //  * @memberOf Globe#
    //  *
    //  */
    setDeviceDPI: function setDeviceDPI(deviceDPI) {
      Module._Globe_SetDeviceDPI(this.handle, deviceDPI);
    },
    // /**
    //  * 获取设备DPI
    //  * @memberOf Globe#
    //  * @returns {Number} 返回设备DPI
    //  */
    getDeviceDPI: function getDeviceDPI() {
      return Module._Globe_GetDeviceDPI(this.handle);
    },

    /**
     * 设置场景模式
     *  @param {PIESceneMode} mode -场景模式
     *  @memberOf Globe#
     *
     */
    setSceneMode: function setSceneMode(mode) {
      Module._Globe_SetSceneMode(this.handle, mode);
    },

    /**
     * 获取场景模式
     *
     * @memberOf Globe#
     *@returns {PIESceneMode} 返回场景模式
     *
     */
    getSceneMode: function getSceneMode() {
      return Module._Globe_GetSceneMode(this.handle);
    },
    // /**
    //  * 设置线程处理模式
    //  * @param {PIEProcessMode} mode -线程处理模式
    //  * @memberOf Globe#
    //  */
    setProcessMode: function setProcessMode(mode) {
      Module._Globe_SetProcessMode(this.handle, mode);
    },
    // /**
    //  * 获取线程处理模式
    //  *
    //  * @memberOf Globe#
    //  * @returns {PIEProcessMode} 返回线程处理模式
    //  *
    //  */
    getProcessMode: function getProcessMode() {
      return Module._Globe_GetProcessMode(this.handle);
    },

    /**
     * 设置场景的缓存半径大小
     * @param {Number} bufferRadius -缓存半径大小
     * @memberOf Globe#
     */
    setTileBufferRadius: function setTileBufferRadius(bufferRadius) {
      Module._Globe_SetTileBufferRadius(this.handle, bufferRadius);
    },

    /**
     *获取场景的缓存半径大小
     *
     * @memberOf Globe#
     * @returns {Number} 场景的缓存半径大小
     *
     */
    getTileBufferRadius: function getTileBufferRadius() {
      return Module._Globe_GetTileBufferRadius(this.handle);
    },
    // /**
    //  *初始化主线程渲染
    //  *
    //  * @memberOf Globe#
    //  * @returns {Boolean} 成功返回主线程渲染对象是否成功，失败返回false
    //  *
    //  */
    initRenderHandles: function initRenderHandles() {
      return Boolean(Module._Globe_InitRenderHandles(this.handle));
    },
    // /**
    //  * 打开指定名称的地图
    //  * @param {String} name -地图名称
    //  *
    //  * @memberOf Globe#
    //  * @returns {Boolean} 返回是否成功打开指定名称的地图
    //  *
    //  */
    // open: function (name) {
    //     var strName = new PIEString(name);
    //     var res = Module._Globe_Open(this.handle, strName.getHandle());
    //     strName.dispose();
    //     return Boolean(res);
    // },
    // /**
    //  * 地图是否已经打开成功
    //  *
    //  * @memberOf Globe#
    //  * @returns {Boolean} 返回地图是否已经打开
    //  *
    //  */
    // isOpened: function () {
    //     return Boolean(Module._Globe_IsOpened(this.handle));
    // },

    /**
     *关闭窗口中的地图
     * @memberOf Globe#
     */
    close: function close() {
      Module._Globe_Close(this.handle);
    },
    // /**
    //  *保存窗口中的地图
    //  * @memberOf Globe#
    //  * @returns {Boolean} 返回是否成功保存窗口中的地图
    //  */
    // save: function () {
    //     return Boolean(Module._Globe_Save(this.handle));
    // },
    // /**
    //  *另存窗口中的地图
    //  * @param {String} path -地图另存的路径
    //  *
    //  * @memberOf Globe#
    //  * @returns {Boolean} 返回是否成功另存窗口中的地图
    //  *
    //  */
    // saveAs: function (path) {
    //     var strPath = new PIEString(path);
    //     var res = Module._Globe_SaveAs(this.handle, strPath.getHandle());
    //     strPath.dispose();
    //     return Boolean(res);
    // },
    // /**
    //  * 从xml中反序列化地图
    //  * @param {String} xML -地图xml
    //  *
    //  * @memberOf Globe#
    //  * @returns {Boolean} 返回是否成功反序列化
    //  */
    fromXML: function fromXML(xML) {
      var strXML = new PIEString$1(xML);

      var res = Module._Globe_FromXML(this.handle, strXML.getHandle());

      strXML.dispose();
      return Boolean(res);
    },
    // /**
    //  * 把地图序列化成xml
    //  *
    //  * @memberOf Globe#
    //  * @returns {String} 返回地图xml
    //  */
    toXML: function toXML() {
      var strXml = new PIEString$1(1024);

      Module._Globe_ToXML(this.handle, strXml.getHandle());

      var xml = strXml.toString();
      strXml.dispose();
      return xml;
    },

    /**
     *绑定工作空间
     * @param {PIEDocument} document -工作空间
     * @memberOf Globe#
     */
    attachDocument: function attachDocument(document) {
      Module._Globe_AttachDocument(this.handle, document.getHandle());
    },

    /**
     *获取工作空间
     *
     * @memberOf Globe#
     * @returns {PIEDocument} 工作空间(返回null时说明三维球没有绑定工作空间)
     *
     */
    getDocument: function getDocument() {
      var handle = Module._Globe_GetDocument(this.handle);

      if (handle) {
        return new PIEDocument(handle);
      } else {
        return null;
      }
    },
    // /**
    //  *在场景中获取海洋
    //  *
    //  * @memberOf Globe#
    //  * @returns {PIEGlobeOcean} 成功返回海洋,失败返回NULL
    //  *
    //  */
    getOcean: function getOcean() {
      var hOcean = Module._Globe_GetOcean(this.handle);

      if (hOcean) {
        return new PIEGlobeOcean(hOcean);
      }

      return null;
    },

    /**
     * 在地图中获取背景板对象
     * @memberOf Globe#
     * @returns {PIEGlobeBackground} 成功返回背景板对象,失败返回NULL
     */
    globeBackground: function globeBackground() {
      var handle = Module._Globe_GlobeBackground(this.handle);

      if (handle) {
        return new PIEGlobeBackground(handle);
      }

      return null;
    },
    // /**
    //  * 获取水下仿真对象
    //  * @memberOf Globe#
    //  * @returns {PIEUnderWater} 成功返回水下仿真对象,失败返回NULL
    //  */
    getUnderWater: function getUnderWater() {
      var handle = Module._Globe_GetUnderWater(this.handle);

      if (handle) {
        return new PIEUnderWater(handle);
      }

      return null;
    },

    /**
     * 获取当前地图跟踪图层
     * @memberOf Globe#
     * @returns {PIEGlobeGroupLayer} 返回当前地图跟踪图层
     */
    getTrackingLayers: function getTrackingLayers() {
      var handle = Module._Globe_GetTrackingLayers(this.handle);

      if (handle) {
        return new PIEGlobeGroupLayer(handle);
      }
    },
    // /**
    //  * 获取RenderableLayer
    //  * @memberOf Globe#
    //  * @returns {PIEGlobeRenderableLayer} 返回RenderableLayer
    //  */
    // getRenderableLayer: function () {
    //     var handle = Module._Globe_GetRenderableLayer(this.handle);
    //     if (handle) {
    //         return new PIEGlobeRenderableLayer(handle);
    //     }
    // },

    /**
     *在场景中获取经纬网
     *
     * @memberOf Globe#
     * @returns {PIEGlobeGridLine} 成功返回经纬网对象,失败返回NULL
     *
     */
    getGridLine: function getGridLine() {
      var hGridLine = Module._Globe_GetGridLine(this.handle);

      if (hGridLine) {
        return new PIEGlobeGridLine(hGridLine);
      }

      return null;
    },

    /**
     *在场景中获取相机
     *
     * @memberOf Globe#
     * @returns {PIEWorldCamera} 返回相机对象
     *
     */
    getWorldCamera: function getWorldCamera() {
      var hCamera = Module._Globe_GetWorldCamera(this.handle);

      if (hCamera) {
        return new PIEWorldCamera(hCamera);
      }

      return null;
    },

    /**
     *启动渲染线程
     * @memberOf Globe#
     */
    startRender: function startRender() {
      Module._Globe_StartRender(this.handle);
    },

    /**
     *停止渲染线程
     * @memberOf Globe#
     */
    stopRender: function stopRender() {
      Module._Globe_StopRender(this.handle);
    },

    /**
     *设置是否可见全球背景图片
     * @param {Boolean} visible -是否可见
     * @memberOf Globe#
     */
    setVisibleGlobeImage: function setVisibleGlobeImage(visible) {
      Module._Globe_SetVisibleGlobeImage(this.handle, visible);
    },

    /**
     * 判断是否可见全球背景图片
     *
     * @memberOf Globe#
     *@returns {Boolean} 返回是否可见全球背景图片
     *
     */
    isVisibleGlobeImage: function isVisibleGlobeImage() {
      return Boolean(Module._Globe_IsVisibleGlobeImage(this.handle));
    },

    /**
     * 设置地图窗口是否显示环境仿真元素
     *@param {Boolean} enable -是否显示环境仿真元素
     * @memberOf Globe#
     */
    setEnableEnvironment: function setEnableEnvironment(enable) {
      Module._Globe_SetEnableEnvironment(this.handle, enable);
    },

    /**
     * 获取地图窗口是否显示环境仿真元素
     *
     * @memberOf Globe#
     *@returns {Boolean} 返回是否显示环境仿真元素
     *
     */
    isEnableEnvironment: function isEnableEnvironment() {
      return Boolean(Module._Globe_IsEnableEnvironment(this.handle));
    },

    /**
     * 设置地图窗口是否显示地图场景
     *@param {Boolean} enable -是否显示地图场景
     * @memberOf Globe#
     */
    setEnableGlobe: function setEnableGlobe(enable) {
      Module._Globe_SetEnableGlobe(this.handle, enable);
    },

    /**
     * 获取地图窗口是否显示地图场景
     *
     * @memberOf Globe#
     *@returns {Boolean} 返回是否显示地图场景
     *
     */
    isEnableGlobe: function isEnableGlobe() {
      return Boolean(Module._Globe_IsEnableGlobe(this.handle));
    },
    // /**
    //  * 设置地图是否启用FrameBuffer
    //  *@param {Boolean} enable -是否启用FrameBuffer
    //  * @memberOf Globe#
    //  */
    setEnableFrameBuffer: function setEnableFrameBuffer(enable) {
      Module._Globe_SetEnableFrameBuffer(this.handle, enable);
    },
    // /**
    //  * 获取地图是否启用FrameBuffer
    //  *
    //  * @memberOf Globe#
    //  *@returns {Boolean} 返回是否启用FrameBuffer
    //  *
    //  */
    isEnableFrameBuffer: function isEnableFrameBuffer() {
      return Boolean(Module._Globe_IsEnableFrameBuffer(this.handle));
    },
    // /**
    //  * 设置当前地图是第几次渲染
    //  * @param {Number} howRenderTimes -第几次渲染
    //  * @memberOf Globe#
    //  */
    setHowRenderTimes: function setHowRenderTimes(howRenderTimes) {
      Module._Globe_SetHowRenderTimes(this.handle, howRenderTimes);
    },
    // /**
    //  * 获取当前地图是第几次渲染
    //  *
    //  * @memberOf Globe#
    //  * @returns {Number} 返回是第几次渲染
    //  */
    getHowRenderTimes: function getHowRenderTimes() {
      return Module._Globe_GetHowRenderTimes(this.handle);
    },

    /**
     * 设置场景窗口是否填充背景颜色
     *@param  {Boolean} enable -是否填充背景颜色
     * @memberOf Globe#
     */
    setEnableBkgColor: function setEnableBkgColor(enable) {
      Module._Globe_SetEnableBkgColor(this.handle, enable);
    },

    /**
     * 判断场景窗口是否填充背景颜色
     *
     * @memberOf Globe#
     *@returns {Boolean} 返回是否填充背景颜色
     *
     */
    isEnableBkgColor: function isEnableBkgColor() {
      return Boolean(Module._Globe_IsEnableBkgColor(this.handle));
    },

    /**
     * 设置地图窗口是否填充背景深度
     *@param {Boolean} write -是否填充背景深度
     * @memberOf Globe#
     */
    setBkgDepthWrite: function setBkgDepthWrite(write) {
      Module._Globe_SetBkgDepthWrite(this.handle, write);
    },

    /**
     * 设置地图窗口背景颜色
     * @param {PIEColor/Array} color -地图窗口颜色
     * @memberOf Globe#
     */
    setBkgColor: function setBkgColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
      } else if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      }

      Module._Globe_SetBkgColor(this.handle, colorArray.getHandle());

      colorArray.dispose();
    },

    /**
     * 获取地图窗口背景颜色
     *
     * @memberOf Globe#
     * @returns {PIEColor} 返回地图窗口颜色
     */
    getBkgColor: function getBkgColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._Globe_GetBkgColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var array = colorArray.toArray();
      var Color = new PIEColor(array[0], array[1], array[2], array[3]);
      colorArray.dispose();
      return Color;
    },

    /**
     * 重置渲染器参数
     * @memberOf Globe#
     */
    resetRenderer: function resetRenderer() {
      Module._Globe_ResetRenderer(this.handle);
    },

    /**
     * 获取三维地球模型
     *
     * @memberOf Globe#
     *@returns {PIEGlobeModel} 三维地球模型
     *
     */
    getGlobeModel: function getGlobeModel() {
      var hGlobeModel = Module._Globe_GetGlobeModel(this.handle);

      return new PIEGlobeModel(hGlobeModel);
    },

    /**
     * 设置自动投影转换
     * @param {Boolean} autoProjection -是否自动转换地图投影
     * @memberOf Globe#
     *
     */
    setAutoProjection: function setAutoProjection(autoProjection) {
      Module._Globe_SetAutoProjection(this.handle, autoProjection);
    },

    /**
     * 判断是否自动转换投影坐标
     *
     * @memberOf Globe#
     *@returns {Boolean} 返回是否是自动转换投影坐标
     *
     */
    isAutoProjection: function isAutoProjection() {
      return Boolean(Module._Globe_IsAutoProjection(this.handle));
    },

    /**
     * 设置场景瓦片是否为按级别固定缩放
     *@param {Boolean} fixedScale -是否为按级别固定缩放
     * @memberOf Globe#
     */
    setFixdScale: function setFixdScale(fixedScale) {
      Module._Globe_SetFixdScale(this.handle, fixedScale);
    },

    /**
     * 判断场景瓦片是否为按级别固定缩放
     *
     * @memberOf Globe#
     *@returns {Boolean} 返回是否为按级别固定缩放
     *
     */
    isFixdScale: function isFixdScale() {
      return Boolean(Module._Globe_IsFixdScale(this.handle));
    },

    /**
     * 获取场景所有缩放级别的比例尺数组
     *
     * @memberOf Globe#
     * @returns {Array} 返回场景所有缩放级别比例尺数组
     *
     */
    getScaleLevels: function getScaleLevels() {
      var scales = new PIEArray(32, PIEArrayType.Float64);

      var count = Module._Globe_GetScaleLevels(this.handle, scales.getHandle(), 32);

      scales.updateData();
      var scaleArray = scales.toArray();

      if (count < scaleArray.length) {
        scaleArray = scaleArray.slice(0, count);
      }

      scales.dispose();
      return scaleArray;
    },

    /**
     * 设置场景所有缩放级别的比例尺数组
     * @param {Array} scales -场景所有缩放级别的比例尺数组
     * @memberOf Globe#
     *
     *@returns {Boolean} 返回是否设置成功
     *
     */
    setScaleLevels: function setScaleLevels(scales) {
      if (scales instanceof Array) {
        var count = scales.length;
        var scalesArr = new PIEArray(scales, PIEArrayType.Float64);

        var res = Module._Globe_SetScaleLevels(this.handle, scalesArr.getHandle(), count);

        scalesArr.dispose();
        return Boolean(res);
      }

      return false;
    },

    /**
     * 设置窗口中的场景的名称
     * @param {String} name -窗口中场景名称
     * @memberOf Globe#
     *
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._Globe_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取窗口中的场景的名称
     * @memberOf Globe#
     * @returns {String} 返回地图的名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._Globe_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },
    // /**
    //  * 设置投影坐标系统对象
    //  * @param {PIESpatialReference} spatialReference -投影坐标系统对象
    //  * @memberOf Globe#
    //  */
    setSpatialReference: function setSpatialReference(spatialReference) {
      Module._Globe_SetSpatialReference(this.handle, spatialReference.getHandle());
    },

    /**
     * 设置场景显示比例尺
     * @param {Number} scale -显示比例尺
     * @memberOf Globe#
     */
    setScale: function setScale(scale) {
      Module._Globe_SetScale(this.handle, scale);
    },

    /**
     * 获取场景显示比例尺
     *
     * @memberOf Globe#
     * @returns {Number} -返回场景显示比例尺
     */
    getScale: function getScale() {
      return Module._Globe_GetScale(this.handle);
    },

    /**
     * 缩放场景
     * @param {Number} zoomRatio -缩放参数
     *
     * @memberOf Globe#
     * @returns {Number} 返回地图缩放后的比例尺
     *
     */
    zoom: function zoom(zoomRatio) {
      return Module._Globe_Zoom(this.handle, zoomRatio);
    },

    /**
     * 获取地图的缩放级别
     *
     * @memberOf Globe#
     * @returns {Number} 返回地图缩放级别
     */
    getZoom: function getZoom() {
      return Module._Globe_GetZoom(this.handle);
    },

    /**
     * 设置地图的缩放级别
     * @param {Number} zoom -缩放级别
     * @memberOf Globe#
     */
    setZoom: function setZoom(zoom) {
      Module._Globe_SetZoom(this.handle, zoom);
    },

    /**
     * 地图缩放级别转成分辨率
     * @param {Number} zoom -地图缩放级别
     * @memberOf Globe#
     * @returns {Number} 返回地图显示分辨率
     */
    zoomToResolution: function zoomToResolution(zoom) {
      return Module._Globe_ZoomToResolution(this.handle, zoom);
    },

    /**
     * 分辨率转成地图缩放级别
     * @param {Number} resolution -分辨率
     * @memberOf Globe#
     * @returns {Number} 返回地图缩放级别
     */
    resolutionToZoom: function resolutionToZoom(resolution) {
      return Module._Globe_ResolutionToZoom(this.handle, resolution);
    },

    /**
     * 获取投影坐标系统对象
     *
     * @memberOf Globe#
     * @returns {PIESpatialReference} 返回投影坐标系统对象
     *
     */
    getSpatialReference: function getSpatialReference() {
      var handle = Module._Globe_GetSpatialReference(this.handle);

      return new PIESpatialReference(handle);
    },

    /**
     * 获取场景范围
     *
     * @memberOf Globe#
     * @returns {PIEBounds} 返回场景范围
     *
     */
    getBounds: function getBounds() {
      var arrayBounds = new PIEArray(4, PIEArrayType.Float64);

      Module._Globe_GetBounds(this.handle, arrayBounds.getHandle());

      arrayBounds.updateData();
      var recArray = arrayBounds.toArray();
      var bound = new PIEBounds(recArray[0], recArray[1], recArray[2], recArray[3]);
      arrayBounds.dispose();
      return bound;
    },

    /**
     * 设置场景坐标中心点
     * @param {(PIEVector2/PIEArray)} center -中心点
     * @memberOf Globe#
     */
    setCenter: function setCenter(center) {
      var array = null;

      if (center instanceof PIEVector2) {
        array = new PIEArray([center.x, center.y], PIEArrayType.Float64);
      } else {
        array = new PIEArray(center, PIEArrayType.Float64);
      }

      Module._Globe_SetCenter(this.handle, array.getHandle());

      array.dispose();
    },

    /**
     * 获取场景坐标中心点
     *
     * @memberOf Globe#
     * @returns {PIEVector2} 返回场景的中心点
     *
     */
    getCenter: function getCenter() {
      var array = new PIEArray(2, PIEArrayType.Float64);

      Module._Globe_GetCenter(this.handle, array.getHandle());

      array.updateData();
      var vecArray = array.toArray();
      var vector2d = new PIEVector2(vecArray[0], vecArray[1]);
      array.dispose();
      return vector2d;
    },

    /**
     * 通过地理坐标设置场景坐标中心点
     * @param {(PIEVector2/PIEArray)} center -地理坐标中心点
     * @memberOf Globe#
     */
    setGeoCenter: function setGeoCenter(center) {
      var spatialReference = this.getSpatialReference();
      var array = null;
      center = spatialReference.forward(center);

      if (center instanceof PIEVector2) {
        array = new PIEArray([center.x, center.y], PIEArrayType.Float64);
        spatialReference.forward();
      } else {
        array = new PIEArray(center, PIEArrayType.Float64);
      }

      Module._Globe_SetCenter(this.handle, array.getHandle());

      array.dispose();
    },

    /**
     * 获取场景地理坐标中心点
     * @returns {PIEVector2} 返回场景的中心点
     * @memberOf Globe#
     */
    getGeoCenter: function getGeoCenter() {
      var spatialReference = this.getSpatialReference();
      var array = new PIEArray(2, PIEArrayType.Float64);

      Module._Globe_GetCenter(this.handle, array.getHandle());

      array.updateData();
      var centerArray = array.toArray();
      var vecArray = new PIEVector2(centerArray[0], centerArray[1]);
      var geoCenter = spatialReference.inverse(vecArray);
      array.dispose();
      return geoCenter;
    },

    /**
     * 设置场景是否能旋转
     * @param {Boolean} enable -是否能旋转
     * @memberOf Globe#
     */
    setEnableHeading: function setEnableHeading(enable) {
      Module._Globe_SetEnableHeading(this.handle, enable);
    },

    /**
     * 判断场景是否能旋转
     *
     * @memberOf Globe#
     * @returns {Boolean} 返回场景是否能旋转
     *
     */
    isEnableHeading: function isEnableHeading() {
      return Boolean(Module._Globe_IsEnableHeading(this.handle));
    },

    /**
     * 地理坐标转为地图坐标
     * @param {(PIEVector2/Array)} geoPoint -地理坐标点
     * @memberOf Globe#
     * @returns {PIEVector2} 返回地图坐标
     *
     */
    geoToMap: function geoToMap(geoPoint) {
      var inArray = null;

      if (geoPoint instanceof PIEVector2) {
        inArray = new PIEArray([geoPoint.x, geoPoint.y], PIEArrayType.Float64);
      } else {
        inArray = new PIEArray(geoPoint, PIEArrayType.Float64);
      }

      var outArray = new PIEArray(2, PIEArrayType.Float64);

      Module._Globe_GeoToMap(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var mapPoint = new PIEVector2(vecArray[0], vecArray[1]);
      inArray.dispose();
      outArray.dispose();
      return mapPoint;
    },

    /**
     * 地图坐标转为地理坐标
     * @param {(PIEVector2/Array)} mapPoint -地图坐标点
     * @memberOf Globe#
     *
     * @returns {PIEVector2} 返回地理坐标点
     *
     */
    mapToGeo: function mapToGeo(mapPoint) {
      var inArray = null;

      if (mapPoint instanceof PIEVector2) {
        inArray = new PIEArray([mapPoint.x, mapPoint.y], PIEArrayType.Float64);
      } else {
        inArray = new PIEArray(mapPoint, PIEArrayType.Float64);
      }

      var outArray = new PIEArray(2, PIEArrayType.Float64);

      Module._Globe_MapToGeo(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var geoPoint = new PIEVector2(vecArray[0], vecArray[1]);
      inArray.dispose();
      outArray.dispose();
      return geoPoint;
    },

    /**
     * 地图坐标点转换为像素坐标点
     * @param {(PIEVector2/Array)} mapPoint -地图坐标点
     *
     * @memberOf Globe#
     * @returns {PIEVector2} 像素坐标点(如果传入地图坐标为空，返回null)
     *
     */
    mapToDevice: function mapToDevice(mapPoint) {
      var inArray = null;

      if (!mapPoint) {
        return null;
      }

      if (mapPoint instanceof PIEVector2) {
        inArray = new PIEArray([mapPoint.x, mapPoint.y], PIEArrayType.Float64);
      } else if (mapPoint instanceof Array) {
        inArray = new PIEArray(mapPoint, PIEArrayType.Float64);
      } else {
        return null;
      }

      var outArray = new PIEArray(2, PIEArrayType.Int32);

      Module._Globe_MapPointToDevice(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var devicePoint = new PIEVector2(vecArray[0] / this._pixelRatio, vecArray[1] / this._pixelRatio);
      inArray.dispose();
      outArray.dispose();
      return devicePoint;
    },

    /**
     * 像素坐标点转换为地图坐标点
     * @param {(PIEVector2/Array)} devicePoint -像素坐标点
     *
     * @memberOf Globe#
     * @returns {PIEVector2} 地图坐标点
     *
     */
    deviceToMap: function deviceToMap(devicePoint) {
      var inArray = null;

      if (devicePoint instanceof PIEVector2) {
        inArray = new PIEArray([devicePoint.x, devicePoint.y], PIEArrayType.Int32);
      } else {
        inArray = new PIEArray(devicePoint, PIEArrayType.Int32);
      }

      var outArray = new PIEArray(2, PIEArrayType.Float64);

      Module._Globe_DevicePointToMap(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var mapPoint = new PIEVector2(vecArray[0], vecArray[1]);
      inArray.dispose();
      outArray.dispose();
      return mapPoint;
    },

    /**
     * 地理坐标转换成世界坐标
     * @param {(PIEVector2/Array)} geoPoint -地理坐标点
     * @param {Number} elevation -高程值
     *
     * @memberOf Globe#
     * @returns {PIEVector3} 像素坐标点
     *
     */
    geoToWorld: function geoToWorld(geoPoint, elevation) {
      var inArray = null;

      if (geoPoint instanceof PIEVector2) {
        inArray = new PIEArray([geoPoint.x, geoPoint.y], PIEArrayType.Float64);
      } else {
        inArray = new PIEArray(geoPoint, PIEArrayType.Float64);
      }

      var outArray = new PIEArray(3, PIEArrayType.Float64);

      var sceneMode = Module._Globe_GetSceneMode(this.handle);

      Module._Globe_GeoToWorld(this.handle, sceneMode, inArray.getHandle(), elevation, outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var worldPoint = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
      inArray.dispose();
      outArray.dispose();
      return worldPoint;
    },

    /**
     * 世界坐标转换成地理坐标
     * @param {(PIEVector3/Array)} worldPoint -世界坐标点
     * @memberOf Globe#
     *
     * @returns {PIEVector2} 地理坐标点
     */
    worldToGeo: function worldToGeo(worldPoint) {
      var inArray = null;

      if (worldPoint instanceof PIEVector3) {
        inArray = new PIEArray([worldPoint.x, worldPoint.y, worldPoint.z], PIEArrayType.Float64);
      } else {
        inArray = new PIEArray(worldPoint, PIEArrayType.Float64);
      }

      var outArray = new PIEArray(2, PIEArrayType.Float64);

      var sceneMode = Module._Globe_GetSceneMode(this.handle);

      Module._Globe_WorldToGeo(this.handle, sceneMode, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var geoPoint = new PIEVector2(vecArray[0], vecArray[1]);
      inArray.dispose();
      outArray.dispose();
      return geoPoint;
    },

    /**
     * 世界坐标换算成像素坐标
     * @param {(PIEVector3/Array)} worldPoint -世界坐标点
     * @memberOf Globe#
     *
     * @returns {PIEVector2} 像素坐标点
     */
    worldToDevice: function worldToDevice(worldPoint) {
      var inArray = null;

      if (worldPoint instanceof PIEVector3) {
        inArray = new PIEArray([worldPoint.x, worldPoint.y, worldPoint.z], PIEArrayType.Float64);
      } else {
        inArray = new PIEArray(worldPoint, PIEArrayType.Float64);
      }

      var outArray = new PIEArray(2, PIEArrayType.Int32);

      Module._Globe_WorldToDevice(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var devicePoint = new PIEVector2(vecArray[0] / this._pixelRatio, vecArray[1] / this._pixelRatio);
      inArray.dispose();
      outArray.dispose();
      return devicePoint;
    },

    /**
     * 像素坐标换算成世界坐标
     * @param {(PIEVector2/Array)} devicePoint -像素坐标点
     * @memberOf Globe#
     *
     * @returns {PIEVector3} 世界坐标点
     */
    deviceToWorld: function deviceToWorld(devicePoint) {
      var inArray = null;

      if (devicePoint instanceof PIEVector2) {
        inArray = new PIEArray([devicePoint.x, devicePoint.y], PIEArrayType.Int32);
      } else {
        inArray = new PIEArray(devicePoint, PIEArrayType.Int32);
      }

      var outArray = new PIEArray(3, PIEArrayType.Float64);

      Module._Globe_DeviceToWorld(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var worldPoint = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
      inArray.dispose();
      outArray.dispose();
      return worldPoint;
    },

    /**
     * 像素坐标换算成世界坐标
     * @param {(PIEVector2/Array)} devicePoint -像素坐标点
     * @memberOf Globe#
     *
     * @returns {PIEVector3} 世界坐标点
     */
    deviceToWorldEx: function deviceToWorldEx(devicePoint) {
      var inArray = null;

      if (devicePoint instanceof PIEVector2) {
        inArray = new PIEArray([devicePoint.x, devicePoint.y], PIEArrayType.Int32);
      } else {
        inArray = new PIEArray(devicePoint, PIEArrayType.Int32);
      }

      var outArray = new PIEArray(3, PIEArrayType.Float64);

      Module._Globe_DeviceToWorldEx(this.handle, inArray.getHandle(), outArray.getHandle());

      outArray.updateData();
      var vecArray = outArray.toArray();
      var worldPoint = new PIEVector3(vecArray[0], vecArray[1], vecArray[2]);
      inArray.dispose();
      outArray.dispose();
      return worldPoint;
    },

    /**
     * 获取地图翻转（绕z轴旋转）角度
     * @memberOf Globe#
     *
     * @returns {Number} 返回地图翻转（绕z轴旋转）角度
     *
     */
    getHeadingAngle: function getHeadingAngle() {
      return Module._Globe_GetHeadingAngle(this.handle);
    },

    /**
     * 设置地图翻转（绕z轴旋转）角度
     * @param {Number} angle -翻转角度
     * @memberOf Globe#
     */
    setHeadingAngle: function setHeadingAngle(angle) {
      Module._Globe_SetHeadingAngle(this.handle, angle);
    },

    /**
     * 获取地图俯仰（绕x轴旋转）角度
     *
     * @memberOf Globe#
     * @returns {Number} 返回地图俯仰（绕x轴旋转）角度
     *
     */
    getPitchAngle: function getPitchAngle() {
      return Module._Globe_GetPitchAngle(this.handle);
    },

    /**
     * 设置地图俯仰（绕x轴旋转）角度
     * @param {Number} angle -旋转角度
     * @memberOf Globe#
     *
     */
    setPitchAngle: function setPitchAngle(angle) {
      Module._Globe_SetPitchAngle(this.handle, angle);
    },

    /**
     * 设置地图最大俯仰（绕x轴旋转）角度
     * @param {Number} angle -最大俯仰角度[0,90]
     * @memberOf Globe#
     */
    setMaxPitchAngle: function setMaxPitchAngle(angle) {
      Module._Globe_SetMaxPitchAngle(this.handle, angle);
    },

    /**
     * 获取地图最大俯仰（绕x轴旋转）角度
     * @memberOf Globe#
     * @returns {Number} 返回地图最大俯仰（绕x轴旋转）角度
     */
    getMaxPitchAngle: function getMaxPitchAngle() {
      return Module._Globe_GetMaxPitchAngle(this.handle);
    },

    /**
     * 添加图层
     * @param {PIEGlobeLayer} globeLayer -图层对象
     * @param {Boolean} addToHead -是否添加到图层顶部
     * @memberOf Globe#
     * @returns {Boolean} 返回是否成功添加到图层顶部
     */
    addLayer: function addLayer(globeLayer, addToHead) {
      if (addToHead == null) {
        addToHead = true;
      }

      var result = Module._Globe_AddLayer(this.handle, globeLayer.getHandle(), addToHead);

      if (result) {
        globeLayer.setAutoRelease(false);
      }

      return Boolean(result);
    },

    /**
     * 获取指定别名的图层集
     * @param {String} name -图层名称
     * @memberOf Globe#
     * @returns {PIEGlobeLayer} 返回指定名称的图层集
     */
    getLayer: function getLayer(name) {
      var strName = new PIEString$1(name);

      var hGlobeLayer = Module._Globe_GetLayer(this.handle, strName.getHandle());

      strName.dispose();
      return PIEGlobeLayerFactory.CreateInstance(hGlobeLayer);
    },

    /**
     * 获取指定索引的图层
     * @param {Number} index -指定索引
     * @memberOf Globe#
     * @returns {PIEGlobeLayer} 返回指定索引的图层集
     *
     */
    getLayerAt: function getLayerAt(index) {
      var hGlobeLayer = Module._Globe_GetLayerAt(this.handle, index);

      return PIEGlobeLayerFactory.CreateInstance(hGlobeLayer);
    },

    /**
     * 获取图层索引
     * @param {PIEGlobeLayer} globeLayer -图层对象
     * @memberOf Globe#
     * @returns {Number} 成功返回当前图层的索引 失败返回-1
     *
     */
    getLayerIndex: function getLayerIndex(globeLayer) {
      return Module._Globe_GetLayerIndex(this.handle, globeLayer.getHandle());
    },

    /**
     * 获取当前地图图层数量
     * @memberOf Globe#
     * @returns {Number} 返回当前地图图层数量
     *
     */
    getLayerCount: function getLayerCount() {
      return Module._Globe_GetLayerCount(this.handle);
    },

    /**
     * 移除图层(通过图层指针)
     * @param {PIEGlobeLayer} globelayer -图层对象
     * @memberOf Globe#
     * @returns {Boolean} true 移除成功,false 移除失败
     *
     */
    removeLayer: function removeLayer(globelayer) {
      var res = Module._Globe_RemoveLayer(this.handle, globelayer.getHandle());

      if (res) {
        globelayer.handle = null;
      }

      return Boolean(res);
    },

    /**
     *  移除指定图层
     * @param {Number} index -指定图层索引
     * @memberOf Globe#
     * @returns {Boolean} true 移除成功,false 移除失败
     *
     */
    removeLayerAt: function removeLayerAt(index) {
      return Boolean(Module._Globe_RemoveLayerAt(this.handle, index));
    },

    /**
     * 移除当前地图所有图层
     * @memberOf Globe#
     */
    removeAllLayers: function removeAllLayers() {
      Module._Globe_RemoveAllLayers(this.handle);
    },

    /**
     * 将指定图层上移
     * @param {Number} index -指定图层索引
     * @memberOf Globe#
     * @returns {Boolean} true 移动成功,false 移动失败
     */
    moveLayerUp: function moveLayerUp(index) {
      return Boolean(Module._Globe_MoveLayerUp(this.handle, index));
    },

    /**
     * 将指定图层下移
     * @param {Number} index -指定图层索引
     * @memberOf Globe#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerDown: function moveLayerDown(index) {
      return Boolean(Module._Globe_MoveLayerDown(this.handle, index));
    },

    /**
     * 将指定图层移到最顶端
     * @param {Number} index -指定图层索引
     * @memberOf Globe#
     * @returns {Boolean} true 移动成功,false 移动失败
     */
    moveLayerTop: function moveLayerTop(index) {
      return Boolean(Module._Globe_MoveLayerBottom(this.handle, index));
    },

    /**
     * 将指定图层移到最底端
     * @param {Number} index -指定图层索引
     * @memberOf Globe#
     * @returns {Boolean} true 移动成功,false 移动失败
     *
     */
    moveLayerBottom: function moveLayerBottom(index) {
      return Boolean(Module._Globe_MoveLayerTop(this.handle, index));
    },

    /**
     * 将指定图层移到指定位置
     * @param {Number} indexSrc -源图层索引
     * @param {Number} indexDest -目标位置索引
     *
     * @memberOf Globe#
     * @returns {Boolean} 移动成功返回true，失败返回false
     */
    moveLayerTo: function moveLayerTo(indexSrc, indexDest) {
      return Boolean(Module._Globe_MoveLayerTo(this.handle, indexSrc, indexDest));
    },

    /**
     * 清除Selection
     * @memberOf Globe#
     * @returns {Boolean} 成功返回true，失败返回false
     */
    clearSelection: function clearSelection() {
      return Boolean(Module._Globe_ClearSelection(this.handle));
    },

    /**
     * 将源图层组中索引的图层移到目标图层组中索引的位置
     * @param {GlobeGroupLayer} groupSrc -原图层组
     * @param {Number} indexSrc -原索引
     * @param {GlobeGroupLayer} groupDest -目标图层组
     * @param {Number} indexDest -目标索引
     *
     * @memberOf Globe#
     * @returns {Boolean} 移动成功返回true，失败返回false
     */
    moveGroupLayerTo: function moveGroupLayerTo(groupSrc, indexSrc, groupDest, indexDest) {
      var groupSrcHandle = groupSrc != null ? groupSrc.getHandle() : null;
      var groupDestHandle = groupDest != null ? groupDest.getHandle() : null;
      return Boolean(Module._Globe_MoveLayerto(this.handle, groupSrcHandle, indexSrc, groupDestHandle, indexDest));
    },

    /**
     * 获取天空盒对象
     * @memberOf Globe#
     * @returns {PIESkyDome} 成功返回天空盒对象,失败返回null
     *
     */
    getSkyDome: function getSkyDome() {
      var handle = Module._Globe_GetSkyDome(this.handle);

      if (handle) {
        return new PIESkyDome(handle);
      }

      return null;
    },

    /**
     * 获取星空对象
     * @memberOf Globe#
     * @returns {PIEStar} 成功返回星空对象,失败返回null
     *
     */
    getStar: function getStar() {
      var handle = Module._Globe_GetStar(this.handle);

      if (handle) {
        return new PIEStar(handle);
      }

      return null;
    },

    /**
     * 获取太阳光照对象
     *
     * @memberOf Globe#
     * @returns {PIESunLight} 成功返回太阳特效对象,失败返回null
     *
     */
    getSunLight: function getSunLight() {
      var handle = Module._Globe_GetSunLight(this.handle);

      if (handle) {
        return new PIESunLight(handle);
      }
    },

    /**
     * 获取大气圈对象
     *
     * @memberOf Globe#
     * @returns {PIEAtmosphere} 成功返回大气圈对象,失败返回NULL
     *
     */
    getAtmosphere: function getAtmosphere() {
      var handle = Module._Globe_GetAtmosphere(this.handle);

      if (handle) {
        return new PIEAtomsphere(handle);
      }
    },
    // /**
    //  * 获取局部坐标转换球面坐标的矩阵
    //  * @param {Number} scaleRatio -比例尺
    //  * @memberOf Globe#
    //  * @returns {PIEMatrix4f} 返回矩阵
    //  *
    //  */
    // computeMapLocalMatrix: function (scaleRatio) {
    //     var arrayPosition = new PIEArray(3, PIEArrayType.Float64);
    //     var arrayRegerenceCenter = new PIEArray(3, PIEArrayType.Float64);
    //     var arrayMartix = new PIEArray(16, PIEArrayType.Float32);
    //     var res = Module._Globe_ComputeMapLocalMatrix(this.handle, arrayPosition.getHandle(), arrayRegerenceCenter.getHandle(), scaleRatio, arrayMartix.getHandle());
    //     arrayPosition.dispose();
    //     arrayRegerenceCenter.dispose();
    //     arrayMartix.dispose();
    //     return res;
    // },

    /**
     * 窗口地图全屏显示
     * @memberOf Globe#
     *
     */
    viewEntire: function viewEntire() {
      Module._Globe_ViewEntire(this.handle);
    },

    /**
     * 设置视图范围
     * @param {PIEBounds/Array} bounds -视图范围
     * @memberOf Globe#
     */
    setViewBounds: function setViewBounds(bounds) {
      var arrayRect;

      if (bounds instanceof Array) {
        arrayRect = new PIEArray(bounds, PIEArrayType.Float64);
      } else if (bounds instanceof PIEBounds) {
        arrayRect = new PIEArray([bounds.left, bounds.top, bounds.right, bounds.bottom], PIEArrayType.Float64);
      } else {
        return;
      }

      Module._Globe_SetViewBounds(this.handle, arrayRect.getHandle());

      arrayRect.dispose();
    },

    /**
     * 获取视图范围
     * @returns {PIEBounds} 返回视图范围
     * @memberOf Globe#
     */
    getViewBounds: function getViewBounds() {
      var arrayBound = new PIEArray(4, PIEArrayType.Float64);

      Module._Globe_GetViewBounds(this.handle, arrayBound.getHandle());

      arrayBound.updateData();
      var recArray = arrayBound.toArray();
      var bound = new PIEBounds(recArray[0], recArray[1], recArray[2], recArray[3]);
      arrayBound.dispose();
      return bound;
    },

    /**
     * 刷新地图窗口
     * @param {Boolean} forceRefresh -标识是否强制刷新(设置为true时，会主动调用异步绘制，所有图层强制刷新)
     * @param {Boolean} clearCache -标识是否清除缓存(设置为true时，会清除所有图层缓存，图层做的修改会立即生效)
     * @memberOf Globe#
     */
    refresh: function refresh(forceRefresh, clearCache) {
      Module._Globe_Refresh(this.handle, forceRefresh, clearCache);
    },

    /**
     * 刷新地形
     * @param {Boolean} forceRefresh -标识是否强制刷新
     * @param {Boolean} clearCache -标识是否清除缓存
     * @memberOf Globe#
     */
    refreshGlobeModel: function refreshGlobeModel(forceRefresh, clearCache) {
      Module._Globe_RefreshGlobeModel(this.handle, forceRefresh, clearCache);
    },

    /**
     * 地图坐标换算成世界坐标
     * @param {PIESceneMode} sceneMode -场景模式
     * @param {(PIEVector2/Array)} point2d -地图坐标点
     * @param {Number} elevation -高程值
     *
     * @memberOf Globe#
     * @returns {PIEVector3} 世界坐标点
     */
    mapToWorld: function mapToWorld(sceneMode, point2d, elevation) {
      var arrayPoint = [];

      if (point2d instanceof Array) {
        arrayPoint = point2d;
      } else if (point2d instanceof PIEVector2) {
        arrayPoint = [point2d.x, point2d.y];
      }

      if (arrayPoint.length) {
        var arrayPoint2d = new PIEArray(arrayPoint, PIEArrayType.Float64);
        var desArrayPoint = new PIEArray(3, PIEArrayType.Float64);

        Module._Globe_MapToWorld(this.handle, sceneMode, arrayPoint2d.getHandle(), elevation, desArrayPoint.getHandle());

        desArrayPoint.updateData();
        var desPoint = desArrayPoint.toArray();
        desArrayPoint.dispose();
        arrayPoint2d.dispose();

        if (point2d instanceof Array) {
          return desPoint;
        } else if (point2d instanceof PIEVector2) {
          return new PIEVector3(desPoint[0], desPoint[1], desPoint[2]);
        }
      }
    },

    /**
     * 世界坐标换算成地图坐标
     * @param {PIESceneMode} sceneMode -场景模式
     * @param {(PIEVector3/Array)} point3d -世界坐标点
     *
     * @memberOf Globe#
     * @returns {PIEVector2} 地图坐标点
     */
    worldToMap: function worldToMap(sceneMode, point3d) {
      var arrayPoint = [];

      if (point3d instanceof Array) {
        arrayPoint = point3d;
      } else if (point3d instanceof PIEVector3) {
        arrayPoint = [point3d.x, point3d.y, point3d.z];
      }

      if (arrayPoint.length) {
        var arrayPoint3d = new PIEArray(arrayPoint, PIEArrayType.Float64);
        var desArrayPoint = new PIEArray(2, PIEArrayType.Float64);

        Module._Globe_WorldToMap(this.handle, sceneMode, arrayPoint3d.getHandle(), desArrayPoint.getHandle());

        desArrayPoint.updateData();
        var desPoint = desArrayPoint.toArray();
        desArrayPoint.dispose();
        arrayPoint3d.dispose();

        if (point3d instanceof Array) {
          return desPoint;
        } else if (point3d instanceof PIEVector3) {
          return new PIEVector2(desPoint[0], desPoint[1]);
        }
      }
    },

    /**
     * 设备范围转换为地图范围
     * @param {(PIERect/Array)} rect4i -设备范围
     * @memberOf Globe#
     *
     * @returns {PIEBounds}地图范围
     */
    deviceRectToMap: function deviceRectToMap(rect4i) {
      var arrayRect = [];

      if (rect4i instanceof Array) {
        arrayRect = rect4i;
      } else if (rect4i instanceof PIERect) {
        arrayRect = [rect4i.left, rect4i.top, rect4i.right, rect4i.bottom];
      }

      if (arrayRect.length) {
        var arrayRect4i = new PIEArray(arrayRect, PIEArrayType.Int32);
        var desArrayRect = new PIEArray(4, PIEArrayType.Float64);

        Module._Globe_DeviceRectToMap(this.handle, arrayRect4i.getHandle(), desArrayRect.getHandle());

        desArrayRect.updateData();
        var desRect4d = desArrayRect.toArray();
        desArrayRect.dispose();
        arrayRect4i.dispose();

        if (rect4i instanceof Array) {
          return desRect4d;
        } else if (rect4i instanceof PIERect) {
          return new PIEBounds(desRect4d[0], desRect4d[1], desRect4d[2], desRect4d[3]);
        }
      }
    },

    /**
     * 地图范围转换为设备范围
     * @param {(PIEBounds/Array)} rect4d -地图范围
     *
     * @memberOf Globe#
     * @returns {PIERect}设备范围
     */
    mapBoundsToDevice: function mapBoundsToDevice(rect4d) {
      var arrayRect = [];

      if (rect4d instanceof Array) {
        arrayRect = rect4d;
      } else if (rect4d instanceof PIEBounds) {
        arrayRect = [rect4d.left, rect4d.top, rect4d.right, rect4d.bottom];
      }

      if (arrayRect.length) {
        var arrayRect4d = new PIEArray(arrayRect, PIEArrayType.Float64);
        var ArrayRect4i = new PIEArray(4, PIEArrayType.Int32);

        Module._Globe_MapRectToDevice(this.handle, arrayRect4d.getHandle(), ArrayRect4i.getHandle());

        ArrayRect4i.updateData();
        var rect4iarray = ArrayRect4i.toArray();
        ArrayRect4i.dispose();
        arrayRect4d.dispose();

        if (rect4d instanceof Array) {
          return rect4iarray;
        } else if (rect4d instanceof PIEBounds) {
          return new PIERect(rect4iarray[0] / this._pixelRatio, rect4iarray[1] / this._pixelRatio, rect4iarray[2] / this._pixelRatio, rect4iarray[3] / this._pixelRatio);
        }
      }
    },

    /**
     * 设备尺寸转换为地图尺寸
     * @param {(double)} size -设备尺寸
     * @memberOf Globe#
     *
     * @returns {double}地图尺寸
     */
    deviceSizeToMap: function deviceSizeToMap(size) {
      return Module._Globe_DeviceSizeToMap(this.handle, size);
    },

    /**
     * 地图尺寸转换为设备尺寸
     * @param {(double)} size -地图尺寸
     *
     * @memberOf Globe#
     * @returns {double}设备尺寸
     */
    mapSizeToDevice: function mapSizeToDevice(size) {
      return Module._Globe_MapSizeToDevice(this.handle, size);
    },

    /**
     * 设置最小层级
     * @param {Number} zoom -层级
     * @memberOf Globe#
     */
    setMinZoom: function setMinZoom(zoom) {
      var resolution = 256 * Math.pow(2, zoom);
      this.setMinResolution(resolution);
    },

    /**
     * 获取最小层级
     *
     * @memberOf Globe#
     *@returns {Number} 最小层级
     *
     */
    getMinZoom: function getMinZoom() {
      var resolution = Module._Globe_GetMinResolution(this.handle);

      return this.resolutionToZoom(resolution);
    },

    /**
     * 设置最大层级
     * @param {Number} zoom -层级
     * @memberOf Globe#
     */
    setMaxZoom: function setMaxZoom(zoom) {
      var resolution = 256 * Math.pow(2, zoom);

      Module._Globe_SetMaxResolution(this.handle, resolution);
    },

    /**
     * 获取最大层级
     *
     * @memberOf Globe#
     * @returns {Number} 最大层级
     *
     */
    getMaxZoom: function getMaxZoom() {
      var resolution = Module._Globe_GetMaxResolution(this.handle);

      return this.resolutionToZoom(resolution);
    },

    /**
     * 设置最小分辨率
     * @param {Number} resolution -分辨率
     * @memberOf Globe#
     */
    setMinResolution: function setMinResolution(resolution) {
      Module._Globe_SetMinResolution(this.handle, resolution);
    },

    /**
     * 获取最小分辨率
     *
     * @memberOf Globe#
     *@returns {Number} 最小分辨率
     *
     */
    getMinResolution: function getMinResolution() {
      return Module._Globe_GetMinResolution(this.handle);
    },

    /**
     * 设置最大分辨率
     * @param {Number} resolution -分辨率
     * @memberOf Globe#
     */
    setMaxResolution: function setMaxResolution(resolution) {
      Module._Globe_SetMaxResolution(this.handle, resolution);
    },

    /**
     * 获取最大分辨率
     *
     * @memberOf Globe#
     *@returns {Number} 最大分辨率
     *
     */
    getMaxResolution: function getMaxResolution() {
      return Module._Globe_GetMaxResolution(this.handle);
    },
    // /**
    //  * 执行动画
    //  * @param {PIEAction} action -动画对象
    //  * @memberOf Globe#
    //  */
    // runAction: function (action) {
    //     Module._Globe_RunAction(this.handle, action.getHandle());
    // },
    // /**
    //  * 停止动画
    //  * @param {PIEAction} action -动画对象
    //  * @memberOf Globe#
    //  */
    // stopAction: function (action) {
    //     Module._Globe_StopAction(this.handle, action.getHandle());
    // },
    // /**
    //  * 停止所有动画
    //  *
    //  * @memberOf Globe#
    //  *
    //  */
    // stopAllActions: function () {
    //     Module._Globe_StopAllActions(this.handle);
    // },
    // /**
    //  * 判断动画是否完成
    //  *
    //  * @memberOf Globe#
    //  * @returns {PIEAction} 动画对象
    //  *
    //  */
    // isAllActionsDone: function () {
    //     return Module._Globe_IsAllActionsDone(this.handle);
    // },

    /**
     * 刷新图层(当窗口(相机)未发生变化时，添加图层之后需要调用，否则图层不会立即显示)
     * @param {PIEGlobeLayer} layer -需要刷新的图层对象
     * @param {Boolean} clearCache -标识是否清除缓存(图层进行了修改(风格等)，可以设置为true，使修改立即生效)
     * @memberOf Globe#
     */
    refreshLayer: function refreshLayer(layer, clearCache) {
      Module._Globe_RefreshLayer(this.handle, layer.getHandle(), clearCache);
    },

    /**
     * 设置地表网格瓦片层级
     * @param {Number} levelSize -地表网格瓦片层级
     * @memberOf Globe#
     */
    setTileLevelSize: function setTileLevelSize(levelSize) {
      Module._Globe_SetTileLevelSize(this.handle, levelSize);
    },

    /**
     * 获取地表网格瓦片层级
     *
     * @memberOf Globe#
     * @returns {Number} 返回地表网格瓦片层级
     */
    getTileLevelSize: function getTileLevelSize() {
      return Module._Globe_GetTileLevelSize(this.handle);
    },
    // setText: function (text){
    //     var strText = new PIEString(text);
    //     Module._Globe_SetText(this.handle, strText.getHandle());
    //     strText.dispose();
    // },

    /**
     * 获取反射对象
     *
     * @memberOf Globe#
     * @returns {PIEReflectManager} 返回反射对象
     */
    getReflectManager: function getReflectManager() {
      var handle = Module._Globe_GetReflectManager(this.handle);

      return new PIEReflectManager(handle);
    },

    /**
     * 根据层级和坐标获取瓦片行列号
     * @param {Number} zoom -层级
     * @param {PIEVector2/Array} center -点坐标
     * @memberOf Globe#
     * @returns {PIEVector2} 返回瓦片行列号
     */
    computeTilePosition: function computeTilePosition(zoom, center) {
      if (this.handle == null) return null;
      var centerArray = null;

      if (center instanceof PIEVector2) {
        centerArray = center.toArray();
      } else if (center instanceof Array) {
        centerArray = center;
      }

      if (centerArray != null) {
        var posArray = new PIEArray(2, PIEArrayType.Int32);

        Module._Globe_ComputeTilePosition(this.handle, zoom, centerArray[0], centerArray[1], posArray.getHandle());

        posArray.updateData();
        var resPos = posArray.toArray();
        posArray.dispose();
        return new PIEVector2(resPos[0], resPos[1]);
      }

      return null;
    }
  });

  //     EarthModule(/* optional default settings */).then(function (earthModule) {
  //         if(window["Module"]){
  //             if("_Environment_Init" in Module){
  //                 return;
  //             }else{
  //                 for (var key in earthModule) {
  //                     Module[key] = earthModule[key];
  //                 }
  //                 Module.onRuntimeInitialized();
  //             }
  //         }
  //     })
  // }
  // createEarthModule();

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   *系统运行环境
   * @name Environment
   * @interface
   */

  var PIEEnvironment = function PIEEnvironment() {}; // /**
  //  * 设置工作路径
  //  * @param {String} path -工作路径
  //  * @memberOf Environment
  //  *
  //  */


  PIEEnvironment.setWorkPath = function (path) {
    var strPath = new PIEString$1(path);

    Module._Environment_SetWorkPath(strPath.getHandle());

    strPath.dispose();
  }; // /**
  //  * 获取工作路径
  //  * @memberOf Environment
  //  *@returns {String} 工作路径
  //  *
  //  * @example
  //  * let path = PIE.Environment.getWorkPath();
  //  */


  PIEEnvironment.getWorkPath = function () {
    var strPath = new PIEString$1(256);

    Module._Environment_GetWorkPath(strPath.getHandle());

    var workPath = strPath.toString();
    strPath.dispose();
    return workPath;
  };
  /**
   * 设置资源Url
   * @param {String} url -资源Url
   * @memberOf Environment
   */


  PIEEnvironment.setResourceUrl = function (url) {
    var strUrl = new PIEString$1(url);

    Module._Environment_SetResourceUrl(strUrl.getHandle());

    strUrl.dispose();
  };
  /**
   *  获取资源Url
   *
   *  @memberOf Environment
   *  @returns {String} 资源Url
   *
   * @example
   * let resourceUrl = PIE.Environment.getResourceUrl();
   */


  PIEEnvironment.getResourceUrl = function () {
    var strUrl = new PIEString$1(256);

    Module._Environment_GetResourceUrl(strUrl.getHandle());

    var resourceUrl = strUrl.toString();
    strUrl.dispose();
    return resourceUrl;
  };
  /**
   * 初始化系统
   * @memberOf Environment
   */


  PIEEnvironment.init = function () {
    PIEEnvironment.setWorkPath("");

    if (!window._environmentInit) {
      Module._Environment_Init();

      window._environmentInit = true;
    }
  };
  /**
   * 退出系统
   * @memberOf Environment
   */


  PIEEnvironment.exit = function () {
    Module._Environment_Exit();
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 场景维度模式
   * @readonly
   * @enum {number}
   */
  var PIEDimensionMode = {
    /**二维模式(包括2.5D)*/
    D2D: 0,

    /**三维模式*/
    D3D: 1
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维场景模式枚举
   * @readonly
   * @enum {Number}
   */
  var PIESceneMode = {
    /**未知场景*/
    UnKnown: 0,

    /**球场景*/
    Sphere: 1,

    /**平面的投影场景*/
    Plane: 2
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 创建回调事件
   * @name Event
   * @class Event
   * 回调事件操作函数
   * @example
   * MyObject.prototype.myListener = function(arg1, arg2) {
   *   this.myArg1Copy = arg1;
   *   this.myArg2Copy = arg2;
   * }
   * const myObjectInstance = new MyObject();
   * const evt = new PIE.Event();
   * evt.addEventListener(MyObject.prototype.myListener, myObjectInstance);
   * evt.raiseEvent('1', '2');
   * evt.removeEventListener(MyObject.prototype.myListener);
   */
  function PIEEvent() {
    this._listeners = [];
    this._scopes = [];
    this._toRemove = [];
    this._insideRaiseEvent = false;
  }

  function compareNumber(a, b) {
    return b - a;
  }

  Object.assign(PIEEvent.prototype, {
    /**
     * 添加监听器
     * @param {Function} listener -监听函数
     * @param {Object} scope -一个可选的对象范围，用作this指针，监听器函数在其中执行
     * @returns {Function} 返回removeEventListener，调用则删除事件监听器
     * @memberOf Event#
     *
     */
    addEventListener: function addEventListener(listener, scope) {
      this._listeners.push(listener);

      this._scopes.push(scope);

      var event = this;
      return function () {
        event.removeEventListener(listener, scope);
      };
    },

    /**
     * 删除监听器
     * @param {Function} listener 要注销的监听器
     * @param {Object} scope 最初传递给addEventListener 的范围
     * @returns {Boolean} true如果监听器被移除；false如果监听器和范围未在事件中注册
     * @memberOf Event#
     *
     */
    removeEventListener: function removeEventListener(listener, scope) {
      var listeners = this._listeners;
      var scopes = this._scopes;
      var index = -1;

      for (var i = 0; i < listeners.length; i++) {
        if (listeners[i] === listener && scopes[i] === scope) {
          index = i;
          break;
        }
      }

      if (index !== -1) {
        if (this._insideRaiseEvent) {
          this._toRemove.push(index);

          listeners[index] = undefined;
          scopes[index] = undefined;
        } else {
          listeners.splice(index, 1);
          scopes.splice(index, 1);
        }

        return true;
      }

      return false;
    },

    /**
     * 通过使用所有提供的参数调用每个已注册的监听器来引发事件
     * @param {Object} arguments 此方法接受任意数量的参数并将它们传递给监听器函数
     * @memberOf Event#
     *
     */
    raiseEvent: function raiseEvent() {
      this._insideRaiseEvent = true;
      var i;
      var listeners = this._listeners;
      var scopes = this._scopes;
      var length = listeners.length;

      for (i = 0; i < length; i++) {
        var listener = listeners[i];

        if (listener != null && listener != undefined) {
          listeners[i].apply(scopes[i], arguments);
        }
      }

      var toRemove = this._toRemove;
      length = toRemove.length;

      if (length > 0) {
        toRemove.sort(compareNumber);

        for (i = 0; i < length; i++) {
          var index = toRemove[i];
          listeners.splice(index, 1);
          scopes.splice(index, 1);
        }

        toRemove.length = 0;
      }

      this._insideRaiseEvent = false;
    },

    /**
     * 获取监听器个数
     * @memberOf Event#
     * @returns {Number} 返回监听器个数
     */
    getListenerCount: function getListenerCount() {
      return this._listeners.length - this._toRemove.length;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 编辑模块
   * ---
   */

  /**
   * 编辑器基础操作相关函数
   * @name Editor
   *
   */

  function PIEEditor(handle) {
    this.handle = handle;
    this.addGeometrysEvent = null;
    this.addedGeometrysEvent = null;
    this.updatedGeometrysEvent = null;
    this.hitTestGeometryHandleEvent = null;
  }

  Object.assign(PIEEditor.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 获取添加几何对象之前的回调事件
     *
     * @memberOf Editor#
     * @returns {PIEEvent} 返回添加几何对象之前的回调事件
     */
    getAddGeometrysEvent: function getAddGeometrysEvent() {
      if (this.addGeometrysEvent == null) {
        this.addGeometrysEvent = new PIEEvent();
        Module['setAddGeometrysCallback'](this.handle, this);
      }

      return this.addGeometrysEvent;
    },
    addGeometrysCallback: function addGeometrysCallback(geometrys) {
      var array = [];

      if (geometrys.length > 0) {
        for (var i = 0; i < geometrys.length; i++) {
          var geometry = PIEGeometryFactory.CreateInstance(geometrys[i]);
          array.push(geometry);
        }
      }

      this.addGeometrysEvent.raiseEvent(array);
    },

    /**
     * 获取添加几何对象之后的回调事件
     *
     * @memberOf Editor#
     * @returns {PIEEvent} 返回添加几何对象之后的回调事件
     */
    getAddedGeometrysEvent: function getAddedGeometrysEvent() {
      if (this.addedGeometrysEvent == null) {
        this.addedGeometrysEvent = new PIEEvent();
        Module['setAddedGeometrysCallback'](this.handle, this);
      }

      return this.addedGeometrysEvent;
    },
    addedGeometrysCallback: function addedGeometrysCallback(geometrys) {
      var array = [];

      if (geometrys.length > 0) {
        for (var i = 0; i < geometrys.length; i++) {
          var geometry = PIEGeometryFactory.CreateInstance(geometrys[i]);
          array.push(geometry);
        }
      }

      this.addedGeometrysEvent.raiseEvent(array);
    },

    /**
     * 获取点击几何对象操作的回调事件
     *
     * @memberOf Editor#
     * @returns {PIEEvent} 返回点击几何对象操作的回调事件
     *
     */
    getHitTestGeometryHandleEvent: function getHitTestGeometryHandleEvent() {
      if (this.hitTestGeometryHandleEvent == null) {
        this.hitTestGeometryHandleEvent = new PIEEvent();
        Module['setHitTestGeometryHandleCallBack'](this.handle, this);
      }

      return this.hitTestGeometryHandleEvent;
    },
    hitTestGeometryHandleCallback: function hitTestGeometryHandleCallback(hgeometry, index) {
      if (hgeometry != null) {
        var geometry = PIEGeometryFactory.CreateInstance(hgeometry);
        this.hitTestGeometryHandleEvent.raiseEvent(geometry, index);
      }
    },

    /**
     * 获取更新几何对象之后的回调事件
     *
     * @memberOf Editor#
     * @returns {PIEEvent} 返回更新几何对象之后的回调事件
     */
    getUpatedGeometrysEvent: function getUpatedGeometrysEvent() {
      if (this.updatedGeometrysEvent == null) {
        this.updatedGeometrysEvent = new PIEEvent();
        Module['setUpdatedGeometrysCallback'](this.handle, this);
      }

      return this.updatedGeometrysEvent;
    },
    updatedGeometrysCallback: function updatedGeometrysCallback(geometrys) {
      var array = [];

      if (geometrys.length > 0) {
        for (var i = 0; i < geometrys.length; i++) {
          var geometry = PIEGeometryFactory.CreateInstance(geometrys[i]);
          array.push(geometry);
        }
      }

      this.updatedGeometrysEvent.raiseEvent(array);
    },

    /**
     * 设置编辑模式
     * @param {PIEEditMode} editMode -编辑模式
     * @memberOf Editor#
     */
    setEditMode: function setEditMode(editMode) {
      Module._Editor_SetEditMode(this.handle, editMode);
    },

    /**
     * 获取编辑模式
     *
     * @memberOf Editor#
     * @returns {PIEEditMode} 返回编辑模式
     */
    getEditMode: function getEditMode() {
      return Module._Editor_GetEditMode(this.handle);
    },

    /**
     * 设置节点编辑动作
     * @param {PIEEditAction} editAction -编辑动作
     * @memberOf Editor#
     */
    setEditAction: function setEditAction(editAction) {
      Module._Editor_SetEditAction(this.handle, editAction);
    },

    /**
     * 获取节点编辑动作
     *
     * @memberOf Editor#
     * @returns {PIEEditAction} 返回编辑动作
     */
    getEditAction: function getEditAction() {
      return Module._Editor_GetEditAction(this.handle);
    },

    /**
     * 设置锁定编辑状态
     * @param {Boolean} lockEdit -锁定编辑状态
     * @memberOf Editor#
     */
    setLockEditMode: function setLockEditMode(lockEdit) {
      Module._Editor_SetLockEditMode(this.handle, lockEdit);
    },

    /**
     * 获取锁定编辑状态
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回锁定编辑状态
     */
    isLockEditMode: function isLockEditMode() {
      return Boolean(Module._Editor_IsLockEditMode(this.handle));
    },

    /**
     * 设置是否显示锚点
     * @param {Boolean} visible -是否显示锚点
     * @memberOf Editor#
     */
    setHandleVisible: function setHandleVisible(visible) {
      Module._Editor_SetHandleVisible(this.handle, visible);
    },

    /**
     * 获取是否显示锚点
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否显示锚点
     */
    isHandleVisible: function isHandleVisible() {
      return Boolean(Module._Editor_IsHandleVisible(this.handle));
    },

    /**
     * 设置编辑锚点的大小
     * @param {Number} handleSize -编辑锚点的大小
     * @memberOf Editor#
     */
    setEditHandleSize: function setEditHandleSize(handleSize) {
      Module._Editor_SetEditHandleSize(this.handle, handleSize);
    },

    /**
     * 获取编辑锚点的大小
     *
     * @memberOf Editor#
     * @returns {Number} 返回编辑锚点的大小
     */
    getEditHandleSize: function getEditHandleSize() {
      return Module._Editor_GetEditHandleSize(this.handle);
    },
    // /**
    //  * 设置跟踪编辑几何对象风格
    //  * @param {PIEVectorStyle} style -几何对象风格
    //  * @memberOf Editor#
    //  *
    //  */
    setTrackVectorStyle: function setTrackVectorStyle(style) {
      Module._Editor_SetTrackVectorStyle(this.handle, style.getHandle());
    },
    // /**
    //  * 获取跟踪编辑几何对象风格
    //  *
    //  * @memberOf Editor#
    //  * @returns {PIEVectorStyle} 返回的几何对象风格
    //  */
    getTrackVectorStyle: function getTrackVectorStyle() {
      var handle = Module._Editor_GetTrackVectorStyle(this.handle);

      if (handle) {
        return new PIEVectorStyle(handle);
      }

      return null;
    },
    // /**
    //  * 设置跟踪编辑文本风格
    //  * @param {PIETextStyle} style -几何对象风格
    //  * @memberOf Editor#
    //  */
    setTrackTextStyle: function setTrackTextStyle(style) {
      Module._Editor_SetTrackTextStyle(this.handle, style.getHandle());
    },
    // /**
    //  * 获取跟踪编辑文本风格
    //  *
    //  * @memberOf Editor#
    //  * @returns {PIETextStyle} 返回的文本对象风格
    //  */
    getTrackTextStyle: function getTrackTextStyle() {
      var handle = Module._Editor_GetTrackTextStyle(this.handle);

      if (handle) {
        return new PIETextStyle(handle);
      }

      return null;
    },

    /**
     * 设置创建几何对象风格
     * @param {PIEVectorStyle} style -几何对象风格
     * @memberOf Editor#
     */
    setCreateVectorStyle: function setCreateVectorStyle(style) {
      Module._Editor_SetCreateVectorStyle(this.handle, style.getHandle());
    },

    /**
     * 获取创建几何对象风格
     *
     * @memberOf Editor#
     * @returns {PIEVectorStyle} 返回的几何对象风格
     */
    getCreateVectorStyle: function getCreateVectorStyle() {
      var handle = Module._Editor_GetCreateVectorStyle(this.handle);

      if (handle) {
        return new PIEVectorStyle(handle);
      }

      return null;
    },

    /**
     * 设置创建文本风格
     * @param {PIETextStyle} style -文本风格
     * @memberOf Editor#
     */
    setCreateTextStyle: function setCreateTextStyle(style) {
      Module._Editor_SetCreateTextStyle(this.handle, style.getHandle());
    },

    /**
     * 获取创建文本风格
     *
     * @memberOf Editor#
     * @returns {PIETextStyle} 返回的文本风格对象
     */
    getCreateTextStyle: function getCreateTextStyle() {
      var handle = Module._Editor_GetCreateTextStyle(this.handle);

      if (handle) {
        return new PIETextStyle(handle);
      }

      return null;
    },

    /**
     * 删除当前编辑对象
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功删除当前编辑对象
     */
    deleteEditObject: function deleteEditObject() {
      return Boolean(Module._Editor_DeleteEditObject(this.handle));
    },

    /**
     * 通过id删除当前编辑对象，ID对应上才删除
     * @param {Number} id -对象id
     * @memberOf Editor#
     *
     * @returns {Boolean} 返回是否成功删除当前编辑对象
     */
    deleteEditObjectByID: function deleteEditObjectByID(id) {
      return Boolean(Module._Editor_DeleteEditObjectByID(this.handle, id));
    },

    /**
     * 通过id移除当前编辑对象，ID对应上才移除
     * @param {Number} id -对象id
     * @memberOf Editor#
     *
     * @returns {Boolean} 返回是否成功删除当前编辑对象
     */
    removeEditGeometryByID: function removeEditGeometryByID(id) {
      return Boolean(Module._Editor_RemoveEditGeometryByID(this.handle, id));
    },

    /**
     * 提交当前编辑对象
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功提交当前编辑对象
     */
    submitEditObject: function submitEditObject() {
      return Boolean(Module._Editor_SubmitEditObject(this.handle));
    },

    /**
     * 是否能够进行重做操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否能够进行重做操作
     */
    canRedo: function canRedo() {
      return Boolean(Module._Editor_CanRedo(this.handle));
    },

    /**
     * 是否能进行回退操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否能够进行回退操作
     */
    canUndo: function canUndo() {
      return Boolean(Module._Editor_CanUndo(this.handle));
    },

    /**
     * 是否能够进行拷贝操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否能够进行拷贝操作
     */
    canCopy: function canCopy() {
      return Boolean(Module._Editor_CanCopy(this.handle));
    },

    /**
     * 是否能够进行剪切操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否能够进行剪切操作
     */
    canCut: function canCut() {
      return Boolean(Module._Editor_CanCut(this.handle));
    },

    /**
     * 是否能够进行粘贴操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否能够进行粘贴操作
     */
    canPaste: function canPaste() {
      return Boolean(Module._Editor_CanPaste(this.handle));
    },

    /**
     * 是否能够进行删除操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否能够进行删除操作
     */
    canDelete: function canDelete() {
      return Boolean(Module._Editor_CanDelete(this.handle));
    },

    /**
     * 拷贝操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功拷贝操作
     */
    copy: function copy() {
      return Boolean(Module._Editor_Copy(this.handle));
    },

    /**
     * 剪切操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功剪切操作
     */
    cut: function cut() {
      return Boolean(Module._Editor_Cut(this.handle));
    },

    /**
     * 粘贴操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功粘贴操作
     */
    paste: function paste() {
      return Boolean(Module._Editor_Paste(this.handle));
    },

    /**
     * 删除操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功删除操作
     */
    "delete": function _delete() {
      return Boolean(Module._Editor_Delete(this.handle));
    },

    /**
     * 重做操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功重做操作
     */
    redo: function redo() {
      return Boolean(Module._Editor_Redo(this.handle));
    },

    /**
     * 回退操作
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功回退操作
     */
    undo: function undo() {
      return Boolean(Module._Editor_Undo(this.handle));
    },

    /**
     * 编辑图层刷新操作
     * @param {Boolean} clearCache -是否清除缓存
     *
     * @memberOf Editor#
     * @returns {Boolean} 返回是否成功执行编辑图层刷新操作
     */
    refresh: function refresh(clearCache) {
      return Boolean(Module._Editor_Refresh(this.handle, clearCache));
    },
    // /**
    //  * 设置编辑对象
    //  * @param {PIEGeometry} geometry -几何对象
    //  * @memberOf Editor#
    //  */
    // setEditGeometry: function (geometry) {
    //     Module._Editor_SetEditGeometry(this.handle, geometry.getHandle());
    // },

    /**
     * 清除编辑对象
     * @memberOf GlobeEditor#
     */
    clearEditObject: function clearEditObject() {
      Module._Editor_ClearEditObject(this.handle);
    },

    /**
     * 更新编辑对象
     * @memberOf GlobeEditor#
     */
    updateEditGeometrys: function updateEditGeometrys() {
      Module._Editor_UpdateEditGeometrys(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 编辑模块
   * ---
   */

  /**
   * 三维场景编辑器操作相关函数
   * @name GlobeEditor
   *
   * @extends Editor
   */

  function PIEGlobeEditor(handle) {
    this.selectedGeometryEvent = null;
    PIEEditor.call(this, handle);
  }

  PIEGlobeEditor.prototype = Object.assign(Object.create(PIEEditor.prototype), {
    /**
     * 设置编辑图层
     * @param {PIEGlobeLayer} layer -需要编辑的图层(传null时，取消设置编辑图层)
     * @memberOf GlobeEditor#
     */
    setEditLayer: function setEditLayer(layer) {
      if (!layer) {
        Module._Globe_Editor_SetEditLayer(this.handle, null);
      } else {
        Module._Globe_Editor_SetEditLayer(this.handle, layer.getHandle());
      }
    },

    /**
     * 获取编辑图层
     *
     * @memberOf GlobeEditor#
     * @returns {PIEGlobeLayer} 返回编辑图层
     */
    getEditLayer: function getEditLayer() {
      var handle = Module._Globe_Editor_GetEditLayer(this.handle);

      if (handle) {
        return PIEGlobeLayerFactory.CreateInstance(handle);
      }
    },

    /**
     * 获取选择矢量的回调事件
     *
     * @memberOf GlobeEditor#
     * @returns {PIEEvent} 返回选择矢量的回调事件
     */
    getSelectedGeometryEvent: function getSelectedGeometryEvent() {
      if (this.selectedGeometryEvent == null) {
        this.selectedGeometryEvent = new PIEEvent();
        Module['setSelectedGeometryCallBack'](this.handle, this);
      }

      return this.selectedGeometryEvent;
    },
    selectedGeometryCallBack: function selectedGeometryCallBack(layers) {
      var array = [];

      if (layers.length > 0) {
        for (var i = 0; i < layers.length; i++) {
          var layer = PIEGlobeLayerFactory.CreateInstance(layers[i]);
          array.push(layer);
        }
      }

      this.selectedGeometryEvent.raiseEvent(array);
    } // /**
    //  * 清除编辑对象
    //  * @memberOf GlobeEditor#
    //  */
    // clearEditObject: function (){
    //     Module._Globe_Editor_ClearEditObject(this.handle);
    // },

  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 场景工具类型枚举
   * @readonly
   * @enum {String}
   */
  var PIEGlobeToolType = {
    /** 场景平移  */
    Pan: 'PanGlobeTool',

    /** 场景选择  */
    Select: 'SelectGlobeTool',

    /** 场景编辑  */
    Edit: 'EditGlobeTool',

    /** 新建点  */
    CreatePoint: 'CreatePointGlobeTool',

    /** 新建多段线  */
    CreatePolyline: 'CreatePolylineGlobeTool',

    /** 新建多边形  */
    CreatePolygon: 'CreatePolygonGlobeTool',

    /** 新建自由线  */
    CreateFreeLine: 'CreateFreeLineGlobeTool',

    /** 新建自由多边形  */
    CreateFreePolygon: 'CreateFreePolygonGlobeTool',

    /** 新建矩形 */
    CreateRectangle: 'CreateRectangleGlobeTool',

    /** 新建圆  */
    CreateCircle: 'CreateCircleGlobeTool',
    // /** 新建椭圆  */
    //CreateEllipse: 'CreateEllipseGlobeTool',

    /** 新建扇形  */
    CreateSector: 'CreateSectorGlobeTool',

    /** 新建标绘  */
    CreatePlot: 'CreatePlotGlobeTool',

    /** 模型编辑  */
    EditModel: 'EditModelGlobeTool',

    /** 模型水平移动 **/
    EditPan: 'EditPanGlobeTool',

    /** 模型垂直移动 **/
    EditHeight: 'EditHeightGlobeTool',

    /** 模型缩放 **/
    EditScale: 'EditScaleGlobeTool',

    /** 模型旋转 **/
    EditRotate: 'EditRotateGlobeTool',

    /** 长度测量  */
    MeasureLength: 'MeasureLengthGlobeTool',

    /** 面积测量  */
    MeasureArea: 'MeasureAreaGlobeTool',

    /** 角度测量  */
    MeasureAngle: 'MeasureAngleGlobeTool',
    // /** DEM分析  */
    // AnalyseDEM: 'AnalyseDEMTool',

    /** 剖面分析  */
    Profile: 'ProfileGlobeTool',

    /** 挖填方分析  */
    AnalyseExcavation: 'AnalyseExcavationTool',

    /** 雷达分析  */
    AnalysisRadar: 'AnalysisRadarTool',

    /** 天际线分析  */
    Analyse3DSkyline: 'Analyse3DSkylineTool',

    /** 日照分析  */
    Analyse3DSunshine: 'Analyse3DSunshineTool',

    /**模型点线通视*/
    Analyse3DVisibleLine: 'Analyse3DVisibleLineTool',

    /**模型点面通视*/
    Analyse3DVisibleRegion: 'Analyse3DVisibleRegionTool',

    /**地形点线通视*/
    AnalyseVisibleLine: 'AnalyseVisibleLineTool',

    /**地形点面通视*/
    AnalyseVisibleRegion: 'AnalyseVisibleRegionTool',

    /** 空间角度测量  */
    Measure3DAngle: 'Measure3DAngleGlobeTool',

    /** 空间面积测量  */
    Measure3DArea: 'Measure3DAreaGlobeTool',

    /** 空间高度测量 */
    Measure3DHeight: 'Measure3DHeightGlobeTool',

    /** 空间长度测量  */
    Measure3DLength: 'Measure3DLengthGlobeTool',

    /** 淹没分析  */
    AnalyseVisibleFlood: 'AnalyseVisibleFloodTool',
    // /** 新建模型  */
    // CreateModel: 'CreateModelGlobeTool',

    /** 方位角  */
    MeasureAzimuthAngle: 'MeasureAzimuthAngleTool',

    /** 坡度坡向  */
    SlopeAspect: 'SlopeAspectTool',

    /** 三维绘制面  */
    CreatePolygon3D: 'CreatePolygon3DGlobeTool',

    /** 三维绘制线  */
    CreatePolyline3D: 'CreatePolyline3DGlobeTool',

    /** 三维绘制点  */
    CreatePoint3D: 'CreatePoint3DGlobeTool' // /** 新建文本  */
    // CreateText: 'CreateTextGlobeTool',
    // /** 贝赛尔曲线 */
    // CreateBezier: 'CreateBezierGlobeTool',

  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * @name GlobeTool
   *
   */

  function PIEGlobeTool(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGlobeTool.prototype, {
    // /**
    //  * 获取场景工具操作ID
    //  *
    //  * @memberOf GlobeTool#
    //  * @returns {String} 返回场景工作ID
    //  * @example
    //  * let globeTool = new PIE.GlobeTool();
    //  * var actionID = globeTool.getActionID();
    //  */
    getActionID: function getActionID() {
      var strActionID = new PIEString$1(256);

      Module._GlobeTool_GetActionID(this.handle, strActionID.getHandle());

      var actionID = strActionID.toString();
      strActionID.dispose();
      return actionID;
    },

    /**
     * 获取场景工具操作状态
     *
     * @memberOf GlobeTool#
     * @returns {PIEGlobeToolStatus} 返回场景工具操作状态
     */
    getStatus: function getStatus() {
      return Module._GlobeTool_GetStatus(this.handle);
    },

    /**
     * 获取场景工具操作类型
     *
     * @memberOf GlobeTool#
     * @returns {PIEGlobeToolType} 返回场景工具操作类型
     */
    getType: function getType() {
      var strType = new PIEString$1(256);

      Module._GlobeTool_GetActionID(this.handle, strType.getHandle());

      var type = strType.toString();
      strType.dispose();
      return type;
    },

    /**
     * 设置场景工具是否可平移
     *
     * * @param {Boolean} enableTranslate -是否可平移
     * @memberOf GlobeTool#     
     */
    setEnableTranslate: function setEnableTranslate(enableTranslate) {
      Module._GlobeTool_SetEnableTranslate(this.handle, enableTranslate);
    },

    /**
     * 设置鼠标是否可以在三维地球外拖动地球
     *
     * * @param {Boolean} enable -是否可拖动
     * @memberOf GlobeTool#
     */
    setEnableFullScreenPan: function setEnableFullScreenPan(enable) {
      Module._GlobeTool_SetEnableFullScreenPan(this.handle, enable);
    },

    /**
     * 设置场景工具是否可旋转
     *
     * * @param {Boolean} enableRotate -是否可旋转
     * @memberOf GlobeTool#     
     */
    setEnableRotate: function setEnableRotate(enableRotate) {
      Module._GlobeTool_SetEnableRotate(this.handle, enableRotate);
    },

    /**
     * 设置场景工具是否可缩放
     *
     * * @param {Boolean} enableZoom -是否可缩放
     * @memberOf GlobeTool#     
     */
    setEnableZoom: function setEnableZoom(enableZoom) {
      Module._GlobeTool_SetEnableZoom(this.handle, enableZoom);
    },

    /**
     * 获取场景工具是否可旋转
     *
     * @memberOf GlobeTool#
     * @returns {Boolean} 返回场景工具是否可旋转
     */
    getEnableTranslate: function getEnableTranslate() {
      return Boolean(Module._GlobeTool_GetEnableTranslate(this.handle));
    },

    /**
    * 获取场景工具是否可平移
    *
    * @memberOf GlobeTool#
    * @returns {Boolean} 返回场景工具是否可平移
    */
    getEnableRotate: function getEnableRotate() {
      return Boolean(Module._GlobeTool_GetEnableRotate(this.handle));
    },

    /**
    * 获取场景工具是否可缩放
    *
    * @memberOf GlobeTool#
    * @returns {Boolean} 返回场景工具是否可缩放
    */
    getEnableZoom: function getEnableZoom() {
      return Boolean(Module._GlobeTool_GetEnableZoom(this.handle));
    },

    /**
     * 清除绘制结果
     *
     * @memberOf GlobeTool#
     */
    clearResult: function clearResult() {
      Module._GlobeTool_ClearResult(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景平移工具相关操作函数
   * @name CreatePanGlobeTool
   * @extends GlobeTool
   *
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.Pan);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreatePanGlobeTool(handle, autoRelease) {
    if (handle == null) {
      handle = Module._PanGlobeTool_GetHandle();
      autoRelease = true;
    }

    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePanGlobeTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {
    GetHandle: function GetHandle() {},

    /**
     * 获取军标编号
     *
     * @memberOf CreatePanGlobeTool#
     * @returns {Number} 返回军标编号
     */
    getShape: function getShape() {
      return Module._GlobeCreateTool_GetShape(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   *三维场景标绘工具操作相关函数
   * @name CreatePlotGlobeTool
   * @extends GlobeCreateTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePlot);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreatePlotGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePlotGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIECreatePanGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePlotGlobeTool.prototype = Object.assign(Object.create(PIECreatePanGlobeTool.prototype), {
    getHandle: function getHandle() {
      var handle = Module._CreatePlotGlobeTool_GetHandle(this.handle);

      if (handle) {
        return new PIECreatePlotGlobeTool(handle);
      }
    },

    /**
     * 设置军标编号
     * @param {Number} shape -军标编号
     * @memberOf CreatePlotGlobeTool#
     */
    setShape: function setShape(shape) {
      Module._CreatePlotGlobeTool_SetShape(this.handle, shape);
    },

    /**
     * 获取军标编号
     *
     * @memberOf CreatePlotGlobeTool#
     * @returns {Number} 返回军标编号
     */
    getShape: function getShape() {
      return Module._CreatePlotGlobeTool_GetShape(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 平移工具相关函数
   * @name PanGlobeTool
   * @extends GlobeTool
   */

  function PIEPanGlobeTool(handle, autoRelease) {
    if (handle == null) {
      handle = Module._PanGlobeTool_GetHandle();
      autoRelease = true;
    }

    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIEPanGlobeTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {
    // /**
    //  * 单指按下事件响应
    //  * @param {PIEVector2} point -点击位置
    //  * @param {Number} nFlags -附件标识符
    //  * @param {Number} nButton -鼠标左右键标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应单指按下事件
    //  */
    onTouchDown: function onTouchDown(point, nFlags, nButton) {
      var vcrpoint = new PIEArray(point, PIEArrayType.Float32);

      var res = Module._PanGlobeTool_OnTouchDown(this.handle, vcrpoint.getHandle(), nFlags, nButton);

      vcrpoint.dispose();
      return res;
    },
    // /**
    //  * 单指移动事件响应
    //  * @param {PIEVector2} point -点击位置
    //  * @param {Number} nFlags -附件标识符
    //  * @param {Number} nButton -鼠标左右键标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应单指移动事件
    //  */
    onTouchMove: function onTouchMove(point, nFlags, nButton) {
      var vcrpoint = new PIEArray(point, PIEArrayType.Float32);

      var res = Module._PanGlobeTool_OnTouchMove(this.handle, vcrpoint.getHandle(), nFlags, nButton);

      vcrpoint.dispose();
      return res;
    },
    // /**
    //  * 单指抬起事件响应
    //  * @param {PIEVector2} point -点击位置
    //  * @param {Number} nFlags -附件标识符
    //  * @param {Number} nButton -鼠标左右键标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应单指抬起事件
    //  */
    onTouchUp: function onTouchUp(point, nFlags, nButton) {
      var vcrpoint = new PIEArray(point, PIEArrayType.Float32);

      var res = Module._PanGlobeTool_OnTouchUp(this.handle, vcrpoint.getHandle(), nFlags, nButton);

      vcrpoint.dispose();
      return res;
    },
    // /**
    //  * 双指按下事件响应
    //  * @param {PIEVector2} first -点击位置
    //  * @param {PIEVector2} second -点击位置
    //  * @param {Number} nFlags -附件标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应双指按下事件
    //  */
    onPointerTouchDown: function onPointerTouchDown(first, second, nFlags) {
      var vcrfirst = new PIEArray(first, PIEArrayType.Float32);
      var vcrsecond = new PIEArray(second, PIEArrayType.Float32);

      var res = Module._PanGlobeTool_OnPointerTouchDown(this.handle, vcrfirst.getHandle(), vcrsecond.getHandle(), nFlags);

      vcrfirst.dispose();
      vcrsecond.dispose();
      return res;
    },
    // /**
    //  * 双指移动事件响应
    //  * @param {PIEVector2} first -点击位置
    //  * @param {PIEVector2} second -点击位置
    //  * @param {Number} nFlags -附件标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应双指移动事件
    //  */
    onPointerTouchMove: function onPointerTouchMove(first, second, nFlags) {
      var vcrfirst = new PIEArray(first, PIEArrayType.Float32);
      var vcrsecond = new PIEArray(second, PIEArrayType.Float32);

      var res = Module._PanGlobeTool_OnPointerTouchMove(this.handle, vcrfirst.getHandle(), vcrsecond.getHandle(), nFlags);

      vcrfirst.dispose();
      vcrsecond.dispose();
      return res;
    },
    // /**
    //  * 双指抬起事件响应
    //  * @param {PIEVector2} first -点击位置
    //  * @param {PIEVector2} second -点击位置
    //  * @param {Number} nTouchUp -附件标识符
    //  * @param {Number} nFlags -附件标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应双指抬起事件
    //  */
    onPointerTouchUp: function onPointerTouchUp(first, second, nTouchUp, nFlags) {
      var vcrfirst = new PIEArray(first, PIEArrayType.Float32);
      var vcrsecond = new PIEArray(second, PIEArrayType.Float32);

      var res = Module._PanGlobeTool_OnPointerTouchUp(this.handle, vcrfirst.getHandle(), vcrsecond.getHandle(), nTouchUp, nFlags);

      vcrfirst.dispose();
      vcrsecond.dispose();
      return res;
    },
    // /**
    //  * 键盘按键事件响应
    //  * @param {Number} nChar -键盘按键标识
    //  * @param {Number} nRepCnt -连续按键次数
    //  * @param {Number} nFlags -附加标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应键盘按键事件
    //  */
    onKeyDown: function onKeyDown(nChar, nRepCnt, nFlags) {
      return Module._PanGlobeTool_OnKeyDown(this.handle, nChar, nRepCnt, nFlags);
    },
    // /**
    //  * 键盘按键抬起事件响应
    //  * @param {Number} nChar -键盘按键标识
    //  * @param {Number} nRepCnt -连续按键次数
    //  * @param {Number} nFlags -附加标识符
    //  *
    //  * @memberOf PanGlobeTool#
    //  * @returns {Boolean} 返回是否成功响应键盘按键事件
    //  */
    onKeyUp: function onKeyUp(nChar, nRepCnt, nFlags) {
      return Module._PanGlobeTool_OnKeyUp(this.handle, nChar, nRepCnt, nFlags);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建几何对象中间基类相关函数
   * @name PanGeometryGlobeTool
   * @extends PanGlobeTool
   */

  function PIEPanGeometryGlobeTool(handle, autoRelease) {
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEPanGeometryGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 设置工具绘制的几何对象风格
     * @param {PIEVectorStyle} style -几何对象风格(风格对象传入后内部会进行克隆，外部必须释放传入的风格对象，否则会出现内存泄露)
     * @memberOf PanGeometryGlobeTool#
     *
     */
    setStyle: function setStyle(style) {
      if (!(style instanceof PIEVectorStyle)) {
        return;
      }

      if (this.getType() == PIEGlobeToolType.CreatePolyline || this.getType() == PIEGlobeToolType.CreatePolygon) {
        style.setLineStyle(3);
        style.setFillStyle(3);
      }

      Module._PanGeometryGlobeTool_SetStyle(this.handle, style.getHandle());
    },

    /**
     * 获取绘制几何对象风格
     *
     * @memberOf PanGeometryGlobeTool#
     * @returns {PIEVectorStyle} 返回的几何对象风格
     */
    getStyle: function getStyle() {
      var handle = Module._PanGeometryGlobeTool_GetStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   *三维场景绘图工具操作相关函数
   * @name CreateCircleGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   *  var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   globeControl.setGlobeTool(PIE.GlobeToolType.CreateCircle);
   *
   */

  function PIECreateCircleGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateCircleGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateCircleGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     *设置半径
     * @param {Number} r -半径
     * @memberOf CreateCircleGlobeTool#
     */
    setRadius: function setRadius(r) {
      Module._CreateCircleGlobeTool_SetRadius(this.handle, r);
    },

    /**
     * 获取创建的回调事件
     * @memberOf CreateCircleGlobeTool#
     * @returns {PIEEvent} 返回创建结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.CreateCallBackEvent == null) {
        this.CreateCallBackEvent = new PIEEvent();
        Module['setCreateCircleCallBack'](this.handle, this);
      }

      return this.CreateCallBackEvent;
    },
    createCircleCallBack: function createCircleCallBack(circle) {
      var geometry = PIEGeometryFactory.CreateInstance(circle);
      this.CreateCallBackEvent.raiseEvent(geometry);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 三维场景模型工具操作相关函数
   * @name CreateModelGlobeTool
   * @extends PanGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateModel);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateModelGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateModelGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateModelGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 设置风格
     * @param {PIEModelStyle} modelStyle -模型风格
     * @memberOf PIECreateModelGlobeTool#
     *
     */
    setModelStyle: function setModelStyle(modelStyle) {
      return Module._CreateModelGlobeTool_SetModelStyle(this.handle, modelStyle.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景椭圆工具操作相关函数
   * @name CreateEllipseGlobeTool
   * @extends GlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateEllipse);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreateEllipseGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateEllipseGlobeTool_Gethandle(handle);
      autoRelease = true;
    }

    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateEllipseGlobeTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 三维场景自由线工具操作相关函数
   * @name CreateFreeLineGlobeTool
   * @extends GlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateFreeLine);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreateFreeLineGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateFreeLineGlobeTool_Gethandle(handle);
      autoRelease = true;
    }

    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateFreeLineGlobeTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 三维场景自由多边形工具操作相关函数
   * @name CreateFreePolygonGlobeTool
   * @extends GlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateFreePolygon);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateFreePolygonGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateFreePolygonGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateFreePolygonGlobeTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   *
   * 三维场景点工具操作相关函数
   * @name CreatePointGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePoint);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreatePointGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePointGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePointGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取添加几何对象之前的回调事件
     *
     * @memberOf CreatePointGlobeTool#
     * @returns {PIEEvent} 返回添加几何对象之前的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.CreatePointEvent == null) {
        this.CreatePointEvent = new PIEEvent();
        Module['setCreatePointCallBack'](this.handle, this);
      }

      return this.CreatePointEvent;
    },
    createPointCallBack: function createPointCallBack(point) {
      var geometry = PIEGeometryFactory.CreateInstance(point);
      this.CreatePointEvent.raiseEvent(geometry);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景面工具操作相关函数
   * @name CreatePolygonGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePolygon);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreatePolygonGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePolygonGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePolygonGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取创建的回调事件
     * @memberOf CreatePolygonGlobeTool#
     * @returns {PIEEvent} 返回创建结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.CreateCallBackEvent == null) {
        this.CreateCallBackEvent = new PIEEvent();
        Module['setCreatePolygonCallBack'](this.handle, this);
      }

      return this.CreateCallBackEvent;
    },
    createPolygonCallBack: function createPolygonCallBack(polygon) {
      var geometry = PIEGeometryFactory.CreateInstance(polygon);
      this.CreateCallBackEvent.raiseEvent(geometry);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景矩形工具操作相关函数
   * @name CreateRectangleGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateRectangle);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateRectangleGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateRectangleGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateRectangleGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取创建的回调事件
     * @memberOf CreateRectangleGlobeTool#
     * @returns {PIEEvent} 返回创建结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.CreateCallBackEvent == null) {
        this.CreateCallBackEvent = new PIEEvent();
        Module['setCreateRectangleCallBack'](this.handle, this);
      }

      return this.CreateCallBackEvent;
    },
    createRectangleCallBack: function createRectangleCallBack(rectangle) {
      var geometry = PIEGeometryFactory.CreateInstance(rectangle);
      this.CreateCallBackEvent.raiseEvent(geometry);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 分析工具相关函数
   * @name AnalyseTool
   *
   * @extends GlobeTool
   */

  function PIEAnalyseTool(handle, autoRelease) {
    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIEAnalyseTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 淹没分析工具相关函数
   * @name AnalyseFloodTool
   *
   * @extends AnalyseTool
   */

  function PIEAnalyseFloodTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._AnalyseFloodTool_GetHandle(handle);
    }

    this.analyseOverEvent = null;
    PIEAnalyseTool.call(this, handle, autoRelease);
  }

  PIEAnalyseFloodTool.prototype = Object.assign(Object.create(PIEAnalyseTool.prototype), {
    /**
     * 获取淹没分析计算的回调事件
     * @memberOf AnalyseFloodTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.analyseOverEvent == null) {
        this.analyseOverEvent = new PIEEvent();
        Module['setFloodAnalyseOverSignal'](this.handle, this);
      }

      return this.analyseOverEvent;
    },
    analyseOverCallback: function analyseOverCallback() {
      this.analyseOverEvent.raiseEvent();
    },

    /**
     * 设置淹没高度
     * @param {Number} height -高度值
     * @memberOf AnalyseFloodTool#
     */
    setHeight: function setHeight(height) {
      Module._AnalyseFloodTool_SetFloodHeight(this.handle, height);
    },

    /**
     * 获取淹没高度
     *
     * @memberOf AnalyseFloodTool#
     * @returns {Number} 返回淹没高度
     */
    getHeight: function getHeight() {
      return Module._AnalyseFloodTool_GetFloodHeight(this.handle);
    },

    /**
     * 获取淹没面积
     *
     * @memberOf AnalyseFloodTool#
     * @returns {Number} 返回淹没面积
     */
    getArea: function getArea() {
      return Module._AnalyseFloodTool_GetFloodArea(this.handle);
    },

    /**
     * 获取淹没体积
     *
     * @memberOf AnalyseFloodTool#
     * @returns {Number} 返回淹没体积
     */
    getVolume: function getVolume() {
      return Module._AnalyseFloodTool_GetFloodVolume(this.handle);
    },

    /**
     * 获取最大高度
     *
     * @memberOf AnalyseFloodTool#
     * @returns {Number} 返回最大高度
     */
    getMaximumHeight: function getMaximumHeight() {
      return Module._AnalyseFloodTool_GetFloodMaximumHeight(this.handle);
    },

    /**
     * 获取最小高度
     *
     * @memberOf AnalyseFloodTool#
     * @returns {Number} 返回最小高度
     */
    getMinimumHeight: function getMinimumHeight() {
      return Module._AnalyseFloodTool_GetFloodMinimumHeight(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 挖填方分析工具相关函数
   * @name AnalyseExcavationTool
   *
   * @extends AnalyseTool
   */

  function PIEAnalyseExcavationTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._AnalyseExcavationTool_GetHandle(handle);
    }

    this.analyseOverEvent = null;
    PIEAnalyseTool.call(this, handle, autoRelease);
  }

  PIEAnalyseExcavationTool.prototype = Object.assign(Object.create(PIEAnalyseTool.prototype), {
    /**
     * 获取挖填方分析计算的回调事件
     * @memberOf AnalyseExcavationTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.analyseOverEvent == null) {
        this.analyseOverEvent = new PIEEvent();
        Module['setExcavationAnalyseOverSignal'](this.handle, this);
      }

      return this.analyseOverEvent;
    },
    analyseOverCallback: function analyseOverCallback() {
      this.analyseOverEvent.raiseEvent();
    },

    /**
     * 设置挖填方高度
     * @param {Number} height -高度值
     * @memberOf AnalyseExcavationTool#
     *
     */
    setExcavationBumpHeight: function setExcavationBumpHeight(height) {
      Module._AnalyseExcavationTool_SetExcavationBumpHeight(this.handle, height);
    },

    /**
     * 设置挖填方类型
     * @param {Number} type -挖填方类型(0:挖方 1:填方)
     * @memberOf AnalyseExcavationTool#
     */
    setExcavationBumpType: function setExcavationBumpType(type) {
      Module._AnalyseExcavationTool_SetExcavationBumpType(this.handle, type);
    },

    /**
     * 获取地表面积
     *
     * @memberOf AnalyseExcavationTool#
     * @returns {Number} 返回地表面积
     */
    getSurfaceArea: function getSurfaceArea() {
      return Module._AnalyseExcavationTool_GetSurfaceArea(this.handle);
    },

    /**
     * 获取挖填方体积
     *
     * @memberOf AnalyseExcavationTool#
     * @returns {Number} 返回挖填方体积
     */
    getExcavationBumpVolume: function getExcavationBumpVolume() {
      return Module._AnalyseExcavationTool_GetExcavationBumpVolume(this.handle);
    },

    /**
     * 获取地形最大高度
     *
     * @memberOf AnalyseExcavationTool#
     * @returns {Number} 返回最大高度
     */
    getTerrainMaximumHeight: function getTerrainMaximumHeight() {
      return Module._AnalyseExcavationTool_GetTerrainMaximumHeight(this.handle);
    },

    /**
     * 获取地形最小高度
     *
     * @memberOf AnalyseExcavationTool#
     * @returns {Number} 返回最小高度
     */
    getTerrainMinimumHeight: function getTerrainMinimumHeight() {
      return Module._AnalyseExcavationTool_GetTerrainMinimumHeight(this.handle);
    },

    /**
     * 清除几何对象
     * @memberOf AnalyseExcavationTool#
     */
    deleteObject: function deleteObject() {
      Module._AnalyseExcavationTool_DeleteObject(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 天际线分析工具相关函数
   * @name AnalyseSkylineTool
   *
   * @extends AnalyseTool
   */

  function PIEAnalyseSkylineTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._AnalyseSkylineTool_GetHandle(handle);
    }

    PIEAnalyseTool.call(this, handle, autoRelease);
  }

  PIEAnalyseSkylineTool.prototype = Object.assign(Object.create(PIEAnalyseTool.prototype), {
    /**
     * 设置视面是否可见
     * @param {Boolean} visible -是否可见
     * @memberOf AnalyseSkylineTool#
     */
    setRegionVisible: function setRegionVisible(visible) {
      Module._AnalyseSkylineTool_SetRegionVisible(this.handle, visible);
    },

    /**
     * 设置相机是否可见
     * @param {Boolean} visible -是否可见
     * @memberOf AnalyseSkylineTool#
     */
    setCameraVisible: function setCameraVisible(visible) {
      Module._AnalyseSkylineTool_SetCameraVisible(this.handle, visible);
    },

    /**
     * 绘制
     * @memberOf AnalyseSkylineTool#
     */
    draw: function draw() {
      Module._AnalyseSkylineTool_Draw(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 地形剖面分析工具相关函数
   * @name ProfileGlobeTool
   * @extends PanGlobeTool
   */

  function PIEProfileGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._ProfileGlobeTool_GetHandle(handle);
    }

    this.calculateOverEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEProfileGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取地形剖面分析计算的回调事件
     *
     * @memberOf ProfileGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.calculateOverEvent == null) {
        this.calculateOverEvent = new PIEEvent();
        Module['setProfileCalculateOverSignal'](this.handle, this);
      }

      return this.calculateOverEvent;
    },
    calculateOverCallback: function calculateOverCallback() {
      this.calculateOverEvent.raiseEvent();
    },

    /**
     * 获取高度值数据
     *
     * @memberOf ProfileGlobeTool#
     * @returns {Array} 返回高度值数据
     */
    getAltitudeData: function getAltitudeData() {
      var arrayData = new PIEArray(90, PIEArrayType.Float64);

      Module._PIE_ProfileGlobeTool_GetAltitudeData(this.handle, arrayData.getHandle());

      arrayData.updateData();
      var data = arrayData.toArray();
      arrayData.dispose();
      var altitudeData = [];
      var vecData = null;

      for (var i = 0; i < 90; i += 3) {
        vecData = new PIEVector3(data[i], data[i + 1], data[i + 2]);
        altitudeData.push(vecData);
      }

      return altitudeData;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   *
   * 三维场景线工具操作相关函数
   * @name CreatePolylineGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePolyline);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreatePolylineGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePolylineGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePolylineGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取创建的回调事件
     * @memberOf CreatePolylineGlobeTool#
     * @returns {PIEEvent} 返回创建结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.CreatePolylineEvent == null) {
        this.CreatePolylineEvent = new PIEEvent();
        Module['setCreatePolylineCallBack'](this.handle, this);
      }

      return this.CreatePolylineEvent;
    },
    createPolylineCallBack: function createPolylineCallBack(line) {
      var geometry = PIEGeometryFactory.CreateInstance(line);
      this.CreatePolylineEvent.raiseEvent(geometry);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 地表测距分析工具相关函数
   * @name MeasureLengthGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasureLengthGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureLengthGlobeTool_GetHandle(handle);
    }

    this.measureLengthEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasureLengthGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取地表测距计算的回调事件
     * @memberOf MeasureLengthGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measureLengthEvent == null) {
        this.measureLengthEvent = new PIEEvent();
        Module['setMeasureLengthCallBack'](this.handle, this);
      }

      return this.measureLengthEvent;
    },
    measureLengthCallback: function measureLengthCallback(length) {
      this.measureLengthEvent.raiseEvent(length);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 地表面积分析工具相关函数
   * @name MeasureAreaGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasureAreaGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureAreaGlobeTool_GetHandle(handle);
    }

    this.measureAreaEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasureAreaGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取地表面积计算的回调事件
     * @memberOf MeasureAreaGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measureAreaEvent == null) {
        this.measureAreaEvent = new PIEEvent();
        Module['setMeasureAreaCallBack'](this.handle, this);
      }

      return this.measureAreaEvent;
    },
    measureAreaCallback: function measureAreaCallback(area) {
      this.measureAreaEvent.raiseEvent(area);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 测量方位角分析工具相关函数
   * @name MeasureAzimuthAngleTool
   * @extends PanGlobeTool
   */

  function PIEMeasureAzimuthAngleTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureAzimuthAngleTool_GetHandle(handle);
    }

    this.measureAzimuthAngleEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasureAzimuthAngleTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取测量方位角计算的回调事件
     * @memberOf MeasureAzimuthAngleTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measureAzimuthAngleEvent == null) {
        this.measureAzimuthAngleEvent = new PIEEvent();
        Module['setMeasureAzimuthAngleCallBack'](this.handle, this);
      }

      return this.measureAzimuthAngleEvent;
    },
    measureAzimuthAngleCallback: function measureAzimuthAngleCallback(area) {
      this.measureAzimuthAngleEvent.raiseEvent(area);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 地表角度分析工具相关函数
   * @name MeasureAngleGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasureAngleGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureAngleGlobeTool_GetHandle(handle);
    }

    this.measureAngleEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasureAngleGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取地表角度计算的回调事件
     * @memberOf MeasureAngleGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measureAngleEvent == null) {
        this.measureAngleEvent = new PIEEvent();
        Module['setMeasureAngleCallBack'](this.handle, this);
      }

      return this.measureAngleEvent;
    },
    measureAngleCallback: function measureAngleCallback(angle) {
      this.measureAngleEvent.raiseEvent(angle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 坡度坡向分析工具相关函数
   * @name SlopeAspectTool
   * @extends PanGlobeTool
   */

  function PIESlopeAspectTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._SlopeAspectTool_GetHandle(handle);
    }

    this.slopeAspectEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIESlopeAspectTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取坡度坡向计算的回调事件
     * @memberOf SlopeAspectTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.slopeAspectEvent == null) {
        this.slopeAspectEvent = new PIEEvent();
        Module['setSlopeAspectCallBack'](this.handle, this);
      }

      return this.slopeAspectEvent;
    },
    slopeAspectCallback: function slopeAspectCallback(area) {
      this.slopeAspectEvent.raiseEvent(area);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景面工具操作相关函数
   * @name CreatePolygon3DGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePolygon3D);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreatePolygon3DGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePolygon3DGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePolygon3DGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取创建面的回调事件
     * @memberOf CreatePolygon3DGlobeTool#
     * @returns {PIEEvent} 返回创建面结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.createPolygon3DEvent == null) {
        this.createPolygon3DEvent = new PIEEvent();
        Module['setCreatePolygon3DCallBack'](this.handle, this);
      }

      return this.createPolygon3DEvent;
    },
    createPolygon3DCallback: function createPolygon3DCallback(area, Status) {
      this.createPolygon3DEvent.raiseEvent(area, Status);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 空间长度分析工具相关函数
   * @name Measure3DLengthGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasure3DLengthGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureOSGBLengthGlobeTool_GetHandle(handle);
    }

    this.measure3DLengthEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasure3DLengthGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取空间长度计算的回调事件
     * @memberOf Measure3DLengthGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measure3DLengthEvent == null) {
        this.measure3DLengthEvent = new PIEEvent();
        Module['setMeasureOSGBLengthCallBack'](this.handle, this);
      }

      return this.measure3DLengthEvent;
    },
    measureOSGBLengthCallback: function measureOSGBLengthCallback(length) {
      this.measure3DLengthEvent.raiseEvent(length);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 空间高度分析工具相关函数
   * @name Measure3DHeightGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasure3DHeightGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureOSGBHeightGlobeTool_GetHandle(handle);
    }

    this.measure3DHeightEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasure3DHeightGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取空间高度计算的回调事件
     * @memberOf Measure3DHeightGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measure3DHeightEvent == null) {
        this.measure3DHeightEvent = new PIEEvent();
        Module['setMeasureOSGBHeightCallBack'](this.handle, this);
      }

      return this.measure3DHeightEvent;
    },
    measureOSGBHeightCallback: function measureOSGBHeightCallback(height) {
      this.measure3DHeightEvent.raiseEvent(height);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 空间面积分析工具相关函数
   * @name Measure3DAreaGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasure3DAreaGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureOSGBAreaGlobeTool_GetHandle(handle);
    }

    this.measure3DAreaEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasure3DAreaGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取空间面积计算的回调事件
     * @memberOf Measure3DAreaGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measure3DAreaEvent == null) {
        this.measure3DAreaEvent = new PIEEvent();
        Module['setMeasureOSGBAreaCallBack'](this.handle, this);
      }

      return this.measure3DAreaEvent;
    },
    measureOSGBAreaCallback: function measureOSGBAreaCallback(area) {
      this.measure3DAreaEvent.raiseEvent(area);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 空间角度分析工具相关函数
   * @name Measure3DAngleGlobeTool
   * @extends PanGlobeTool
   */

  function PIEMeasure3DAngleGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._MeasureOSGBAngleGlobeTool_GetHandle(handle);
    }

    this.measure3DAngleEvent = null;
    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIEMeasure3DAngleGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 获取空间角度计算的回调事件
     * @memberOf Measure3DAngleGlobeTool#
     * @returns {PIEEvent} 返回计算结束的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.measure3DAngleEvent == null) {
        this.measure3DAngleEvent = new PIEEvent();
        Module['setMeasureOSGBAngleCallBack'](this.handle, this);
      }

      return this.measure3DAngleEvent;
    },
    measureOSGBAngleCallback: function measureOSGBAngleCallback(Angle) {
      this.measure3DAngleEvent.raiseEvent(Angle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   *
   * 三维场景线工具操作相关函数
   * @name CreatePolyline3DGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePolyline3D);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreatePolyline3DGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePolyline3DGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePolyline3DGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取创建线的回调事件
     * @memberOf CreatePolyline3DGlobeTool#
     * @returns {PIEEvent} 返回创建线结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.createPolyline3DEvent == null) {
        this.createPolyline3DEvent = new PIEEvent();
        Module['setCreatePolyline3DCallBack'](this.handle, this);
      }

      return this.createPolyline3DEvent;
    },
    createPolyline3DCallback: function createPolyline3DCallback(area, Status) {
      this.createPolyline3DEvent.raiseEvent(area, Status);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   *
   * 三维场景点工具操作相关函数
   * @name CreatePoint3DGlobeTool
   * @extends PIEPanGeometryGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreatePoint3D);
   * var globeTool = globeControl.getGlobeTool();
   *
   */

  function PIECreatePoint3DGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreatePoint3DGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGeometryGlobeTool.call(this, handle, autoRelease);
  }

  PIECreatePoint3DGlobeTool.prototype = Object.assign(Object.create(PIEPanGeometryGlobeTool.prototype), {
    /**
     * 获取创建点的回调事件
     * @memberOf CreatePoint3DGlobeTool#
     * @returns {PIEEvent} 返回创建点结束后的回调事件
     */
    getResultEvent: function getResultEvent() {
      if (this.CreatePoint3DEvent == null) {
        this.CreatePoint3DEvent = new PIEEvent();
        Module['setCreatePoint3DCallBack'](this.handle, this);
      }

      return this.CreatePoint3DEvent;
    },
    CreatePoint3DCallback: function CreatePoint3DCallback(area, Status) {
      this.CreatePoint3DEvent.raiseEvent(area, Status);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建绘制扇形工具操作相关函数
   * @name CreateSectorGlobeTool
   * @extends PanGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateSector);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateSectorGlobeTool(handle, autoRelease) {
    if (handle != null) {
      Module._CreateSectorGlobeTool_GetHandle(handle);

      autoRelease = true;
    }

    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateSectorGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 设置角半径
     * @param {Number} a -角
     * @param {Number} r -半径
     * @memberOf CreateSectorGlobeTool#
     */
    SetAngleRadius: function SetAngleRadius(a, r) {
      return Module._CreateSectorGlobeTool_SetAngleRadius(this.handle, a, r);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景文本工具操作相关函数
   * @name CreateTextGlobeTool
   * @extends PanGlobeTool
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateText);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateTextGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateTextGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateTextGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 贝赛尔曲线工具操作相关函数
   * @name CreateBezierGlobeTool
   * @extends PanGlobeTool
   *
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateBezier);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateBezierGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateBezierGlobeTool_Gethandle(handle);
      autoRelease = true;
    }

    PIEPanGlobeTool.call(this, handle, autoRelease);
  }

  PIECreateBezierGlobeTool.prototype = Object.assign(Object.create(PIEPanGlobeTool.prototype), {
    /**
     * 设置曲线风格
     * @param {PIEVectorStyle} vectorGeoStyle -地理风格
     * @param {PIEVectorStyle} vectorPointStyle -点符号类型
     */
    setStyle: function setStyle(vectorGeoStyle, vectorPointStyle) {
      Module._CreateBezierGlobeTool_SetStyle(this.handle, vectorGeoStyle.getHandle(), vectorPointStyle.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 编辑工具相关函数
   * @name PIEEditGlobeTool
   * @extends EditGlobeTool
   */

  function PIEEditGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._EditGlobeTool_GetHandle(handle);
    }

    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIEEditGlobeTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {});

  function PIECreateToolFactory() {}

  Object.assign(PIECreateToolFactory.prototype, {});

  PIECreateToolFactory.CreateInstance = function (hGlobeTool) {
    var globeTool = new PIEGlobeTool(hGlobeTool);
    var globeType = globeTool.getType();

    if (globeType == PIE.GlobeToolType.CreateCircle) {
      return new PIECreateCircleGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePlot) {
      return new PIECreatePlotGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateModel) {
      return new PIECreateModelGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Pan) {
      return new PIECreatePanGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.AnalyseDEM) ; else if (globeType == PIE.GlobeToolType.AnalyseExcavation) {
      return new PIEAnalyseExcavationTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateEllipse) {
      return new PIECreateEllipseGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Analyse3DSkyline) {
      return new PIEAnalyseSkylineTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Analyse3DSunshine) ; else if (globeType == PIE.GlobeToolType.None) ; else if (globeType == PIE.GlobeToolType.Select) {
      return new PIECreateSectorGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Edit) {
      return new PIEEditGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePoint) {
      return new PIECreatePointGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePolyline) {
      return new PIECreatePolylineGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePolygon) {
      return new PIECreatePolygonGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateFreeLine) {
      return new PIECreateFreeLineGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateFreePolygon) {
      return new PIECreateFreePolygonGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateRectangle) {
      return new PIECreateRectangleGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.EditModel) {
      return new PIECreateModelGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.MeasureLength) {
      return new PIEMeasureLengthGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.MeasureArea) {
      return new PIEMeasureAreaGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.MeasureAngle) {
      return new PIEMeasureAngleGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Profile) {
      return new PIEProfileGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Analyse3DVisibleLine) ; else if (globeType == PIE.GlobeToolType.Analyse3DVisibleRegion) ; else if (globeType == PIE.GlobeToolType.Measure3DAngle) {
      return new PIEMeasure3DAngleGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Measure3DArea) {
      return new PIEMeasure3DAreaGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Measure3DHeight) {
      return new PIEMeasure3DHeightGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.Measure3DLength) {
      return new PIEMeasure3DLengthGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.AnalyseVisibleFlood) {
      return new PIEAnalyseFloodTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.AnalyseVisibleLine) ; else if (globeType == PIE.GlobeToolType.AnalyseVisibleRegion) ; else if (globeType == PIE.GlobeToolType.MeasureAzimuthAngle) {
      return new PIEMeasureAzimuthAngleTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.SlopeAspect) {
      return new PIESlopeAspectTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePolygon3D) {
      return new PIECreatePolygon3DGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePolyline3D) {
      return new PIECreatePolyline3DGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreatePoint3D) {
      return new PIECreatePoint3DGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateSector) {
      return new PIECreateSectorGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateText) {
      return new PIECreateTextGlobeTool(hGlobeTool);
    } else if (globeType == PIE.GlobeToolType.CreateBezier) {
      return new PIECreateBezierGlobeTool(hGlobeTool);
    }

    return null;
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 编辑模块
   * ---
   */

  /**
   * 地图选择器操作相关函数
   * @name Selector
   *
   */

  function PIESelector(handle, autoReleaase) {
    this.handle = handle;
    this.autoRelease = autoReleaase;
  }

  Object.assign(PIESelector.prototype, {
    /**
     * 设置选择容限
     * @param {Number} tolerance -选择容限
     * @memberOf Selector#
     *
     * @example
     * let selector = new PIE.Selector();
     * selector.setTolerance(tolerance);
     */
    setTolerance: function setTolerance(tolerance) {
      Module._Selector_SetTolerance(this.handle, tolerance);
    },

    /**
     * 获取选择容限
     *
     * @memberOf Selector#
     * @returns {Number} 返回选择容限
     *
     */
    getTolerance: function getTolerance() {
      return Module._Selector_GetTolerance(this.handle);
    },

    /**
     * 设置选择几何风格
     * @param {PIEVectorStyle} style -几何对象风格
     * @memberOf Selector#
     *
     */
    setVectorStyle: function setVectorStyle(style) {
      Module._Selector_SetVectorStyle(this.handle, style.getHandle());
    },

    /**
     * 获取选择几何风格
     *
     * @memberOf Selector#
     * @returns {PIEVectorStyle} 返回的几何对象风格
     *
     */
    getVectorStyle: function getVectorStyle() {
      var handle = Module._Selector_GetVectorStyle(this.handle);

      if (handle) {
        return new PIEVectorStyle(handle);
      }
    },

    /**
     * 设置选择文本风格
     * @param {PIETextStyle} style -几何对象风格
     * @memberOf Selector#
     *
     */
    setTextStyle: function setTextStyle(style) {
      Module._Selector_SetTextStyle(this.handle, style.getHandle());
    },

    /**
     * 获取选择文本风格
     *
     * @memberOf Selector#
     * @returns {PIETextStyle} 返回的文本对象风格
     *
     */
    getTextStyle: function getTextStyle() {
      var handle = Module._Selector_GetTextStyle(this.handle);

      if (handle) {
        return new PIETextStyle(handle);
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维场景控制器
   * @param {object} options -
   * @param {Boolean} options.antialias -是否抗锯齿(默认为false)
   * @param {String} options.canvas -画布(必填)
   * @param {Boolean} options.cameraSmooth -是否需要相机缓冲效果(默认为false)
   * @param {PIEDimensionMode} options.dimensionMode -维度模式(PIE.DimensionMode.D3D)
   * @param {PIESceneMode} options.sceneMode -场景模式(默认为PIE.SceneMode.Sphere)
   * @param {Boolean} options.autoProjection -是否自动转换地图投影(默认为true)
   * @param {Number} options.pixelRatio -当前显示设备的物理像素分辨率与CSS像素分辨率之比(默认为1)
   * @param {Boolean} options.enableFarClipping -是否开启远裁剪面(默认为false)
   * @param {Boolean} options.tileLevelSize -瓦片缓存层级(默认为5)
   * @param {Boolean} options.tileBufferRadius -瓦片缓存半径(默认为3)
   * @param {Boolean} options.preserveDrawingBuffer -设置为true时,表示在绘图完成后保留绘图缓冲区,默认值为false
   *
   * @name GlobeControl
   * @class GlobeControl
   *  三维场景控制器操作函数
   *
   */

  function PIEGlobeControl(options) {
    this.options = options;
    this.preRender = new PIEEvent();
    this.postRender = new PIEEvent();
    this.preOnTouchUp = new PIEEvent();
    this.postOnTouchUp = new PIEEvent();
    this.bDisposed = false;

    window.canvasContextListener = function (e) {
      alert('WebGL context lost.');
      e.preventDefault();
    };

    this.canvas = document.getElementById(options.canvas);

    if (!options.canvas || !this.canvas) {
      throw new Error('PIE.GlobeControl: input canvas is not exist.');
    }

    this.context = this.canvas.getContext(options.webgl2 ? "webgl2" : "webgl", {
      antialias: options.antialias != null ? options.antialias : false,
      depth: options.depth != null ? options.depth : true,
      stencil: options.stencil != null ? options.stencil : true,
      preserveDrawingBuffer: options.preserveDrawingBuffer != null ? options.preserveDrawingBuffer : false
    });

    if (!options.webgl2) {
      this.context.getExtension('WEBGL_depth_texture');
      this.context.getExtension('OES_texture_float');
      this.context.getExtension('OES_standard_derivatives');
      this.context.getExtension('OES_element_index_uint');
      this.context.getExtension('ANGLE_instanced_arrays');
    }

    this.handle = Module._GlobeControl_Create(options.dimensionMode != null ? options.dimensionMode : PIEDimensionMode.D3D);

    if (this.handle) {
      var hGlobeEditor = Module._GlobeControl_GetGlobeEditor(this.handle);

      this._globeEditor = new PIEGlobeEditor(hGlobeEditor);
    }

    if (options.tileLevelSize) {
      this.getGlobe().setTileLevelSize(options.tileLevelSize);
    }

    if (options.tileBufferRadius) {
      this.getGlobe().setTileBufferRadius(options.tileBufferRadius);
    }

    this.onCreate(options.canvas, options.antialias != null ? options.antialias : false, options.webgl2 != null ? options.webgl2 : false);
    this.canvasWidth = 0;
    this.canvasHeight = 0;
    this.pixelRatio = options.pixelRatio != null ? options.pixelRatio : 1;
    this.onSize(true);
    this.setSceneMode(options.sceneMode != null ? options.sceneMode : PIESceneMode.Sphere);
    this.getGlobe().setAutoProjection(options.autoProjection != null ? options.autoProjection : true);
    this.getGlobe().getOcean().setVisible(false);
    this.getGlobe().getGridLine().setVisible(false);
    var worldCamera = this.getGlobe().getWorldCamera();
    worldCamera.setSmooth(options.cameraSmooth != null ? options.cameraSmooth : false);
    worldCamera.setEnableFarClipping(options.enableFarClipping != null ? options.enableFarClipping : false);
    var date = null;

    if (options.date != null) {
      date = options.date;
    } else {
      date = new Date();
      date.setHours(6);
    }

    var sunLight = this.getGlobe().getSunLight();
    sunLight.setTime(date);
    this.button = 0;
    this.buttonRealseFlag = 0;
    this.ignoreMouseEvents = false;
    var that = this;

    this.canvas.onclose = function onClose(e) {
      that.onDestroy();
    };

    this.canvas.onmousedown = function onMouseDown(e) {
      if (that.ignoreMouseEvents) {
        return;
      }

      that.buttonRealseFlag = 1;
      e.preventDefault();
      e.stopPropagation();
      that.onMouseDown(e);
    };

    this.canvas.onmouseup = function onMouseUp(e) {
      if (that.ignoreMouseEvents) {
        return;
      }

      that.buttonRealseFlag = 0;
      that.onMouseUp(e);
    };

    this.canvas.onmousemove = function onMouseMove(e) {
      if (that.ignoreMouseEvents) {
        return;
      }

      e.preventDefault();
      e.stopPropagation();
      that.onMouseMove(e);
    };

    if (navigator.userAgent.indexOf("Firefox") > -1) {
      document.body.addEventListener('DOMMouseScroll', function (e) {
        e.preventDefault();
        e.stopPropagation();
        that.onMouseWheel(e);
      }, false);
    } else {
      this.canvas.onmousewheel = function onMouseWheel(e) {
        e.preventDefault();
        e.stopPropagation();
        that.onMouseWheel(e);
      };
    }

    this.canvas.addEventListener('webglcontextlost', window.canvasContextListener, false);
    this.canvas.addEventListener('webglcontextrestored', function (e) {
      alert('WebGL context restored.');
    }, false);
    this.canvas.addEventListener('mouseleave', function (e) {
      if (that.buttonRealseFlag) {
        that.buttonRealseFlag = 0;
        that.onMouseUp(e);
      }
    });
    this.exaggeration = 1;
    window.addEventListener('resize', function () {
      that.onSize();
    }, false);
  }

  Object.assign(PIEGlobeControl.prototype, {
    /**
     * 忽略鼠标事件
     * @param {Boolean} ignore -反选
     * @memberOf GlobeControl#
     *
     */
    ignoreMouseEvent: function ignoreMouseEvent(ignore) {
      this.ignoreMouseEvents = ignore;
    },
    removeAllCanvasListener: function removeAllCanvasListener() {
      this.canvas.removeEventListener('webglcontextlost', window.canvasContextListener);
    },

    /**
     * 删除三维控制对象
     * @memberOf GlobeControl#
     */
    dispose: function dispose() {
      if (this.handle) {
        //清除canvas的监听事件
        this.removeAllCanvasListener();
        this.makeCurrent();
        this.onDestroy();

        Module._GlobeControl_Delete(this.handle);

        this.doneCurrent();
        this.wglContext = null;
        this.handle = null;
        this.ignoreMouseEvents = true;
      }
    },

    /**
     * 获取绘制地图窗口前事件函数
     * @memberOf GlobeControl#
     * @returns {PIEEvent} 成功返回渲染前事件，失败返回NULL
     */
    getPreRender: function getPreRender() {
      return this.preRender;
    },

    /**
     * 获取绘制地图窗口后事件函数
     * @memberOf GlobeControl#
     * @returns {PIEEvent} 成功返回渲染后事件，失败返回NULL
     */
    getPostRender: function getPostRender() {
      return this.postRender;
    },
    getPreOnTouchUp: function getPreOnTouchUp() {
      return this.preOnTouchUp;
    },
    getPostOnTouchUp: function getPostOnTouchUp() {
      return this.postOnTouchUp;
    },
    getCanvas: function getCanvas() {
      return this.canvas;
    },
    getContext: function getContext() {
      return this.context;
    },

    /**
     * 获取三维场景对象
     *
     * @memberOf GlobeControl#
     * @returns {PIEGlobe} 成功返回场景对象，失败返回NULL
     *
     */
    getGlobe: function getGlobe() {
      var hGlobe = Module._GlobeControl_GetGlobe(this.handle);

      if (hGlobe) {
        var globe = new PIEGlobe(hGlobe);

        if (this.pixelRatio != 1) {
          globe.setPixelRatio(this.pixelRatio);
        }

        return globe;
      }

      return null;
    },

    /**
     * Window 接口的devicePixelRatio返回当前显示设备的物理像素分辨率与CSS像素分辨率之比。
     * 此值也可以解释为像素大小的比率：一个CSS像素的大小与一个物理像素的大小。
     * 简单来说，它告诉浏览器应使用多少屏幕实际像素来绘制单个CSS像素。
     * 当处理标准显示器与HiDPI或Retina显示器之间的差异时，这很有用，后者使用更多的屏幕像素绘制相同的对象，从而获得更清晰的图像
     *
     * @param pixelRatio -当前显示设备的物理像素分辨率与CSS像素分辨率之比
     * @memberOf GlobeControl#
     *
     */
    setPixelRatio: function setPixelRatio(pixelRatio) {
      if (pixelRatio === undefined) return;
      this.pixelRatio = pixelRatio;
      this.onSize(true);
    },

    /**
     * 获取屏幕分辨率
     *
     * @memberOf GlobeControl#
     * @returns {pixelRatio} 返回屏幕分辨率参数
     *
     */
    getPixelRatio: function getPixelRatio() {
      return this.pixelRatio;
    },

    /**
     * 设置场景模式
     * @param {PIESceneMode} mode -场景模式
     * @memberOf GlobeControl#
     *
     */
    setSceneMode: function setSceneMode(mode) {
      Module._GlobeControl_SetSceneMode(this.handle, mode);
    },

    /**
     * 获取场景模式
     *
     * @memberOf GlobeControl#
     * @returns {PIESceneMode} 返回场景模式
     *
     */
    getSceneMode: function getSceneMode() {
      return Module._GlobeControl_GetSceneMode(this.handle);
    },

    /**
     * 设置用户操作类型
     * @param {PIEGlobeToolType} globeTool -用户操作类型
     * @memberOf GlobeControl#
     *
     */
    setGlobeTool: function setGlobeTool(globeTool) {
      var strGlobeTool = new PIEString$1(globeTool);

      Module._GlobeControl_SetGlobeTool(this.handle, strGlobeTool.getHandle());

      strGlobeTool.dispose();
    },

    /**
     * 获取用户操作类型名称
     * @memberOf GlobeControl#
     * @returns {String} 返回用户操作类型名称
     *
     */
    getGlobeToolName: function getGlobeToolName() {
      var strGlobeTool = new PIEString$1(32);

      Module._GlobeControl_GetGlobeTool(this.handle, strGlobeTool.getHandle());

      var globeTool = strGlobeTool.toString();
      strGlobeTool.dispose();
      return globeTool;
    },

    /**
     * 获取用户操作类型
     * @memberOf GlobeControl#
     * @returns {PIEGlobeTool} 返回用户当前指定工具对象
     *
     */
    getGlobeTool: function getGlobeTool() {
      var hGlobeTool = Module._GlobeControl_GetGlobeToolHandle(this.handle);

      return PIECreateToolFactory.CreateInstance(hGlobeTool);
    },

    /**
     * 创建地图窗口对象
     * @param {String} id -地图窗口对象ID
     * @param {Boolean} antialias -是否抗锯齿
     * @param {Boolean} webgl2 -是否为webgl2
     *
     * @memberOf GlobeControl#
     * @returns {Boolean} 返回创建的地图窗口对象
     */
    onCreate: function onCreate(id, antialias, webgl2) {
      var strID = new PIEString$1(id);

      var result = Module._GlobeControl_OnCreate(this.handle, strID.getHandle(), antialias, webgl2);

      strID.dispose();
      this.wglContext = Module._emscripten_webgl_do_get_current_context();
      return Boolean(result);
    },

    /**
     * 销毁地图窗口
     * @memberOf GlobeControl#
     * @returns {Boolean} 成功返回true，失败返回false
     *
     */
    onDestroy: function onDestroy() {
      var result = Module._GlobeControl_OnDestroy(this.handle);

      return result;
    },

    /**
     * 激活webgl上下文环境
     * @memberOf GlobeControl#
     *
     */
    makeCurrent: function makeCurrent() {
      if (this.wglContext != null) {
        Module._emscripten_webgl_make_context_current(this.wglContext);
      }
    },

    /**
     * 取消激活webgl上下文环境
     * @memberOf GlobeControl#
     *
     */
    doneCurrent: function doneCurrent() {
      if (this.wglContext != null) {
        Module._emscripten_webgl_make_context_current(null);
      }
    },

    /**
     * 场景窗口大小自动变化
     * @memberOf GlobeControl#
     * @param {Boolean} updateStyle -是否更新Canvas的Style属性
     * @returns {Boolean} 成功返回true，否则返回false
     */
    onSize: function onSize(updateStyle) {
      if (!this.handle) {
        return false;
      }

      var canvasWidth = this.canvas.clientWidth * this.pixelRatio;
      var canvasHeight = this.canvas.clientHeight * this.pixelRatio;

      if (canvasWidth != this.canvasWidth || canvasHeight != this.canvasHeight) {
        if (updateStyle || this.pixelRatio != 1) ;

        this.canvasWidth = canvasWidth;
        this.canvasHeight = canvasHeight;
        this.canvas.width = this.canvasWidth;
        this.canvas.height = this.canvasHeight;
        return this.onSizeChanged(this.canvas.width, this.canvas.height, true);
      }

      return true;
    },

    /**
     * 改变场景窗口大小
     * @memberOf GlobeControl#
     * @param {Number} width -窗口宽度
     * @param {Number} height -窗口高度
     * @param {Boolean} refresh -是否刷新场景
     * @returns {Boolean} 成功返回true，否则返回false
     */
    onSizeChanged: function onSizeChanged(width, height, refresh) {
      this.makeCurrent();
      var array = new PIEArray([0, 0, width, height], PIEArrayType.Int32);

      var result = Module._GlobeControl_OnSize(this.handle, array.getHandle(), refresh);

      array.dispose();
      return Boolean(result);
    },

    /**
     * 绘制地图窗口
     * @param {Number} time -每一帧的间隔时间
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 如果成功返回true，否则返回false
     */
    onRender: function onRender(time) {
      if (this.handle) {
        this.onSize();
        this.preRender.raiseEvent(this, time);
        this.makeCurrent();

        var result = Module._GlobeControl_OnRender(this.handle);

        this.postRender.raiseEvent(this, time);
        return Boolean(result);
      }

      return false;
    },

    /**
     * 绘制场景深度图
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 如果绘制成功返回true，否则返回false
     */
    onRenderDepth: function onRenderDepth() {
      this.makeCurrent();

      var result = Module._GlobeControl_OnRenderDepth(this.handle);

      this.doneCurrent();
      return Boolean(result);
    },

    /**
     * 设置锁定地图窗口
     * @memberOf GlobeControl#
     * @param {Boolean} lock -是否锁定
     */
    setLock: function setLock(lock) {
      Module._GlobeControl_SetLock(this.handle, lock);
    },

    /**
     * 判断地图窗口是否锁定
     * @memberOf GlobeControl#
     * @returns {Boolean} 如果锁定返回true，否则返回false
     */
    getLock: function getLock() {
      return Boolean(Module._GlobeControl_GetLock(this.handle));
    },

    /**
     * 鼠标滚轮事件响应
     * @param {Number} x -点击位置，x
     * @param {Number} y -点击位置，y
     * @param {Number} delta -标识鼠标滚轮滚动方向
     * @param {Number} flags -附件标识符
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回是否成功响应鼠标滚轮事件
     *
     */
    onTouchWheel: function onTouchWheel(x, y, delta, flags) {
      this.makeCurrent();

      Module._GlobeControl_OnTouchWheel(this.handle, x, y, delta, flags);
    },

    /**
     * 单指按下事件响应
     * @param {Number} x -点击位置，x
     * @param {Number} y -点击位置，y
     * @param {Number} flags -附件标识符
     * @param {Number} button -鼠标左右键标识符
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回是否成功响应单指按下事件
     *
     */
    onTouchDown: function onTouchDown(x, y, flags, button) {
      this.makeCurrent();

      Module._GlobeControl_OnTouchDown(this.handle, x, y, flags, button);
    },

    /**
     * 单指移动事件响应
     * @param {Number} x -点击位置，x
     * @param {Number} y -点击位置，y
     * @param {Number} flags -附件标识符
     * @param {Number} button -鼠标左右键标识符
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回是否成功响应单指移动事件
     *
     */
    onTouchMove: function onTouchMove(x, y, flags, button) {
      this.makeCurrent();

      Module._GlobeControl_OnTouchMove(this.handle, x, y, flags, button);
    },

    /**
     * 单指抬起事件响应
     * @param {Number} x -点击位置，x
     * @param {Number} y -点击位置，y
     * @param {Number} flags -附件标识符
     * @param {Number} button -鼠标左右键标识符
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回是否成功响应单指抬起事件
     *
     */
    onTouchUp: function onTouchUp(x, y, flags, button) {
      this.preOnTouchUp.raiseEvent(x, y);
      this.makeCurrent();

      var res = Module._GlobeControl_OnTouchUp(this.handle, x, y, flags, button);

      this.postOnTouchUp.raiseEvent(x, y);
      return res;
    },

    /**
     * 键盘按键事件响应
     * @param {Number} char -键盘按键标识
     * @param {Number} repCnt -连续按键次数
     * @param {Number} flags -附加标识符
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回是否成功响应键盘按键事件
     *
     */
    onKeyDown: function onKeyDown(_char, repCnt, flags) {
      this.makeCurrent();

      Module._GlobeControl_OnKeyDown(this.handle, _char, repCnt, flags);
    },

    /**
     * 键盘按键抬起事件响应
     * @param {Number} char -键盘按键标识
     * @param {Number} repCnt -连续按键次数
     * @param {Number} flags -附加标识符
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回是否成功响应键盘按键事件
     *
     */
    onKeyUp: function onKeyUp(_char2, repCnt, flags) {
      this.makeCurrent();

      Module._GlobeControl_OnKeyUp(this.handle, _char2, repCnt, flags);
    },

    /**
     * 获取鼠标位置
     * @param {Object} event -
     * @param {Number} event.clientX -返回触发鼠标事件时，鼠标指针相对于当前窗口的水平坐标（根据客户端区域）
     * @param {Number} event.clientY -返回触发鼠标事件时，鼠标指针相对于当前窗口的垂直坐标（根据客户端区域）
     * @memberOf GlobeControl#
     *
     * @returns {Object} 返回鼠标位置 {x, y}
     *
     */
    getMousePosition: function getMousePosition(event) {
      var rect = this.canvas.getBoundingClientRect();
      var x = (event.clientX - rect.left) * (this.canvas.width / rect.width);
      var y = (event.clientY - rect.top) * (this.canvas.height / rect.height);
      return {
        x: x,
        y: y
      };
    },

    /**
     * 鼠标滚轮事件响应
     * @param {Object} e -
     * @param {Number} e.detail -返回数字，表示当前点击次数加一
     * @param {Number} e.wheelDelta -返回鼠标滚轮的滚动量
     * @memberOf GlobeControl#
     *
     */
    onMouseWheel: function onMouseWheel(e) {
      var pos = this.getMousePosition(e);

      if (navigator.userAgent.indexOf("Firefox") > -1) {
        this.onTouchWheel(pos.x, pos.y, e.detail * -40, 0);
      } else {
        this.onTouchWheel(pos.x, pos.y, e.wheelDelta, 0);
      }
    },

    /**
     * 鼠标按下事件响应
     * @param {Object} e -
     * @param {Number} e.button -返回触发鼠标事件时按下的鼠标按钮
     * @memberOf GlobeControl#
     *
     */
    onMouseDown: function onMouseDown(e) {
      var button = e.button;

      if (button == 1) {
        button = 2;
      } else if (button == 2) {
        button = 1;
      }

      this.button = button;
      var pos = this.getMousePosition(e);
      this.onTouchDown(pos.x, pos.y, 0, this.button);
    },

    /**
     * 鼠标移动事件响应
     * @param {Object} event -
     * @param {Number} event.clientX -返回触发鼠标事件时，鼠标指针相对于当前窗口的水平坐标（根据客户端区域）
     * @param {Number} event.clientY -返回触发鼠标事件时，鼠标指针相对于当前窗口的垂直坐标（根据客户端区域）
     * @memberOf GlobeControl#
     *
     */
    onMouseMove: function onMouseMove(e) {
      var pos = this.getMousePosition(e);
      this.onTouchMove(pos.x, pos.y, 0, this.button);
    },

    /**
     * 鼠标抬起事件响应
     * @param {Object} event -
     * @param {Number} event.clientX -返回触发鼠标事件时，鼠标指针相对于当前窗口的水平坐标（根据客户端区域）
     * @param {Number} event.clientY -返回触发鼠标事件时，鼠标指针相对于当前窗口的垂直坐标（根据客户端区域）
     * @memberOf GlobeControl#
     *
     */
    onMouseUp: function onMouseUp(e) {
      var pos = this.getMousePosition(e);
      var flags = 0;

      if (e.shiftKey) {
        flags |= 4;
      }

      if (e.ctrlKey) {
        flags |= 8;
      }

      this.onTouchUp(pos.x, pos.y, flags, this.button);
    },

    /**
     * 获取三维场景编辑器
     *  @memberOf GlobeControl#
     * @returns {PIEGlobeEditor} 如果成功返回编辑器，否则返回NULL
     *
     */
    getGlobeEditor: function getGlobeEditor() {
      var hGlobeEditor = Module._GlobeControl_GetGlobeEditor(this.handle);

      if (hGlobeEditor) {
        return this._globeEditor;
      }

      return null;
    },

    /**
     * 选中点测试
     * @param {Array} pntScreen -屏幕像素点位置
     * @param {Array} pntMap -屏幕点转地图点坐标
     * @param {Number} tolerance -容限
     * @param {Boolean} appendMode -是否追加模式
     * @param {Boolean} controlMode -反选
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回测试是否成功
     */
    hitTestPoint: function hitTestPoint(pntScreen, pntMap, tolerance, appendMode, controlMode) {
      var arrayScreen = null;
      var arrayMap = null;

      if (appendMode == null) {
        appendMode = false;
      }

      if (controlMode == null) {
        controlMode = false;
      }

      if (pntScreen instanceof PIEVector2) {
        arrayScreen = pntScreen.toArray();
      } else if (pntScreen instanceof Array) {
        arrayScreen = pntScreen;
      }

      if (pntMap instanceof PIEVector2) {
        arrayMap = pntMap.toArray();
      } else if (pntMap instanceof Array) {
        arrayMap = pntMap;
      }

      var result = false;
      this.makeCurrent();

      if (arrayScreen && arrayMap) {
        result = Module._GlobeControl_HitTestPoint(this.handle, arrayScreen[0], arrayScreen[1], arrayMap[0], arrayMap[1], tolerance, appendMode, controlMode);
      }

      return result;
    },

    /**
     * 选中范围测试
     * @param {Array} rect -屏幕范围
     * @param {Boolean} appendMode -是否追加模式
     * @param {Boolean} controlMode -反选
     * @memberOf GlobeControl#
     *
     * @returns {Boolean} 返回测试是否成功
     */
    hitTestRect: function hitTestRect(rect, appendMode, controlMode) {
      var rectArray = null;

      if (rect instanceof PIERect) {
        rectArray = rect.toArray();
      } else if (rect instanceof Array) {
        rectArray = rect;
      }

      if (rectArray && rectArray.length == 4) {
        if (appendMode == null) {
          appendMode = false;
        }

        if (controlMode == null) {
          controlMode = false;
        }

        var arrayRect = new PIEArray(rectArray, PIEArrayType.Float64);

        var res = Module._GlobeControl_HitTestRect(this.handle, arrayRect.getHandle(), appendMode, controlMode);

        arrayRect.dispose();
        return res;
      }

      return false;
    },
    // /**
    //  * 选中点测试
    //  * @param {Array} pntScreen -屏幕像素点位置
    //  * @memberOf GlobeControl#
    //  *
    //  * @return {Number} 返回选择的对象ID，失败返回null;
    //  */
    pick: function pick(pntScreen) {
      this.makeCurrent();
      var pointArray = null;

      if (pntScreen instanceof PIEVector2) {
        pointArray = pntScreen.toArray();
      } else if (pntScreen instanceof Array) {
        pointArray = pntScreen;
      }

      var result = null;

      if (pointArray) {
        result = Module._Globe_Control_Pick(this.handle, pointArray[0], pointArray[1]);
      }

      return result;
    },
    // /**
    //  * 获取地图选择器
    //  * @memberOf GlobeControl#
    //  * @return {PIESelector} 返回地图选择器对象
    //  */
    getSelector: function getSelector() {
      var handle = Module._PIE_Globe_Control_GetSelector(this.handle);

      return new PIESelector(handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建场景视图容器
   * @name GlobeViewer
   * @class GlobeViewer
   * 场景视图容器操作函数
   *
   * @param {Object} options -
   * @param {Boolean} options.antialias -是否抗锯齿(默认为false)
   * @param {String} options.canvas -画布(必填)
   * @param {Boolean} options.cameraSmooth -是否需要相机缓冲效果(默认为false)
   * @param {PIEDimensionMode} options.dimensionMode -维度模式(PIE.DimensionMode.D3D)
   * @param {PIESceneMode} options.sceneMode -场景模式(默认为PIE.SceneMode.Sphere)
   * @param {Boolean} options.autoProjection -是否自动转换地图投影(默认为true)
   * @param {Number} options.pixelRatio -当前显示设备的物理像素分辨率与CSS像素分辨率之比(默认为1)
   * @param {Boolean} options.enableFarClipping -是否开启远裁剪面(默认为false)
   * @param {Boolean} options.tileLevelSize -瓦片缓存层级(默认为5)
   * @param {Boolean} options.tileBufferRadius -瓦片缓存半径(默认为3)
   * @param {Boolean} options.preserveDrawingBuffer -设置为true时,表示在绘图完成后保留绘图缓冲区,默认值为 false
   * @param {Array/PIEVector2} options.center -中心点 默认值（116.4, 39.9）
   * @param {Number} options.zoom -缩放层级(0-22)
   * @param {Number} options.scale -比例尺
   * @param {Number} options.useRenderLoop -是否内部控制渲染循环(默认为true)
   * @param {Object} options.rasterDataSource -瓦片数据源(必填)
   * @param {String} options.rasterDataSource.server -url地址(必填)
   * @param {String} options.rasterDataSource.alias -栅格瓦片数据源别名(必填)
   * @param {Number} options.rasterDataSource.epsg -坐标系EPSG(支持3857、4326、4490，默认为3857)
   * @param {PIEBounds} options.rasterDataSource.bounds -数据范围(默认全球范围)
   * @param {Number} options.rasterDataSource.dpi -地图显示dpi(默认为96)
   * @param {Number} options.rasterDataSource.tileSize -瓦片大小(默认256)
   * @param {Number} options.rasterDataSource.maxLevel -瓦片最大层级(默认13，如果地形精度大于13层级，需要自行设置此参数)
   * @param {Object} options.terrainDataSource -地形数据源(需要添加地形时输入)
   * @param {String} options.terrainDataSource.server -url地址(必填)
   * @param {String} options.terrainDataSource.alias -栅格瓦片数据源别名(必填)
   * @param {Number} options.terrainDataSource.epsg -坐标系EPSG(支持3857、4326、4490，默认为3857)
   * @param {PIEBounds} options.terrainDataSource.bounds -数据范围(默认全球范围)
   * @param {Number} options.terrainDataSource.dpi -地图显示Dpi(默认为96)
   * @param {Number} options.terrainDataSource.tileSize -瓦片大小(默认256)
   *
   *@example
   *let globeViewer = new PIE.GlobeViewer({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
              center: [116.4, 39.9],
              zoom: 3,
              rasterDataSource: {server:"https://webst03.is.autonavi.com/appmaptile?style=6&z={z}&y={y}&x={x}", alias:"test"},
              terrainDataSource: {server:"https://ds.piesat.cn:20002/pie-cloud/tiles/publish/arcgis/below/d83be590745b4a8fb91d82a864b55e66/{z}/{x}/{y}", alias:"terrain"}
          });
   */

  function PIEGlobeViewer(options) {
    PIEEnvironment.init();
    var tileRasterDatasource = options.rasterDataSource;
    var terrainDatasource = options.terrainDataSource;
    this.workspace = new PIEDocument();
    this.globeControl = new PIEGlobeControl({
      antialias: options.antialias,
      webgl2: options.webgl2,
      canvas: options.canvas,
      depth: options.depth,
      stencil: options.stencil,
      cameraSmooth: options.cameraSmooth,
      dimensionMode: options.dimensionMode,
      sceneMode: options.sceneMode,
      autoProjection: options.autoProjection,
      enableFarClipping: options.enableFarClipping,
      pixelRatio: options.pixelRatio,
      preserveDrawingBuffer: options.preserveDrawingBuffer,
      tileLevelSize: options.tileLevelSize,
      tileBufferRadius: options.tileBufferRadius
    });
    var zoom = options.zoom;
    var scale = options.scale;
    this.globe = this.globeControl.getGlobe();
    this.globe.attachDocument(this.workspace);
    this.globe.setMinResolution(512);

    if (tileRasterDatasource != null && _typeof(tileRasterDatasource) == "object") {
      var dataSource = new PIETileRasterDataSource();
      dataSource.create(tileRasterDatasource);
      this.workspace.getDataSourceManager().addDataSource(dataSource);
      var globeTileRasterLayer = new PIEGlobeTileRasterLayer();
      globeTileRasterLayer.setDataSource(dataSource);
      this.globe.addLayer(globeTileRasterLayer, true);
    }

    if (terrainDatasource != null && _typeof(terrainDatasource) == "object") {
      var terrainDataSource = new PIEMapTerrainDataSource();
      terrainDataSource.create(terrainDatasource);
      this.workspace.getDataSourceManager().addDataSource(terrainDataSource);
      var globeElevationLayer = new PIEGlobeElevationLayer();
      globeElevationLayer.setDataSource(terrainDataSource);
      var globeModel = this.globe.getGlobeModel();

      globeModel.addLayer(globeElevationLayer, true);
    }

    this.globe.viewEntire();
    this.globe.refresh(false, false);
    var patialReference = this.globe.getSpatialReference();
    var point = options.center != null ? options.center : [116.4, 39.9];
    var vecPoint = patialReference.forward(point);
    this.globe.setCenter(vecPoint);
    this.globe.refresh(false, false);
    this.globe.setHeadingAngle(0);
    var scales = this.globe.getScaleLevels();

    if (zoom != null && zoom < scales.length) {
      this.globe.setZoom(zoom);
    } else if (scale != null) {
      this.globe.setScale(scale);
    } else {
      this.globe.setScale(scales[0]);
    }

    this.globe.refresh(false, false);
    var useRenderLoop = options.useRenderLoop != null ? options.useRenderLoop : true;

    if (useRenderLoop) {
      startRenderLoop(this.globeControl);
    }
  }

  Object.assign(PIEGlobeViewer.prototype, {
    /**
     * 获取三维控制对象
     * @memberOf GlobeViewer#
     * @returns {PIEGlobeControl} 返回三维控制对象
     */
    getGlobeControl: function getGlobeControl() {
      return this.globeControl;
    },

    /**
     * 删除三维控制对象
     * @memberOf GlobeViewer#
     */
    dispose: function dispose() {
      this.globe.close();

      if (this.globeControl) {
        this.globeControl.bDisposed = true;
        this.globeControl.dispose();
      }

      if (this.workspace) this.workspace.dispose();
      this.globe = null;
      this.globeControl = null;
      this.workspace = null; //PIEEnvironment.exit();
    },

    /**
     * 获取三维场景对象
     * @memberOf GlobeViewer#
     * @returns {PIEGlobe} 返回三维场景对象
     */
    getGlobe: function getGlobe() {
      return this.globe;
    }
  });

  function startRenderLoop(globeControl) {
    function render() {
      if (globeControl.bDisposed == false && globeControl.handle) {
        globeControl.onRender();
        requestAnimationFrame(render);
      }
    }

    requestAnimationFrame(render);
  }

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建Tiles3D模型图层
   * @name GlobeTiles3DModelLayer
   * @class GlobeTiles3DModelLayer
   * Tiles3D模型图层
   * @extends GlobeModelLayer
   */

  function PIEGlobeTiles3DModelLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_Tiles3DModelLayer_Create();
      autoRelease = true;
    }

    PIEGlobeModelLayer.call(this, handle, autoRelease);
  }

  PIEGlobeTiles3DModelLayer.prototype = Object.assign(Object.create(PIEGlobeModelLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 颜色效果过滤器
   * @name GlobeColorEffectFilter
   *
   * @extends GlobeEffectFilter
   * @example
   * var globeColorEffectFilter = new PIE.GlobeColorEffectFilter();
   */

  function PIEGlobeColorEffectFilter(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_ColorEffectFilter_Create();
      autoRelease = true;
    }

    PIEGlobeEffectFilter.call(this, handle, autoRelease);
  }

  PIEGlobeColorEffectFilter.prototype = Object.assign(Object.create(PIEGlobeEffectFilter.prototype), {
    /**
     * 设置不透明度
     * @param {Number} opacity -不透明度
     * @memberOf GlobeColorEffectFilter#
     */
    setOpacity: function setOpacity(opacity) {
      Module._Globe_ColorEffectFilter_SetOpacity(this.handle, opacity);
    },

    /**
     * 获取不透明度
     *
     * @memberOf GlobeColorEffectFilter#
     * @returns {Number} 不透明度
     */
    getOpacity: function getOpacity() {
      return Module._Globe_ColorEffectFilter_GetOpacity(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 屏幕掩膜特效
   * @name globeFragMaskEffectFilter
   *
   * @extends GlobeEffectFilter
   * @example
   * var globeFragMaskEffectFilter = new PIE.globeFragMaskEffectFilter();
   */

  function PIEGlobeFragMaskEffectFilter(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_FragMaskEffectFilter_Create();
      autoRelease = true;
    }

    PIEGlobeEffectFilter.call(this, handle, autoRelease);
  }

  PIEGlobeFragMaskEffectFilter.prototype = Object.assign(Object.create(PIEGlobeEffectFilter.prototype), {
    /**
     * 设置是否反选
     * @param {Boolean} enable -是否反选
     * @memberOf globeFragMaskEffectFilter#
     */
    setEnableReverseMask: function setEnableReverseMask(enable) {
      Module._Globe_FragMaskEffectFilter_SetEnableReverseMask(this.handle, enable);
    },

    /**
     * 获取是否反选
     *
     * @memberOf globeFragMaskEffectFilter#
     * @returns {Boolean} 是否反选
     */
    isEnableReverseMask: function isEnableReverseMask(enable) {
      return Module._Globe_FragMaskEffectFilter_IsEnableReverseMask(this.handle);
    },

    /**
     * 设置第一个坐标点
     * @param {Number} x -坐标点x
     * @param {Number} y -坐标点y
     * @memberOf globeFragMaskEffectFilter#
     *
     */
    setFirstXY: function setFirstXY(x, y) {
      Module._Globe_FragMaskEffectFilter_SetFirstXY(this.handle, x, y);
    },

    /**
     * 获取第一个坐标点
     * @memberOf GlobeFragMaskEffectFilter#
     *
     * @returns {PIEVector2} 返回第一个坐标点
     */
    getFirstXY: function getFirstXY() {
      var posArray = new PIEArray(2, PIEArrayType.Int32);

      Module._Globe_FragMaskEffectFilter_GetFirstXY(this.handle, posArray.getHandle());

      posArray.updateData();
      var position = posArray.toArray();
      posArray.dispose();
      return new PIEVector2(position[0], position[1]);
    },

    /**
     * 设置第二个坐标点
     * @param {Number} x -坐标点x
     * @param {Number} y -坐标点y
     * @memberOf globeFragMaskEffectFilter#
     *
     */
    setSecondXY: function setSecondXY(x, y) {
      Module._Globe_FragMaskEffectFilter_SetSecondXY(this.handle, x, y);
    },

    /**
     * 获取第二个坐标点
     * @memberOf GlobeFragMaskEffectFilter#
     *
     * @returns {PIEVector2} 返回第二个坐标点
     */
    getSecondXY: function getSecondXY() {
      var posArray = new PIEArray(2, PIEArrayType.Int32);

      Module._Globe_FragMaskEffectFilter_GetSecondXY(this.handle, posArray.getHandle());

      posArray.updateData();
      var position = posArray.toArray();
      posArray.dispose();
      return new PIEVector2(position[0], position[1]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维图层基础操作函数
   * @name GlobeSharderEffectFilter
   * @class GlobeSharderEffectFilter
   * 三维图层基础操作函数
   *
   * @extends GlobeEffectFilter
   * @example
   * let globeSharderEffectFilter = new PIE.GlobeSharderEffectFilter()
   */

  function PIEGlobeSharderEffectFilter(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_SharderEffectFilter_Create();
      autoRelease = true;
    }

    PIEGlobeEffectFilter.call(this, handle, autoRelease);
  }

  PIEGlobeSharderEffectFilter.prototype = Object.assign(Object.create(PIEGlobeEffectFilter.prototype), {
    /**
     * 设置图层裁剪面
     * @param {(PIEVector3/Array)} swipeVector -图层裁剪面
     * @param {(PIEVector3/Array)} swipePoint -裁剪面的法向量
     * @memberOf GlobeSharderEffectFilter#
     *
     * @returns {Boolean} 返回是否设置成功
     */
    setClipPlane: function setClipPlane(swipeVector, swipePoint) {
      var arraySwipePoint = null;

      if (swipePoint instanceof PIEVector3) {
        arraySwipePoint = new PIEArray([swipePoint.x, swipePoint.y, swipePoint.z], PIEArrayType.Float64);
      } else {
        arraySwipePoint = new PIEArray(swipePoint, PIEArrayType.Float64);
      }

      var arraySwipeVector = null;

      if (swipeVector instanceof PIEVector3) {
        arraySwipeVector = new PIEArray([swipeVector.x, swipeVector.y, swipeVector.z], PIEArrayType.Float64);
      } else {
        arraySwipeVector = new PIEArray(swipeVector, PIEArrayType.Float64);
      }

      var res = Module._Globe_SharderEffect_SetClipPlane(this.handle, arraySwipeVector.getHandle(), arraySwipePoint.getHandle());

      arraySwipeVector.dispose();
      arraySwipePoint.dispose();
      return res;
    },

    /**
     * 删除图层裁剪面
     *
     * @memberOf GlobeSharderEffectFilter#
     * @returns {Boolean} 返回是否删除成功
     */
    removeClipPlane: function removeClipPlane() {
      return Module._Globe_SharderEffect_RemoveClipPlane(this.handle);
    },

    /**
     * 获取阴影部分夸张系数
     *
     * @memberOf GlobeSharderEffectFilter#
     * @return {Number} 返回阴影部分夸张系数
     */
    getShadingExaggeration: function getShadingExaggeration() {
      return Module._Globe_SharderEffect_GetShadingExaggeration(this.handle);
    },

    /**
     * 设置阴影部分夸张系数
     * @param {Number} value -阴影部分夸张系数
     * @memberOf GlobeSharderEffectFilter#
     */
    setShadingExaggeration: function setShadingExaggeration(value) {
      Module._Globe_SharderEffect_SetShadingExaggeration(this.handle, value);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 矢量瓦片渲染器操作函数
   * @name TileFeatureRenderer
   * @class TileFeatureRenderer
   *
   * @extends FeatureRenderer
   */

  function PIETileFeatureRenderer(handle, autoRelease) {
    PIEFeatureRenderer.call(this, handle, autoRelease);
  }

  PIETileFeatureRenderer.prototype = Object.assign(Object.create(PIEFeatureRenderer.prototype), {
    /**
     * 设置渲染器的风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格句柄内部是否克隆(如果是true，风格句柄需要外部释放，否则会出现内存泄露；如果是false，风格句柄由内部保存并释放，外部不能释放，否则会出现崩溃) 默认值（false）
     * @memberOf TileFeatureRenderer#
     */
    setStyle: function setStyle(style) {
      var clone = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      Module._TileFeatureRenderer_SetStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取渲染器风格
     * @memberOf TileFeatureRenderer#
     *
     * @returns {PIEStyle} 成功返回风格对象，失败返回NULL
     */
    getStyle: function getStyle() {
      var handle = Module._TileFeatureRenderer_GetStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建面矢量瓦片渲染器对象
   * @name FillTileFeatureRenderer
   * @class FillTileFeatureRenderer
   * 面矢量瓦片渲染器操作函数
   *
   * @extends TileFeatureRenderer
   */

  function PIEFillTileFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._FillTileFeatureRenderer_Create();
    }

    PIETileFeatureRenderer.call(this, handle, autoRelease);
  }

  PIEFillTileFeatureRenderer.prototype = Object.assign(Object.create(PIETileFeatureRenderer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 三维瓦片图层基本操作函数
   * @name GlobeBaseTileLayer
   *
   * @extends GlobeLayer
   */

  function PIEGlobeBaseTileLayer(handle, autoRelease) {
    PIEGlobeLayer.call(this, handle, autoRelease);
  }

  PIEGlobeBaseTileLayer.prototype = Object.assign(Object.create(PIEGlobeLayer.prototype), {
    /**
     * 设置数据源名称
     * @param {String} strDsName -目标数据源名称
     * @memberOf GlobeBaseTileLayer#
     */
    setDataSourceName: function setDataSourceName(strDsName) {
      Module._Globe_BTileLayer_SetDataSourceName(this.handle, strDsName);
    },

    /**
     * 获取数据源名称
     *
     * @memberOf GlobeBaseTileLayer#
     * @returns {String} 返回数据源名称
     */
    getDataSourceName: function getDataSourceName() {
      var name = new PIEString(512);

      Module._Globe_BTileLayer_GetDataSourceName(this.handle, name.getHandle());

      var strName = name.toString();
      name.dispose();
      return strName;
    },
    // /**
    //  * 设置数据集名称
    //  * @param {String} strDsName -目标数据集名称
    //  * @memberOf GlobeBaseTileLayer#
    //  */
    setDatasetName: function setDatasetName(strDsName) {
      Module._Globe_BTileLayer_SetDatasetName(this.handle, strDsName);
    },
    // /**
    //  * 获取数据集名称
    //  *
    //  * @memberOf GlobeBaseTileLayer#
    //  * @returns {String} 返回数据集名称
    //  */
    getDatasetName: function getDatasetName() {
      var name = new PIEString(512);

      Module._Globe_BTileLayer_GetDatasetName(this.handle, name.getHandle());

      var strName = name.toString();
      name.dispose();
      return strName;
    },

    /**
     * 设置图层数据源
     * @param {PIEDataSource} datasource -数据源对象
     * @memberOf GlobeBaseTileLayer#
     *
     */
    setDataSource: function setDataSource(datasource) {
      Module._Globe_BTileLayer_SetDataset(this.handle, datasource.getDataset().getHandle());
    },

    /**
     * 获取数据源
     *
     * @memberOf GlobeBaseTileLayer#
     * @returns {PIEDataSource}  -返回数据源
     *
     */
    getDataSource: function getDataSource() {
      var hDataset = Module._Globe_BTileLayer_GetDataset(this.handle);

      var hDataSource = Module._Dataset_GetDataSource(hDataset);

      return PIEDataSourceFactory.CreateInstance(hDataSource);
    },

    /**
     * 设置图层数据集
     * @param {PIEDataset} hDataset -数据集对象
     * @memberOf GlobeBaseTileLayer#
     */
    setDataset: function setDataset(dataset) {
      Module._Globe_BTileLayer_SetDataset(this.handle, dataset.getHandle());
    },

    /**
     * 获取图层数据集
     * @param {PIEDataset} dataset -图层数据集
     * @memberOf GlobeBaseTileLayer#
     *
     * @returns {PIEDataset} 成功返回数据集对象，失败返回null
     */
    getDataset: function getDataset() {
      var handle = Module._Globe_BTileLayer_GetDataset(this.handle);

      return PIEDatasetFactory.CreateInstance(handle);
    },

    /**
     * 设置图层渲染器
     * @param {PIEFeatureRenderer} featureRenderer -要素渲染器对象
     * @memberOf GlobeBaseTileLayer#
     */
    setRenderer: function setRenderer(featureRenderer) {
      Module._Globe_BTileLayer_SetRenderer(this.handle, featureRenderer.getHandle());
    },

    /**
     * 获取图层渲染器
     * @memberOf GlobeBaseTileLayer#
     *
     * @returns {PIEFeatureRenderer} 成功返回要素渲染器对象，失败返回null
     */
    getRenderer: function getRenderer() {
      var handle = Module._Globe_BTileLayer_GetRenderer(this.handle);

      if (handle) {
        return PIEFeatureRenderFactory.CreateInstance(handle);
      }

      return null;
    },

    /**
     * 设置数据源最大层级
     * @param {Number} zoom -最大层级
     * @memberOf GlobeBaseTileLayer#
     */
    setSourceMaxZoom: function setSourceMaxZoom(zoom) {
      Module._Globe_BTileLayer_SetSourceMaxZoom(this.handle, zoom);
    },

    /**
     * 获取数据源最大层级
     * @memberOf GlobeBaseTileLayer#
     * @returns {Number} 返回数据源最大层级
     */
    getSourceMaxZoom: function getSourceMaxZoom() {
      return Module._Globe_BTileLayer_GetSourceMaxZoom(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维图层对象
   * @name GlobeFillTileLayer
   * @class GlobeFillTileLayer
   * 三维面瓦片图层操作函数
   *
   * @extends GlobeBaseTileLayer
   */

  function PIEGlobeFillTileLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_FillTileLayer_Create();
      autoRelease = true;
    }

    PIEGlobeBaseTileLayer.call(this, handle, autoRelease);
  }

  PIEGlobeFillTileLayer.prototype = Object.assign(Object.create(PIEGlobeBaseTileLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维线瓦片图层对象
   * @name GlobeLineTileLayer
   * @class GlobeLineTileLayer
   * 三维线瓦片图层操作函数
   *
   * @extends GlobeBaseTileLayer
   */

  function PIEGlobeLineTileLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_LineTileLayer_Create();
      autoRelease = true;
    }

    PIEGlobeBaseTileLayer.call(this, handle, autoRelease);
  }

  PIEGlobeLineTileLayer.prototype = Object.assign(Object.create(PIEGlobeBaseTileLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维点瓦片图层对象
   * @name GLobeSymbolTileLayer
   * @class GLobeSymbolTileLayer
   * 三维点瓦片图层操作函数
   *
   * @extends GlobeBaseTileLayer
   */

  function PIEGlobeSymbolTileLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_SymbolTileLayer_Create();
      autoRelease = true;
    }

    PIEGlobeBaseTileLayer.call(this, handle, autoRelease);
  }

  PIEGlobeSymbolTileLayer.prototype = Object.assign(Object.create(PIEGlobeBaseTileLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建三维点瓦片图层对象
   * @name GlobeCircleTileLayer
   * @class GlobeCircleTileLayer
   * 三维点瓦片图层操作函数
   *
   * @extends GlobeBaseTileLayer
   */

  function PIEGlobeCircleTileLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_CircleTileLayer_Create();
      autoRelease = true;
    }

    PIEGlobeBaseTileLayer.call(this, handle, autoRelease);
  }

  PIEGlobeCircleTileLayer.prototype = Object.assign(Object.create(PIEGlobeBaseTileLayer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建线矢量瓦片渲染器
   * @name LineTileFeatureRenderer
   * @class LineTileFeatureRenderer
   * 线矢量瓦片渲染器操作函数
   *
   * @extends TileFeatureRenderer
   */

  function PIELineTileFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._LineTileFeatureRenderer_Create();
      autoRelease = true;
    }

    PIETileFeatureRenderer.call(this, handle, autoRelease);
  }

  PIELineTileFeatureRenderer.prototype = Object.assign(Object.create(PIETileFeatureRenderer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建点矢量瓦片渲染器
   * @name SymbolTileFeatureRenderer
   * @class SymbolTileFeatureRenderer
   * 点矢量瓦片渲染器操作函数
   *
   * @extends TileFeatureRenderer
   */

  function PIESymbolTileFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._SymbolTileFeatureRenderer_Create();
      autoRelease = true;
    }

    PIETileFeatureRenderer.call(this, handle, autoRelease);
  }

  PIESymbolTileFeatureRenderer.prototype = Object.assign(Object.create(PIETileFeatureRenderer.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建点矢量瓦片渲染器
   * @name CircleTileFeatureRenderer
   * @class CircleTileFeatureRenderer
   * 点矢量瓦片渲染器操作函数
   *
   * @extends TileFeatureRenderer
   */

  function PIECircleTileFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._CircleTileFeatureRenderer_Create();
      autoRelease = true;
    }

    PIETileFeatureRenderer.call(this, handle, autoRelease);
  }

  PIECircleTileFeatureRenderer.prototype = Object.assign(Object.create(PIETileFeatureRenderer.prototype), {
    setColorProperty: function setColorProperty(colorProperty) {
      var strColorProperty = new PIEString$1(colorProperty);

      Module._CircleTileFeatureRenderer_SetColorProperty(this.handle, strColorProperty.getHandle());

      strColorProperty.dispose();
    },
    getColorProperty: function getColorProperty() {
      var strColorProperty = new PIEString$1(512);

      Module._CircleTileFeatureRenderer_SetColorProperty(this.handle, strColorProperty.getHandle());

      var colorProperty = strColorProperty.toString();
      strColorProperty.dispose();
      return colorProperty;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * Mapbox矢量瓦片图层操作函数
   * @name GlobeMVTLayer
   * @extends GlobeLayer
   */

  function PIEGlobeMVTLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._Globe_MVTLayer_Create();
      autoRelease = true;
    }

    PIEGlobeTileMapLayer.call(this, handle, autoRelease);
  }

  PIEGlobeMVTLayer.prototype = Object.assign(Object.create(PIEGlobeTileMapLayer.prototype), {
    /**
     * 打开Mapbox地图
     * @param {PIEDocument} hDocument -工作空间
     * @param {String} MapUrl -地图url
     * @param {String} SourceUrl -数据源url
     * @param {String} TileUrl -数据瓦片url
     * @returns {Boolean} 是否打开成功
     * @memberOf GlobeMVTLayer#
     */
    open: function open(hDocument, MapUrl, SourceUrl, TileUrl) {
      var strMapUrl = new PIEString$1(MapUrl);
      var strSourceUrl = new PIEString$1(SourceUrl);
      var strTileUrl = new PIEString$1(TileUrl);

      var reslut = Module._Globe_MVTLayer_Open(this.handle, hDocument.getHandle(), strMapUrl.getHandle(), strSourceUrl.getHandle(), strTileUrl.getHandle());

      strMapUrl.dispose();
      strSourceUrl.dispose();
      strTileUrl.dispose();
      return Boolean(reslut);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景工具相关操作函数
   * @name GlobeCreateTool
   * @extends GlobeTool
   *
   */

  function PIEGlobeCreateTool(handle, autoRelease) {
    PIEGlobeTool.call(this, handle, autoRelease);
  }

  PIEGlobeCreateTool.prototype = Object.assign(Object.create(PIEGlobeTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 创建三维场景几何工具相关操作函数
   * @name CreateGeometryGlobeTool
   * @extends GlobeCreateTool
   *
   * @example
   * var globeControl = new PIE.GlobeControl({
              canvas: 'canvas',
              dimensionMode: PIE.DimensionMode.D3D,
              sceneMode: PIE.SceneMode.Sphere,
              autoProjection: true,
          });
   * globeControl.setGlobeTool(PIE.GlobeToolType.CreateGeometry);
   * var globeTool = globeControl.getGlobeTool();
   */

  function PIECreateGeometryGlobeTool(handle, autoRelease) {
    if (handle != null) {
      handle = Module._CreateGeometryGlobeTool_GetHandle(handle);
      autoRelease = true;
    }

    PIEGlobeCreateTool.call(this, handle, autoRelease);
  }

  PIECreateGeometryGlobeTool.prototype = Object.assign(Object.create(PIEGlobeCreateTool.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 分析模块
   * ---
   */

  /**
   * 场景工具操作状态枚举
   * @readonly
   * @enum {Number}
   */
  var PIEGlobeToolStatus = {
    /**开始状态*/
    Begin: 0,

    /**结束状态*/
    End: 1,

    /**取消状态*/
    Cancel: 2,

    /**工作状态*/
    Doing: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 符号尺寸模式
   * @readonly
   * @enum {number}
   */
  var PIESymbolSizeMode = {
    /**
     * 固定大小
     */
    Fixed: 1,

    /**
     * 按比例缩放
     */
    Rate: 2,

    /**
     * 随图缩放
     */
    Auto: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 军标填充模式
   * @readonly
   * @enum {number}
   */
  var PIEFillModeType = {
    /**实填充**/
    SolidFill: 0,

    /**纹理填充**/
    TextureFill: 1,

    /**线性渐变填充**/
    LinearGradientFill: 2,

    /**径向填充**/
    RadialFill: 3,

    /**无填充**/
    NoFill: 4
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 符号类型
   * @readonly
   * @enum {number}
   */
  var PIESymbolPlotType = {
    Dot: 1,
    Algo: 2,
    Picture: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 设置点符号位置
   * @readonly
   * @enum {number}
   */
  var PIELabelPosType = {
    Bottom: 0,
    Right: 1,
    Top: 2,
    Left: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 衬线位置
   * @readonly
   * @enum {number}
   */
  var PIEOutLinePosType = {
    /**
     * 无衬线
     */
    SansSerif: 0,

    /**
     * 内衬线
     */
    InnerSerif: 1,

    /**
     * 外衬线
     */
    OuterSerif: 2,

    /**
     * 双衬线
     */
    DoubleSerif: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 标绘模块
   * ---
   */

  /**
   * 衬线风格
   * @readonly
   * @enum {number}
   */
  var PIEOutLineStyleType = {
    /**
     * 实线
     */
    SolidLine: 0,

    /**
     * 虚线
     */
    DottedLine: 1
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 创建栅格分类渲染器对象
   * @name ClassifyRasterRenderer
   * @class AfterRasterFilter
   *  栅格分类渲染器操作函数
   *
   *
   * @extends RasterRenderer
   * @example
   * let classifyRasterRenderer = new PIE.ClassifyRasterRenderer();
   *
   */

  function PIEClassifyRasterRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._ClassifyRasterRenderer_Create();
      autoRelease = true;
    }

    PIERasterRenderer.call(this, handle, autoRelease);
  }

  PIEClassifyRasterRenderer.prototype = Object.assign(Object.create(PIERasterRenderer.prototype), {
    /**
     * 设置渲染波段索引
     * @param {Number} bandIndex -渲染波段索引
     * @memberOf ClassifyRasterRenderer#
     *
     */
    setBandIndex: function setBandIndex(bandIndex) {
      Module._ClassifyRasterRenderer_SetBandIndex(this.handle, bandIndex);
    },

    /**
     * 获取渲染波段索引
     * @returns {Number} 返回渲染波段索引
     * @memberOf ClassifyRasterRenderer#
     *
     */
    getBandIndex: function getBandIndex() {
      return Module._ClassifyRasterRenderer_GetBandIndex(this.handle);
    },

    /**
     * 设置无效值
     * @param {Number} value -无效值
     * @memberOf ClassifyRasterRenderer#
     *
     */
    setNoValue: function setNoValue(value) {
      Module._ClassifyRasterRenderer_SetNoValue(this.handle, value);
    },

    /**
     * 获取无效值
     *
     * @memberOf ClassifyRasterRenderer#
     * @returns {Number} 返回无效值
     *
     */
    getNoValue: function getNoValue() {
      return Module._ClassifyRasterRenderer_GetNoValue(this.handle);
    },

    /**
     * 获取分类方法
     *
     * @memberOf ClassifyRasterRenderer#
     * @returns {String} 分类方法
     *
     */
    getClassifyMethod: function getClassifyMethod() {
      return Module._ClassifyRasterRenderer_GetClassifyMethod(this.handle);
    },

    /**
     * 获取ClassBreaks数量
     *
     * @memberOf ClassifyRasterRenderer#
     * @returns {Number} 数量
     *
     */
    getClassBreakCount: function getClassBreakCount() {
      return Module._ClassifyRasterRenderer_GetClassBreakCount(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 创建栅格颜色对照表渲染器
   * @name ColormapRasterRenderer
   * @class ColormapRasterRenderer
   *  栅格颜色对照表渲染器操作函数
   *
   *
   * @extends RasterRenderer
   * @example
   * let colormapRasterRenderer = new PIE.ColormapRasterRenderer();
   *
   */

  function PIEColormapRasterRenderer$1(handle, autoRelease) {
    if (handle == null) {
      handle = Module._ColormapRasterRenderer_Create();
      autoRelease = true;
    }

    PIERasterRenderer.call(this, handle, autoRelease);
  }

  PIEColormapRasterRenderer$1.prototype = Object.assign(Object.create(PIERasterRenderer.prototype), {
    /**
     * 设置渲染波段索引
     * @param {Number} bandIndex 渲染波段索引
     * @memberOf ColormapRasterRenderer#
     *
     */
    setBandIndex: function setBandIndex(bandIndex) {
      Module._ColormapRasterRenderer_SetBandIndex(this.handle, bandIndex);
    },

    /**
     * 获取渲染波段索引
     *
     * @memberOf ColormapRasterRenderer#
     * @returns {Number} 返回渲染波段索引
     *
     */
    getBandIndex: function getBandIndex() {
      return Module._ColormapRasterRenderer_GetBandIndex(this.handle);
    },

    /**
     * 设置无效值
     * @param {Number} value 无效值
     * @memberOf ColormapRasterRenderer#
     *
     */
    setNoValue: function setNoValue(value) {
      Module._ColormapRasterRenderer_SetNoValue(this.handle, value);
    },

    /**
     * 获取无效值
     *
     * @memberOf ColormapRasterRenderer#
     * @returns {Number} 返回无效值
     *
     */
    getNoValue: function getNoValue() {
      return Module._ColormapRasterRenderer_GetNoValue(this.handle);
    },

    /**
     *  设置颜色表
     * @param {PIEColorTable} colorTable -颜色表对象
     * @memberOf ColormapRasterRenderer#
     *
     */
    setColorTable: function setColorTable(colorTable) {
      Module._ColormapRasterRenderer_SetColorTable(this.handle, colorTable.getHandle());
    },

    /**
     *  获取颜色表
     * @param {PIEColorTable} colorTable -颜色表对象
     * @memberOf ColormapRasterRenderer#
     *
     * @returns {Boolean} 是否获取成功
     */
    getColorTable: function getColorTable(colorTable) {
      return Module._ColormapRasterRenderer_GetColorTable(this.handle, colorTable.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 栅格渲染模块
   * ---
   */

  /**
   * 拉伸模式
   * @readonly
   * @enum {number}
   */
  var PIEStretchType = {
    /** 没有拉伸 */
    NONE: 0,

    /**98%线性拉伸*/
    LINE: 1,

    /**直方图均衡*/
    EQUALIZATION: 2,

    /**直方图规一化*/
    NORMALIZATION: 3,

    /**对数变换*/
    LOGTRANSFORMATION: 4,

    /**指数变换*/
    EXPTRANSFORMATION: 5,

    /**高斯增强*/
    GAUSSIAN: 6,

    /**均方根*/
    ROOT: 7,

    /**99%拉伸*/
    LINE99: 8,

    /**95%拉伸*/
    LINE95: 9,

    /**99%优化拉伸*/
    LINE99OP: 10,

    /**98%优化拉伸*/
    LINE98OP: 11,

    /**自定义(LUT)拉伸*/
    CUSTOM: 12,

    /**最小最大值拉伸*/
    MINMAX: 13
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建水体渲染对象
   * @name RenderWater
   * @class RenderWater
   * 水体渲染操作函数
   * @extends RenderPolygon3D
   */

  function PIERenderWater(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderWater_Create();
      autoRelease = true;
    }

    PIERenderPolygon3D.call(this, {
      handle: handle,
      autoRelease: autoRelease
    });
  }

  PIERenderWater.prototype = Object.assign(Object.create(PIERenderPolygon3D.prototype), {
    /**
     * 加载纹理数据
     * @param {Object} options -
     * @param {String} options.file -从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -纹理路径url(必填项)
     * @param {PIEFillEffect} options.fillEffect -填充效果
     *
     * @memberOf RenderWater#
     * @returns {Promise} 返回一个promise，在value中存放水体渲染对象
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var url = options.url;

        if (options.fillEffect != null) {
          that.setFillEffect(options.fillEffect);
        }

        if (url == null) {
          return null;
        }

        var name = PIEFile.getFileName(url);

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        var filesPicks = [];
        filesPicks.push(file);
        var urlsPicks = [];
        urlsPicks.push(url);

        function callBack(filelist, urllist, datalist) {
          var strPath = new PIEString$1(filelist[0]);

          Module._RenderWater_SetNormalPath(that.handle, strPath.getHandle());

          strPath.dispose();
          resolve(that);
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },
    setNormalPath: function setNormalPath(path) {
      var strPath = new PIE.String(path);

      Module._RenderWater_SetNormalPath(this.handle, strPath.getHandle());

      strPath.dispose();
    },

    /**
     * 获取填充效果
     *
     * @memberOf RenderWater#
     * @returns {PIEFillEffect} 返回填充效果
     */
    getFillEffect: function getFillEffect() {
      return Module._RenderWater_GetFillEffect(this.handle);
    },

    /**
     * 设置填充效果
     * @param {PIEFillEffect} effect 填充效果
     * @memberOf RenderWater#
     */
    setFillEffect: function setFillEffect(effect) {
      Module._RenderWater_SetFillEffect(this.handle, effect);
    },

    /**
     * 设置法向量纹理
     * @param {PIETexture} texture -法向量纹理
     * @memberOf RenderWater#
     */
    setNormalTexture: function setNormalTexture(texture) {
      Module._RenderWater_SetNormalTexture(this.handle, texture.getHandle());
    },

    /**
     * 获取法向量纹理
     *
     * @memberOf RenderWater#
     * @returns {PIETexture} 返回法向量纹理
     */
    getNormalTexture: function getNormalTexture() {
      var handle = Module._RenderWater_GetNormalTexture(this.handle);

      if (handle) {
        return new PIETexture(handle);
      }
    },

    /**
     * 获取水流速度
     *
     * @memberOf RenderWater#
     * @returns {Number} 返回水流速度
     */
    getWaterScale: function getWaterScale() {
      return Module._RenderWater_GetWaterScale(this.handle);
    },

    /**
     * 设置水流速度
     * @param {Number} scale 水流速度
     * @memberOf RenderWater#
     */
    setWaterScale: function setWaterScale(scale) {
      Module._RenderWater_SetWaterScale(this.handle, scale);
    },

    /**
     * 获取水流颜色
     *
     * @memberOf RenderWater#
     * @returns {PIEColor} 返回水流颜色
     */
    getWaterColor: function getWaterColor() {
      var colorArray = new PIEArray(3, PIEArrayType.UInt8);

      Module._RenderWater_GetWaterColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var arrayColor = colorArray.toArray();
      colorArray.dispose();
      return new PIEColor(arrayColor[0], arrayColor[1], arrayColor[2]);
    },

    /**
     * 设置水流颜色
     * @param {PIEColor/Array} color 水流颜色
     * @memberOf RenderWater#
     */
    setWaterColor: function setWaterColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray != null) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderWater_SetWaterColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建河流渲染对象
   * @name RenderRiver
   * @class RenderRiver
   * 河流渲染操作函数
   * @extends RenderPolygon3D
   */

  function PIERenderRiver(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderRiver_Create();
      autoRelease = true;
    }

    PIERenderPolygon3D.call(this, {
      handle: handle,
      autoRelease: autoRelease
    });
  }

  PIERenderRiver.prototype = Object.assign(Object.create(PIERenderPolygon3D.prototype), {
    /**
     * 加载纹理数据
     * @param {Object} options -
     * @param {String} options.normal0Url -法向量垂直扰动纹理路径url(必填项)
     * @param {String} options.normal1Url -法向量水平扰动纹理路径url(必填项)
     * @param {String} options.flowUrl -流向纹理路径url(必填项)
     * @param {String} options.blendUrl -混合纹理路径url(可以为空)
     *
     * @memberOf RenderRiver#
     * @returns {Promise} 返回一个promise，在value中存放水体渲染对象
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var normal0File = options.normal0File;
        var normal1File = options.normal1File;
        var flowFile = options.flowFile;
        var blendFile = options.blendFile;
        var normal0Url = options.normal0Url;
        var normal1Url = options.normal1Url;
        var flowUrl = options.flowUrl;
        var blendUrl = options.blendUrl;

        if (!normal0Url || !normal1Url || !flowUrl) {
          return null;
        }

        if (!normal0File) {
          var name = PIEFile.getFileName(normal0Url);
          normal0File = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        if (!normal1File) {
          var name1 = PIEFile.getFileName(normal1Url);
          normal1File = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name1;
        }

        if (!flowFile) {
          var name2 = PIEFile.getFileName(flowUrl);
          flowFile = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name2;
        }

        if (!blendFile) {
          var name3 = PIEFile.getFileName(blendUrl);
          blendFile = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name3;
        }

        var filesPicks = [normal0File, normal1File, flowFile];
        var urlsPicks = [normal0Url, normal1Url, flowUrl];

        if (blendUrl) {
          urlsPicks.push(blendUrl);
          filesPicks.push(blendFile);
        }

        function callBack(filelist, urllist, datalist) {
          var strPath = new PIEString$1(filelist[0]);

          Module._RenderRiver_SetNormal0Path(that.handle, strPath.getHandle());

          strPath.dispose();
          var strPath1 = new PIEString$1(filelist[1]);

          Module._RenderRiver_SetNormal1Path(that.handle, strPath1.getHandle());

          strPath1.dispose();
          var strPath2 = new PIEString$1(filelist[2]);

          Module._RenderRiver_SetFlowPath(that.handle, strPath2.getHandle());

          strPath2.dispose();

          if (filesPicks.length == 4) {
            var strPath3 = new PIEString$1(filelist[3]);

            Module._RenderRiver_SetBlendPath(that.handle, strPath3.getHandle());

            strPath3.dispose();
          }

          resolve(that);
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },

    /**
     * 设置河流流速
     *
     * @memberOf RenderRiver#
     * @param {Number} speed -流速
     */
    setRiverSpeed: function setRiverSpeed(speed) {
      return Module._RenderRiver_SetRiverSpeed(this.handle, speed);
    },

    /**
     * 获取河流流速
     *
     * @memberOf RenderRiver#
     * @returns {Number} 返回河流流速
     */
    getRiverSpeed: function getRiverSpeed(speed) {
      return Module._RenderRiver_GetRiverSpeed(this.handle);
    },

    /**
     * 设置河流比例
     *
     * @memberOf RenderRiver#
     * @param {Number} speed -河流比例
     */
    setRiverScale: function setRiverScale(scale) {
      return Module._RenderRiver_SetRiverScale(this.handle, scale);
    },

    /**
     * 获取河流比例
     *
     * @memberOf RenderRiver#
     * @returns {Number} 返回河流比例
     */
    getRiverScale: function getRiverScale() {
      return Module._RenderRiver_GetRiverScale(this.handle);
    },

    /**
     * 设置河流反射比例
     *
     * @memberOf RenderRiver#
     * @param {Number} reflectivity -河流反射比例
     */
    setReflectivity: function setReflectivity(reflectivity) {
      return Module._RenderRiver_SetReflectivity(this.handle, reflectivity);
    },

    /**
     * 获取河流反射比例
     *
     * @memberOf RenderRiver#
     * @returns {Number} 返回河流反射比例
     */
    getReflectivity: function getReflectivity() {
      return Module._RenderRiver_GetReflectivity(this.handle);
    },

    /**
     * 设置河流混合比例
     *
     * @memberOf RenderRiver#
     * @param {Number} scale -河流混合比例
     */
    setBlendScale: function setBlendScale(scale) {
      return Module._RenderRiver_SetBlendScale(this.handle, scale);
    },

    /**
     * 获取河流混合比例
     *
     * @memberOf RenderRiver#
     * @returns {Number} 返回河流混合比例
     */
    getBlendScale: function getBlendScale() {
      return Module._RenderRiver_GetBlendScale(this.handle);
    },

    /**
     * 获取河流颜色
     *
     * @memberOf RenderRiver#
     * @returns {PIEVector3} 返回河流颜色
     */
    getWaterColor: function getWaterColor() {
      var colorArray = new PIEArray(3, PIEArrayType.UInt8);

      Module._RenderRiver_GetWaterColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var arrayColor = colorArray.toArray();
      colorArray.dispose();
      return new PIEVector3(arrayColor[0], arrayColor[1], arrayColor[2]);
    },

    /**
     * 设置河流颜色
     * @param {Array/PIEVector3} color -河流颜色
     * @memberOf RenderRiver#
     */
    setWaterColor: function setWaterColor(color) {
      var colorArray = null;

      if (color instanceof PIEVector3) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray != null) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderRiver_SetWaterColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 雷达
   * @name RenderRadar
   * @extends Renderable
   */

  function PIERenderRadar(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderRadar_Create();
    }

    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderRadar.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 加载雷达对象
     * @param {Object} options -
     * @param {PIERadarMsg} options.radarMsg -雷达对象
     * @param {Array} options.radarDisturbMsgs -雷达干扰机对象数组
     * @param {Array} options.imagefile -雷达贴图数据url
     * @param {Array} options.antennaImageUrl -雷达天线贴图url
     * @param {Array} options.position -雷达位置
     * @memberOf RenderRadar#
     * @returns {Promise} 返回一个promise，在value中存放创建好的RenderRadar对象
     */
    load: function load(options) {
      if (this.getHandle() == null) {
        this.handle = Module._RenderRadar_Create();
      }

      var that = this;
      return new Promise(function (resolve, reject) {
        var imageUrl = options.imageUrl;
        var antennaImageUrl = options.antennaImageUrl;
        var radarDisturbMsgs = options.radarDisturbMsgs;
        var radarMsg = options.radarMsg;

        if (radarMsg == null || radarDisturbMsgs == null) {
          resolve(null);
        }

        var filesPicks = [];

        if (imageUrl == null || antennaImageUrl == null) {
          resolve(null);
        }

        var imageName = PIEFile.getFileName(imageUrl);
        var imagefile = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + imageName;
        var antennaImageName = PIEFile.getFileName(antennaImageUrl);
        var antennaImageFile = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + antennaImageName;
        filesPicks.push(imagefile);
        filesPicks.push(antennaImageFile);
        var urlsPicks = [];
        urlsPicks.push(imageUrl);
        urlsPicks.push(antennaImageUrl);

        function callBack(filelist, urllist, datalist) {
          var strImage = new PIEString$1(filesPicks[0]);
          var strAntennaImage = new PIEString$1(filesPicks[1]);
          that.setRadarBoxMsg(radarMsg, radarDisturbMsgs);

          Module._RenderRadar_SetImagePath(that.handle, strImage.getHandle());

          Module._RenderRadar_ImageWaveForSectionPath(that.handle, strAntennaImage.getHandle());

          if (options.position != null) {
            that.setPosition(options.position);
          }

          strImage.dispose();
          strAntennaImage.dispose();
          resolve(that);
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },

    /**
     *
     *
     * @memberOf RenderRadar#
     */
    updateSectorDisMsg: function updateSectorDisMsg(imagePath) {
      var strImagePath = new PIEString$1(imagePath);

      Module._RenderRadar_UpdateSectorDisMsg(this.handle, strImagePath.getHandler());

      strImagePath.dispose();
    },
    setAlpha: function setAlpha(alpha) {
      Module._RenderRadar_SetAlpha(this.handle, alpha);
    },
    getMsg: function getMsg() {
      return Module._RenderRadar_GetMsg(this.handle);
    },
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof PIEVector3) {
        posArray = position.toArray();
      } else if (position instanceof Array) {
        posArray = position;
      }

      if (posArray != null) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderRadar_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },
    setRadarAntennaType: function setRadarAntennaType(type) {
      Module._RenderRadar_SetRadarAntennaType(this.handle, type);
    },
    setRadarAntennaStyle: function setRadarAntennaStyle(style) {
      Module._RenderRadar_SetRadarAntennaStyle(this.handle, style);
    },
    setRadarAntennaSpeed: function setRadarAntennaSpeed(speed) {
      Module._RenderRadar_SetRadarAntennaSpeed(this.handle, speed);
    },
    setRadarBoxColor: function setRadarBoxColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray != null) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderRadar_SetRadarBoxColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },
    setRadarSectorColor: function setRadarSectorColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray != null) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderRadar_SetRadarSectorColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },
    setRadarAntennaColor: function setRadarAntennaColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray != null) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderRadar_SetRadarAntennaColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },
    setRadarBoxMsg: function setRadarBoxMsg(radarBoxMsg, arrDisturbMsg) {
      var disturbHandles = [];
      var distureSize = arrDisturbMsg.length;

      for (var i = 0; i < distureSize; i++) {
        disturbHandles.push(arrDisturbMsg[i].handle);
      }

      var disturbHandleArraty = new PIEArray(disturbHandles, PIEArrayType.Int32);

      Module._RenderRadar_SetRadarBoxMsg(this.handle, radarBoxMsg.handle, disturbHandleArraty.getHandle(), disturbHandles.length);

      for (var _i = 0; _i < disturbHandles.length; ++_i) {
        disturbHandles.pop();
      }
    },
    setRadarAntennaMsg: function setRadarAntennaMsg(radarBoxMsg) {
      Module._RenderRadar_SetRadarAntennaMsg(this.handle, radarBoxMsg.handle);
    },
    updateRadarBoxMsg: function updateRadarBoxMsg(radarBoxMsg) {
      Module._RenderRadar_UpdateRadarBoxMsg(this.handle, radarBoxMsg.handle);
    },
    updateRadarBoxDisturbMsg: function updateRadarBoxDisturbMsg(arrDisturbMsg) {
      var disturbHandles = [];
      var distureSize = arrDisturbMsg.length;

      for (var i = 0; i < distureSize; i++) {
        disturbHandles.push(arrDisturbMsg[i].handle);
      }

      var disturbHandleArraty = new PIEArray(disturbHandles, PIEArrayType.Int32);

      Module._RenderRadar_UpdateRadarBoxDisturbMsg(this.handle, disturbHandleArraty.getHandle(), disturbHandles.length);

      for (var _i2 = 0; _i2 < disturbHandles.length; ++_i2) {
        disturbHandles.pop();
      }
    },
    updateRadarBoxDisturbPos: function updateRadarBoxDisturbPos(index, pos) {
      var posArray = null;

      if (pos instanceof PIEVector3) {
        posArray = pos.toArray();
      } else if (pos instanceof Array) {
        posArray = pos;
      }

      if (pos != null) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderRadar_UpdateRadarBoxDisturbPos(this.handle, index, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },
    updateRadarAntennaMsg: function updateRadarAntennaMsg(radarBoxMsg) {
      Module._RenderRadar_UpdateRadarAntennaMsg(this.handle, radarBoxMsg.handle);
    },
    setAntenaDirection: function setAntenaDirection(fyAngle, fwAngle) {
      Module._RenderRadar_SetAntenaDirection(this.handle, fyAngle, fwAngle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建雷达组网
   * @name RenderRadarGroup
   * @extends Renderable
   */

  function PIERenderRadarGroup(handle, autoRelease) {
    if (!handle) {
      handle = Module._RenderRadarGroup_Create();
    }

    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderRadarGroup.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 设置雷达组网贴图
     *
     * @memberOf RenderRadar#
     */
    setImagePath: function setImagePath(imagePath) {
      var strImage = new PIE.String(imagePath);

      Module._RenderRadarGroup_SetImagePath(this.handle, strImage.getHandle());

      strImage.dispose();
    },
    setGroupConfig: function setGroupConfig(arrRenderRadar) {
      var surfValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.4;
      var arrRender = [];

      if (arrRenderRadar instanceof Array && arrRenderRadar.length > 0) {
        var length = arrRenderRadar.length;
        var i = 0;

        for (i; i < length; i++) {
          var renderRadar = arrRenderRadar.at(i);
          arrRender.push(renderRadar.getHandle());
        }
      }

      if (arrRender.length > 0) {
        var renderArr = new PIEArray(arrRender, PIEArrayType.Int32);

        Module._RenderRadarGroup_SetGroupConfig(this.handle, renderArr.getHandle(), arrRenderRadar.length, surfValue);

        renderArr.dispose();
      }
    },
    setGroupColor: function setGroupColor(color) {
      var colorArray = null;

      if (color instanceof PIEColor) {
        colorArray = color.toArray();
      } else if (color instanceof Array) {
        colorArray = color;
      }

      if (colorArray != null) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderRadarGroup_SetGroupColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },
    updateGroup: function updateGroup() {
      Module._RenderRadarGroup_UpdateGroup(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */
  /**
   * 雷达
   * @name RadarMsg
   * @class RadarMsg
   * 创建雷达对象
   */

  function PIERadarMsg(options) {
    if (options != null) {
      if (options.handle == null) {
        this.handle = Module._RadarMsg_Create();
        this.autoRelease = true;
      } else {
        this.handle = options.handle;
      }
    } else {
      this.handle = Module._RadarMsg_Create();
      this.autoRelease = true;
    }
  }

  Object.assign(PIERadarMsg.prototype, {
    SetPt: function SetPt(value) {
      Module._RadarMsg_SetPt(this.handle, value);
    },
    SetGt: function SetGt(value) {
      Module._RadarMsg_SetGt(this.handle, value);
    },
    // 信号波长m
    SetLanBuda: function SetLanBuda(value) {
      Module._RadarMsg_SetLanBuda(this.handle, value);
    },
    // 目标的雷达反射截面积 m2
    SetThegema: function SetThegema(value) {
      Module._RadarMsg_SetThegema(this.handle, value);
    },
    //脉冲积累数
    SetN: function SetN(value) {
      Module._RadarMsg_SetN(this.handle, value);
    },
    //玻尔兹曼常数
    SetK: function SetK(value) {
      Module._RadarMsg_SetK(this.handle, value);
    },
    //接收机通频带宽度 1.6* pow(10, 6)
    SetBn: function SetBn(value) {
      Module._RadarMsg_SetBn(this.handle, value);
    },
    //雷达接收机噪声系数
    SetFn: function SetFn(value) {
      Module._RadarMsg_SetFn(this.handle, value);
    },
    //雷达接收机最小可检测信噪比 2
    SetS_Delta_N: function SetS_Delta_N(value) {
      Module._RadarMsg_SetS_Delta_N(this.handle, value);
    },
    //以绝对温度表示的雷达接收机噪声温度
    SetT0: function SetT0(value) {
      Module._RadarMsg_SetT0(this.handle, value);
    },
    //方位角
    SetAz_SEnd_Angle: function SetAz_SEnd_Angle(startAngle, endAngle) {
      Module._RadarMsg_SetAz_SEnd_Angle(this.handle, startAngle, endAngle);
    },
    //俯仰角
    SetPitch_SEnd_Angle: function SetPitch_SEnd_Angle(startAngle, endAngle) {
      Module._RadarMsg_SetPitch_SEnd_Angle(this.handle, startAngle, endAngle);
    },
    //设置雷达参数缺失
    SetbParameterMiss: function SetbParameterMiss(value) {
      Module._RadarMsg_SetbParameterMiss(this.handle, value);
    },
    //设置雷达参数缺失情况下的雷达半径
    SetRadius: function SetRadius(value) {
      Module._RadarMsg_SetRadius(this.handle, value);
    },
    //天线图主瓣水平宽度，单位度
    SetLobeWidth_h: function SetLobeWidth_h(value) {
      Module._RadarMsg_SetLobeWidth_h(this.handle, value);
    },
    //天线图主瓣垂直宽度，单位度
    SetLobeWidth_v: function SetLobeWidth_v(value) {
      Module._RadarMsg_SetLobeWidth_v(this.handle, value);
    },
    //天线图主瓣半功率水平宽度，单位度
    SetLlobeWidth_halfPt_h: function SetLlobeWidth_halfPt_h(value) {
      Module._RadarMsg_SetLlobeWidth_halfPt_h(this.handle, value);
    },
    //天线图主瓣半功率垂直宽度，单位度
    SetLobeWidth_halfPt_v: function SetLobeWidth_halfPt_v(value) {
      Module._RadarMsg_SetLobeWidth_halfPt_v(this.handle, value);
    },
    //设置雷达的位置 墨卡托
    SetPos: function SetPos(x, y, z) {
      Module._RadarMsg_SetPos(this.handle, x, y, z);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */
  /**
   * 雷达干扰机
   * @name RadarDisturbMsg
   * @class RadarDisturbMsg
   * 创建雷达干扰机对象
   */

  function PIERadarDisturbMsg(options) {
    if (options != null) {
      if (options.handle == null) {
        this.handle = Module._RadarDisturbMsg_Create();
        this.autoRelease = true;
      } else {
        this.handle = options.handle;
      }
    } else {
      this.handle = Module._RadarDisturbMsg_Create();
      this.autoRelease = true;
    }
  }

  Object.assign(PIERadarDisturbMsg.prototype, {
    SetPJ: function SetPJ(value) {
      Module._RadarDisturbMsg_SetPj(this.handle, value);
    },
    SetGJ: function SetGJ(value) {
      Module._RadarDisturbMsg_SetGj(this.handle, value);
    },
    SetBJ: function SetBJ(value) {
      Module._RadarDisturbMsg_SetBj(this.handle, value);
    },
    SetKJ: function SetKJ(value) {
      Module._RadarDisturbMsg_SetKj(this.handle, value);
    },
    SetK: function SetK(value) {
      Module._RadarDisturbMsg_SetK(this.handle, value);
    },
    SetTheta_Half: function SetTheta_Half(value) {
      Module._RadarDisturbMsg_SetTheta_Half(this.handle, value);
    },
    //设置雷达的位置 墨卡托
    SetPos: function SetPos(x, y, z) {
      Module._RadarDisturbMsg_SetPos(this.handle, x, y, z);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 填充效果枚举
   * @readonly
   * @enum {Number}
   */
  var PIEFillEffect = {
    /**缺省效果*/
    Default: 0,

    /**无类型*/
    Lake: 1,

    /**河流效果*/
    River: 2,

    /**水面效果*/
    Water: 3,

    /**溪流效果*/
    StreamRiver: 4
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
  * 符号类型枚举
  * @readonly
  * @enum {number}
  */
  var PIESymbolType = {
    /**空类型*/
    Null: 0,
    // /**点符号类型*/
    // Marker : 1,
    // /**线符号类型*/
    // Line : 3,
    // /**面符号类型*/
    // Fill : 5,

    /**图标符号类型*/
    Icon: 16 // /**模型符号类型*/
    // Model : 32

  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 创建图标符号对象
   * @name IconSymbol
   * @class IconSymbol
   * 图标符号操作函数
   *
   * @extends Symbol
   * @example
   *
   * let iconSymbol = new PIE.IconSymbol();
   *
   */

  function PIEIconSymbol(handle, autoRelease) {
    if (handle == null) {
      handle = Module._IconSymbol_Create();
      autoRelease = true;
    }

    PIESymbol.call(this, handle, autoRelease);
  }

  PIEIconSymbol.prototype = Object.assign(Object.create(PIESymbol.prototype), {
    // /**
    //  * 获取符号的名称
    //  *
    //  * @memberOf IconSymbol#
    //  * @returns {String} 返回符号名称
    //  *
    //  */
    getPath: function getPath() {
      var strPath = new PIEString$1(256);

      Module._IconSymbol_GetPath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },
    // /**
    //  * 设置符号的路径
    //  * @param {String} path -符号路径
    //  *
    //  * @memberOf IconSymbol#
    //  *
    //  */
    setPath: function setPath(path) {
      var strPath = new PIEString$1(path);

      Module._IconSymbol_SetPath(this.handle, strPath.getHandle());

      strPath.dispose();
    },

    /**
     * 加载并设置符号
     * @param {Object} options -
     * @param {String} options.file -符号从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空)
     * @param {String} options.url  -符号图片的服务地址
     * @param {Boolean} options.base64  -符号图片格式是否是base64格式(默认为否)
     * @param {Int}    options.id       -用来设置符号的ID
     * @param {String} options.name     -用来设置符号的名字
     *
     * @memberOf IconSymbol#
     * @returns {Promise} 返回一个Promise，resolve了一个成功加载图片并设置了Name，ID和Path的IconSymbol对象
     * @example
     * let options = {
     *   file:'Resource/SymbolLib/System/location.png',
     *   url:'http://127.0.0.1:8080/Resource/SymbolLib/System/location.png',
     *   id: 11800,
     *   name:'star'
     * }
     * let iconSymbol = new PIE.IconSymbol();
     * let symbolLib = this.getGlobeControl().getGlobe().getDocument().getSymbolLib();
     * let symbolGroup = symbolLib.getGroup(PIE.SymbolGroupType.Icon)
     * iconSymbol.load(options).then((value)=>{
     * //value就是成功设置图片name，id的iconSymbol，可以对其加入到symbolGroup中，或者其他操作
     * symbolGroup.add(value)
     *
     * })
     *
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var filesPicks = [];
        var file = options.file;
        var url = options.url;

        if (!url || url == "") {
          reject(new Error('PIE.IconSymbol.load: input url is NULL'));
          return;
        }

        function callBack(filelist, urllist, datalist) {
          that.setID(options.id);
          that.setName(options.name);
          that.setPath(filesPicks[0]);
          resolve(that);
        }

        if (options.base64) {
          var _file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + "base64.png"; //设置生成json文件路径


          PIEFile.makeFolder(_file);
          var stream = Module.FS.open(_file, 'w+');
          var raw = window.atob(options.url); // 解码base64得到二进制字符串

          var rawLength = raw.length;
          var dataArray = new Uint8Array(rawLength); // 创建8位无符号整数值的类型化数组

          for (var i = 0; i < raw.length; i++) {
            dataArray[i] = raw.charCodeAt(i);
          }

          var blob = new Blob([dataArray], {
            type: "image/png"
          });
          blob.arrayBuffer().then(function (buffer) {
            var dataArray1 = new Uint8Array(buffer);
            Module.FS.write(stream, dataArray1, 0, dataArray1.length, 0);
            Module.FS.close(stream);
            that.setID(options.id);
            that.setName(options.name);
            that.setPath(_file);
            resolve(that);
          });
        } else {
          var name = PIEFile.getFileName(options.url);

          if (!file) {
            file = "data/" + PIEFile.uuid() + "/" + name;
          }

          filesPicks.push(file);
          var urlsPicks = [];
          urlsPicks.push(options.url);
          PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
        }
      });
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
  * 符号组类型枚举
  * @readonly
  * @enum {number}
  */
  var PIESymbolGroupType = {
    /**空类型*/
    Null: 0,
    // /**点符号组类型*/
    // Marker: 1,
    // /**线符号组类型*/
    // Line: 3,
    // /**填充符号组类型*/
    // Fill: 5,

    /**图标符号组类型*/
    Icon: 16 // /**模型符号组类型*/
    // Model: 32

  };

  //  * @vuepress
  //  *
  //  * ---
  //  * title: PIE-Earth SDK
  //  * headline: 符号库模块
  //  * ---
  //  */
  //
  // /**
  //  * 创建图标符号对象
  //  * @name FillSymbol
  //  * @class FillSymbol
  //  * 填充符号操作函数
  //  *
  //  * @extends Symbol
  //  * @example
  //  *
  //  * let fillSymbol = new PIE.fillSymbol();
  //  *
  //  */

  function PIEFillSymbol(handle, autoRelease) {
    if (handle == null) {
      handle = Module._FillSymbol_Create();
      autoRelease = true;
    }

    PIESymbol.call(this, handle, autoRelease);
  }

  PIEFillSymbol.prototype = Object.assign(Object.create(PIESymbol.prototype), {
    // /**
    //  * 获取符号的名称
    //  * @memberOf FillSymbol#
    //  * @returns {String} 返回符号名称
    //  */
    getPath: function getPath() {
      var strPath = new PIEString$1(256);

      Module._FillSymbol_GetPath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },
    // /**
    //  * 设置符号的名称
    //  * @param {String} path -符号名称
    //  *
    //  * @memberOf FillSymbol#
    //  *
    //  */
    setPath: function setPath(path) {
      var strPath = new PIEString$1(path);

      Module._FillSymbol_SetPath(this.handle, strPath.getHandle());

      strPath.dispose();
    },
    // /**
    //  * 设置符号的是否可以修改颜色
    //  * @param {Boolean} enable -判断标示
    //  *
    //  * @memberOf FillSymbol#
    //  */
    enableCustomColor: function enableCustomColor(enable) {
      Module._FillSymbol_EnableCustomColor(this.handle, enable);
    },
    // /**
    //  * 获取符号的是否可以修改颜色
    //  * @memberOf FillSymbol#
    //  * @returns {Boolean} 返回是否可以修改颜色
    //  */
    isCustomColorEnabled: function isCustomColorEnabled() {
      return Module._FillSymbol_IsCustomColorEnabled(this.handle);
    }
  });

  //  * @vuepress
  //  *
  //  * ---
  //  * title: PIE-Earth SDK
  //  * headline: 符号库模块
  //  * ---
  //  */
  //
  // /**
  //  * 创建点符号对象
  //  * @name MarkerSymbol
  //  * @class MarkerSymbol
  //  * 点符号操作函数
  //  *
  //  * @extends Symbol
  //  */

  function PIEMarkerSymbol(handle, autoRelease) {
    if (handle == null) {
      handle = Module._MarkerSymbol_Create();
      autoRelease = true;
    }

    PIESymbol.call(this, handle, autoRelease);
  }

  PIEMarkerSymbol.prototype = Object.assign(Object.create(PIESymbol.prototype), {
    // /**
    //  * 获取符号的名称
    //  *
    //  * @memberOf MarkerSymbol#
    //  * @returns {String} 返回符号名称
    //  */
    getPath: function getPath() {
      var strPath = new PIEString$1(256);

      Module._MarkerSymbol_GetPath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },
    // /**
    //  * 设置符号的名称
    //  * @param {String} path -符号名称
    //  * @memberOf MarkerSymbol#
    //  */
    setPath: function setPath(path) {
      var strPath = new PIEString$1(path);

      var res = Module._MarkerSymbol_SetPath(this.handle, strPath.getHandle());

      strPath.dispose();
      return res;
    },
    //
    // /**
    //  * 启用自定义颜色
    //  * @param {Boolean} enable -是否成功启用
    //  * @memberOf MarkerSymbol#
    //  */
    enableCustomColor: function enableCustomColor(enable) {
      Module._MarkerSymbol_EnableCustomColor(this.handle, enable);
    },
    // /**
    //  * 判断自定义颜色是否成功启用
    //  * @memberOf MarkerSymbol#
    //  * @returns {Boolean} 返回是否成功启用
    //  */
    isCustomColorEnabled: function isCustomColorEnabled() {
      return Module._MarkerSymbol_IsCustomColorEnabled(this.handle);
    }
  });

  //  * @vuepress
  //  *
  //  * ---
  //  * title: PIE-Earth SDK
  //  * headline: 符号库模块
  //  * ---
  //  */
  //
  // /**
  //  * 创建模型符号对象
  //  * @name ModelSymbol
  //  * @class ModelSymbol
  //  * 模型符号操作函数
  //  *
  //  * @extends Symbol
  //  */

  function PIEModelSymbol(handle, autoRelease) {
    if (handle == null) {
      handle = Module._ModelSymbol_Create();
      autoRelease = true;
    }

    PIESymbol.call(this, handle, autoRelease);
  }

  PIEModelSymbol.prototype = Object.assign(Object.create(PIESymbol.prototype), {
    // /**
    //  * 获取符号的名称
    //  *
    //  * @memberOf ModelSymbol#
    //  * @returns {String} 返回符号名称
    //  */
    getPath: function getPath() {
      var strPath = new PIEString$1(256);

      Module._ModelSymbol_GetPath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },
    // /**
    //  * 设置符号的名称
    //  * @param {String} path -符号名称
    //  * @memberOf ModelSymbol#
    //  */
    setPath: function setPath(path) {
      var strPath = new PIEString$1(path);

      var res = Module._ModelSymbol_SetPath(this.handle, strPath.getHandle());

      strPath.dispose();
      return res;
    },
    // /**
    //  * 获取符号的mesh
    //  *
    //  * @memberOf ModelSymbol#
    //  * @returns {PIEModelMesh} 返回符号mesh
    //  */
    getModelMesh: function getModelMesh() {
      var handle = Module._ModelSymbol_GetModelMesh(this.handle);

      if (handle) {
        return new PIEModelMesh(handle);
      }
    }
  });

  //  * @vuepress
  //  *
  //  * ---
  //  * title: PIE-Earth SDK
  //  * headline: 符号库模块
  //  * ---
  //  */
  //
  // /**
  //  * 创建线符号对象
  //  * @name LineSymbol
  //  * @class LineSymbol
  //  * 线符号操作函数
  //  *
  //  * @extends Symbol
  //  */

  function PIELineSymbol(handle, autoRelease) {
    if (handle == null) {
      handle = Module._LineSymbol_Create();
      autoRelease = true;
    }

    PIESymbol.call(this, handle, autoRelease);
  }

  PIELineSymbol.prototype = Object.assign(Object.create(PIESymbol.prototype), {
    // /**
    //  * 获取符号的名称
    //  *
    //  * @memberOf LineSymbol#
    //  * @returns {String} 返回符号名称
    //  */
    getPath: function getPath() {
      var strPath = new PIEString$1(256);

      Module._LineSymbol_GetPath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },
    // /**
    //  * 设置符号的名称
    //  * @param {String} path -符号名称
    //  *
    //  * @memberOf LineSymbol#
    //  */
    setPath: function setPath(path) {
      var strPath = new PIEString$1(path);

      var res = Module._LineSymbol_SetPath(this.handle, strPath.getHandle());

      strPath.dispose();
      return res;
    },
    // /**
    //  * 启用自定义宽度
    //  * @param {Boolean} enable -是否成功启用
    //  * @memberOf LineSymbol#
    //  */
    enableCustomWidth: function enableCustomWidth(enable) {
      Module._LineSymbol_EnableCustomWidth(this.handle, enable);
    },
    // /**
    //  * 判断是否启用自定义宽度
    //  * @memberOf LineSymbol#
    //  * @returns {Boolean}  返回自定义宽度是否启用
    //  */
    isCustomWidthEnabled: function isCustomWidthEnabled() {
      return Module._LineSymbol_IsCustomWidthEnabled(this.handle);
    },
    // /**
    //  * 启用自定义颜色
    //  * @param {Boolean} enable -是否成功启用
    //  * @memberOf LineSymbol#
    //  */
    enableCustomColor: function enableCustomColor(enable) {
      Module._LineSymbol_EnableCustomColor(this.handle, enable);
    },
    // /**
    //  * 判断自定义颜色是否启用
    //  * @memberOf LineSymbol#
    //  * @returns {Boolean} 返回自定义颜色是否启用
    //  */
    isCustomColorEnabled: function isCustomColorEnabled() {
      return Module._LineSymbol_IsCustomColorEnabled(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 天气渲染
   * @name WeatherRender
   *
   */
  function PIEWeatherRender(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEWeatherRender.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._PIEWeatherRender_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置高度
     * @param {Number} height -高度
     * @memberOf WeatherRender#
     *
     */
    setHeight: function setHeight(height) {
      Module._PIEWeatherRender_SetHeight(this.handle, height);
    },

    /**
     * 设置渲染优先级ID
     * @param {Number} id -渲染优先级ID
     * @memberOf WeatherRender#
     *
     */
    setRenderPriorityID: function setRenderPriorityID(id) {
      Module._PIEWeatherRender_SetRenderPriorityID(this.handle, id);
    },

    /**
     * 添加渲染数据
     * @param {PIEWeatherRenderData} hWeatherData -渲染数据
     * @memberOf WeatherRender#
     *
     */
    addRenderData: function addRenderData(hWeatherData) {
      Module._PIEWeatherRender_AddRenderData(this.handle, hWeatherData.getHandle());
    },

    /**
     * 设置跟踪图层
     * @param {PIEGlobeRenderableLayer} hTrackingLayer -跟踪图层
     * @memberOf WeatherRender#
     *
     */
    setTrackingLayer: function setTrackingLayer(hTrackingLayer) {
      Module._PIEWeatherRender_SetTrackingLayer(this.handle, hTrackingLayer.getHandle());
    },

    /**
     * 设置图层透明值
     * @param {Number} nTransparent -图层透明值
     * @memberOf WeatherRender#
     */
    setTransparent: function setTransparent(nTransparent) {
      Module._PIEWeatherRender_SetTransparent(this.handle, nTransparent);
    },

    /**
     * 设置地图对象
     * @param {PIEGlobe} hGlobe -地图对象
     * @memberOf WeatherRender#
     *
     */
    setGlobe: function setGlobe(hGlobe) {
      Module._PIEWeatherStreamLineRender_SetGlobe(this.handle, hGlobe.handle);
    },

    /**
     * 提交渲染
     * @memberOf WeatherRender#
     */
    initialize: function initialize() {
      Module._PIEWeatherRender_Initialize(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 天气栅格渲染器
   * @name WeatherRasterRender
   * @class WeatherRasterRender
   *
   * @param {Object} options -
   * @param {String} options.name -栅格数据名称
   *
   * @extends WeatherRender
   */

  function PIEWeatherRasterRender(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var strName = new PIEString$1(options.name);
      handle = Module._PIEWeatherRasterRender_Create(strName.getHandle());
      strName.dispose();
      PIEWeatherRender.call(this, handle, autoRelease);
    }
  }

  PIEWeatherRasterRender.prototype = Object.assign(Object.create(PIEWeatherRender.prototype), {
    /**
     * 设置颜色表
     * @param {String} colorPath -颜色表文件路径
     *
     * @memberOf WeatherRasterRender#
     */
    setColorTable: function setColorTable(colorPath) {
      var strPath = new PIEString$1(colorPath);

      Module._PIEWeatherRasterRender_SetColorTable(this.handle, strPath.getHandle());

      strPath.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 天气Mesh渲染器
   * @name WeatherMeshRender
   * @class WeatherMeshRender
   *
   * @param {Object} options -
   * @param {String} options.name -Mesh数据名称
   *
   * @extends WeatherRender
   */

  function PIEWeatherMeshRender(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var strName = new PIEString$1(options.name);
      handle = Module._PIEWeatherMeshRender_Create(strName.getHandle());
      strName.dispose();
      PIEWeatherRender.call(this, handle, autoRelease);
    }
  }

  PIEWeatherMeshRender.prototype = Object.assign(Object.create(PIEWeatherRender.prototype), {
    /**
     * 设置纹理路径
     * @param {String} TextureFile -纹理路径
     *
     * @memberOf WeatherMeshRender#
     */
    setTextureFile: function setTextureFile(TextureFile) {
      Module._PIEWeatherMeshRender_SetTextureFile(this.handle, TextureFile);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 气象动态流线渲染器操作函数
   * @name WeatherDynamicStreamLineRender
   * @class WeatherDynamicStreamLineRender
   *
   * @param {Object} options -
   * @param {String} options.name -气象动态流线渲染器名称
   * @param {Boolean} options.bVisible -背景色的显隐
   * @param {Number} options.linewidth -线宽
   * @param {Number} options.liveage -生存时间
   * @param {Number} options.speedscale -流速比例
   * @param {Number} options.lengthscale -流线的长度比例
   * @param {Number} options.height -高度
   * @param {Number} options.priorityid -渲染优先级ID
   * @extends WeatherRender
   */

  function PIEWeatherDynamicStreamLineRender(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var strName = new PIEString$1(options.name);
      handle = Module._PIEWeatherDynamicStreamLineRender_Create(strName.getHandle(), options.type);
      strName.dispose();
      this.handle = handle;
      autoRelease = true;
      this.setBackGroundVisible(options.bVisible);
      this.setLineWidth(options.linewidth);
      this.setLiveAge(options.liveage);
      this.setSpeedScale(options.speedscale);
      this.setLengthScale(options.lengthscale);
      this.setHeight(options.height);
      this.setRenderPriorityID(options.priorityid);
      PIEWeatherRender.call(this, handle, autoRelease);
    }
  }

  PIEWeatherDynamicStreamLineRender.prototype = Object.assign(Object.create(PIEWeatherRender.prototype), {
    /**
     * 设置动态对象计算出来的背景色的显隐
     * @param {Boolean} bVisible -背景色的显隐
     *
     * @memberOf WeatherDynamicStreamLineRender#
     */
    setBackGroundVisible: function setBackGroundVisible(bVisible) {
      Module._PIEWeatherDynamicStreamLineSetBackGroundVisible(this.handle, bVisible);
    },

    /**
     * 设置线宽
     * @param {Number} dLineWidth -线宽
     *
     * @memberOf WeatherDynamicStreamLineRender#
     */
    setLineWidth: function setLineWidth(dLineWidth) {
      Module._PIEWeatherStreamLineRender_SetLineWidth(this.handle, dLineWidth);
    },

    /**
     * 设置生存时间
     * @param {Number} nAge -生存时间
     *
     * @memberOf WeatherDynamicStreamLineRender#
     */
    setLiveAge: function setLiveAge(nAge) {
      Module._PIEWeatherDynamicStreamLineSetLiveAge(this.handle, nAge);
    },

    /**
     * 设置流速比例
     * @param {Number} dSpeedScale -流速比例
     *
     * @memberOf WeatherDynamicStreamLineRender#
     */
    setSpeedScale: function setSpeedScale(dSpeedScale) {
      Module._PIEWeatherDynamicStreamLineSetSpeedScale(this.handle, dSpeedScale);
    },

    /**
     * 设置粒子密度
     * @param {Number} dDensity -粒子密度
     *
     * @memberOf WeatherDynamicStreamLineRender#
     */
    setDensity: function setDensity(dDensity) {
      Module._PIEWeatherDynamicStreamLineSetDensity(this.handle, dDensity);
    },

    /**
     * 设置流线的长度比例
     * @param {Number} dLengthScale -流线的长度比例
     *
     * @memberOf WeatherDynamicStreamLineRender#
     */
    setLengthScale: function setLengthScale(dLengthScale) {
      Module._PIEWeatherDynamicStreamLineSetLengthScale(this.handle, dLengthScale);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 站点填图渲染器
   * @name WeatherStationFillRender
   * @class WeatherStationFillRender
   *
   * @param {Object} options -
   * @param {String} options.name -站点名称
   *
   * @extends WeatherMeshRender
   */

  function PIEWeatherStationFillRender(options) {
    var handle = null;
    var autoRelease = false;

    if (options != null) {
      var strName = new PIEString$1(options.name);
      handle = Module._PIEWeatherStationRender_Create(strName.getHandle());
      strName.dispose();
      PIEWeatherMeshRender.call(this, handle, autoRelease);
    }
  }

  PIEWeatherStationFillRender.prototype = Object.assign(Object.create(PIEWeatherMeshRender.prototype), {
    /**
     * 设置所有要素可见
     *
     * @memberOf WeatherStationFillRender#
     */
    setAllVisible: function setAllVisible() {
      Module._PIEWeatherStationRender_SetAllVisible(this.handle, true);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 天气渲染数据
   * @name WeatherRenderData
   *
   */

  function PIEWeatherRenderData(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEWeatherRenderData.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._PIERenderData_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置文件格式
     * @param {Number} format -文件格式
     * @memberOf WeatherRenderData#
     *
     */
    setFileFormat: function setFileFormat(format) {
      Module._PIERenderData_SetFileFormat(this.handle, format);
    },

    /**
     * 设置文件路径
     * @param {String} pFilePath -文件路径
     * @memberOf WeatherRenderData#
     *
     */
    setFilePath: function setFilePath(pFilePath) {
      var strPath = new PIEString$1(pFilePath);

      Module._PIERenderData_SetFilePath(this.handle, strPath.getHandle());

      strPath.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 栅格渲染数据操作函数
   * @name RasterRenderData
   * @class RasterRenderData
   *
   * @extends WeatherRenderData
   * @example
   * let rasterRenderData = new PIE.RasterRenderData();
   */

  function PIERasterRenderData(handle, autoRelease) {
    if (handle == null) {
      handle = Module._PIERasterRenderData_Create();
      autoRelease = true;
    }

    PIEWeatherRenderData.call(this, handle, autoRelease);
  }

  PIERasterRenderData.prototype = Object.assign(Object.create(PIEWeatherRenderData.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * Mesh渲染数据
   * @name MeshRenderData
   * @class MeshRenderData
   *
   * @extends WeatherRenderData
   * @example
   * let meshRenderData = new PIE.MeshRenderData();
   */

  function PIEMeshRenderData(handle, autoRelease) {
    if (handle == null) {
      handle = Module._PIEMeshRenderData_Create();
      autoRelease = true;
    }

    PIEWeatherRenderData.call(this, handle, autoRelease);
  }

  PIEMeshRenderData.prototype = Object.assign(Object.create(PIEWeatherRenderData.prototype), {
    /**
     * 渲染数据序列化到文件
     * @param {String} Filepath -文件路径
     * @memberOf MeshRenderData#
     *
     */
    RenderData_SerializeToFile: function RenderData_SerializeToFile(Filepath) {
      Module._PIERenderData_ReSerializeFromFile(this.handle, Filepath);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 动态流线渲染数据
   * @name DynamicStreamLineRenderData
   * @class DynamicStreamLineRenderData
   *
   * @extends WeatherRenderData
   * @example
   * let weatherRenderData = new PIE.DynamicStreamLineRenderData();
   */

  function PIEDynamicStreamLineRenderData(handle, autoRelease) {
    if (handle == null) {
      handle = Module._PIEDynamicStreamLineRenderData_Create();
      autoRelease = true;
    }

    PIEWeatherRenderData.call(this, handle, autoRelease);
  }

  PIEDynamicStreamLineRenderData.prototype = Object.assign(Object.create(PIEWeatherRenderData.prototype), {
    load: function load(options) {
      var that = this;
      options.charset == null ? PIECharsetType.UTF8 : options.charset;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var url = options.url;
        var filesPicks = [];

        if (!url || url == "") {
          reject(new Error('PIE.DynamicStreamLineRenderData.load: input url is NULL'));
          return;
        }

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        filesPicks.push(file);
        var urlsPicks = [];
        urlsPicks.push(url);

        function callBack(filelist, urllist, datalist) {
          that.setFilePath(filesPicks[0]);
          resolve(that);
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 气象模块
   * ---
   */

  /**
   * 体绘制操作函数
   * @name VolumeRayCast
   * @class VolumeRayCast
   *
   * @extends Renderable
   * @example
   * let hVolumeRayCast = new PIE.VolumeRayCast();
   */

  function PIEVolumeRayCast() {
    var handle = null;
    var autoRelease = false;
    handle = Module._VRC_CreatVolumeRayCastRender();
    PIERenderable.call(this, handle, autoRelease);
  }

  PIEVolumeRayCast.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 设置体文件
     * @param {String} filePath -文件路径
     * @param {Number} xLenth -x长度
     * @param {Number} yLength -y长度
     * @param {Number} zLength -z长度
     *
     * @memberOf VolumeRayCast#
     */
    setVolumeFile: function setVolumeFile(filePath, xLenth, yLength, zLength) {
      var strPath = new PIEString$1(filePath);

      Module._VRC_SetVolumeFile(this.handle, strPath.getHandle(), xLenth, yLength, zLength);

      strPath.dispose();
    },

    /**
     * 设置裁剪范围
     * @param {Number} cbLeft -左值
     * @param {Number} cbTop -上值
     * @param {Number} cbRight -右值
     * @param {Number} cbBottom -下值
     *
     * @memberOf VolumeRayCast#
     */
    setClipBound: function setClipBound(cbLeft, cbTop, cbRight, cbBottom) {
      Module._VRC_SetClipBound(this.handle, cbLeft, cbTop, cbRight, cbBottom);
    },

    /**
     * 设置体范围
     * @param {Number} vbLeft -左值
     * @param {Number} vbTop -上值
     * @param {Number} vbRight -右值
     * @param {Number} vbBottom -下值
     *
     * @memberOf VolumeRayCast#
     */
    setVolumeBound: function setVolumeBound(vbLeft, vbTop, vbRight, vbBottom) {
      Module._VRC_SetVolumeBound(this.handle, vbLeft, vbTop, vbRight, vbBottom);
    },

    /**
     * 设置体高度
     * @param {Number} minHeight -最小高度
     * @param {Number} maxHeight -最大高度
     *
     * @memberOf VolumeRayCast#
     */
    setVolumeHeight: function setVolumeHeight(minHeight, maxHeight) {
      Module._VRC_SetVolumeHeight(this.handle, minHeight, maxHeight);
    },

    /**
     * 设置体颜色
     * @param {PIEVector4} rgbaColor -体颜色
     * @param {Number} count -体颜色数量
     *
     * @memberOf VolumeRayCast#
     */
    setVolumeColor: function setVolumeColor(rgbaColor, count) {
      var color = new PIEArray(rgbaColor, PIEArrayType.Float32);

      Module._VRC_SetVolumeColor(this.handle, color.getHandle(), count);

      color.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 地图场景线程处理模式枚举
   * @readonly
   * @enum {number}
   */
  var PIEProcessMode = {
    /**任务驱动线程处理模式*/
    WhenDirty: 0,

    /**线程自动循环处理模式*/
    Continuously: 1
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 四元数类
   * @name Quaternion4
   * @class Quaternion4
   *
   * @param {Number} x -x值
   * @param {Number} y -y值
   * @param {Number} z -z值
   * @param {Number} w -w值
   * @example
   * let quaternion4f = new PIE.Quaternion4(2,5,7,9)
   */

  function PIEQuaternion4(x, y, z, w) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
  }

  Object.assign(PIEQuaternion4.prototype, {
    /**
     * 从轴角转为四元数
     * @param {Number} radian -轴角
     * @param {PIEVector3} rkAxis -三维向量类
     * @memberOf Quaternion4#
     */
    fromAngleAxis: function fromAngleAxis(radian, rkAxis) {
      var fHalfAngle = 0.5 * radian;
      var fSin = Math.sin(fHalfAngle);
      this.w = Math.cos(fHalfAngle);
      this.x = fSin * rkAxis.x;
      this.y = fSin * rkAxis.y;
      this.z = fSin * rkAxis.z;
    },

    /**
     * 由四元数转为旋转矩阵
     * @memberOf Quaternion4#
     * @returns {PIEMatrix4} 返回旋转矩阵
     */
    toRotationMatrix4: function toRotationMatrix4() {
      var fTx = this.x + this.x;
      var fTy = this.y + this.y;
      var fTz = this.z + this.z;
      var fTwx = fTx * this.w;
      var fTwy = fTy * this.w;
      var fTwz = fTz * this.w;
      var fTxx = fTx * this.x;
      var fTxy = fTy * this.x;
      var fTxz = fTz * this.x;
      var fTyy = fTy * this.y;
      var fTyz = fTz * this.y;
      var fTzz = fTz * this.z;
      var kRot = new PIEMatrix4();
      kRot.m[0] = 1.0 - (fTyy + fTzz);
      kRot.m[4] = fTxy - fTwz;
      kRot.m[8] = fTxz + fTwy;
      kRot.m[12] = 0;
      kRot.m[1] = fTxy + fTwz;
      kRot.m[5] = 1.0 - (fTxx + fTzz);
      kRot.m[9] = fTyz - fTwx;
      kRot.m[13] = 0;
      kRot.m[2] = fTxz - fTwy;
      kRot.m[6] = fTyz + fTwx;
      kRot.m[10] = 1.0 - (fTxx + fTyy);
      kRot.m[14] = 0;
      kRot.m[3] = 0;
      kRot.m[7] = 0;
      kRot.m[11] = 0;
      kRot.m[15] = 1;
      return kRot;
    },

    /**
     * 由旋转矩阵转为四元数
     * @param {PIEMatrix3} rot -旋转矩阵
     * @memberOf Quaternion4#
     */
    fromRotationMatrix3: function fromRotationMatrix3(rot) {
      var fTrace = rot.m[0] + rot.m[4] + rot.m[8];
      var fRoot = 0.0;

      if (fTrace > 0.0) {
        fRoot = Math.sqrt(fTrace + 1.0);
        this.w = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        this.x = (rot.m[5] - rot.m[7]) * fRoot;
        this.y = (rot.m[6] - rot.m[2]) * fRoot;
        this.z = (rot.m[1] - rot.m[3]) * fRoot;
      } else {
        var s_iNext = [1, 2, 0];
        var i = 0;
        if (rot.m[4] > rot.m[0]) i = 1;
        if (rot.m[8] > rot.m[4 * i]) i = 2;
        var j = s_iNext[i];
        var k = s_iNext[j];
        fRoot = Math.sqrt(rot.m[4 * i] - rot.m[4 * j] - rot.m[4 * k] + 1.0);
        var apkQuat = [this.x, this.y, this.z];
        apkQuat[i] = 0.5 * fRoot;
        fRoot = 0.5 / fRoot;
        this.w = (rot.m[3 * j + k] - rot.m[3 * k + j]) * fRoot;
        apkQuat[j] = (rot.m[3 * i + j] + rot.m[3 * j + i]) * fRoot;
        apkQuat[k] = (rot.m[3 * i + k] + rot.m[3 * k + i]) * fRoot;
        this.x = apkQuat[0];
        this.y = apkQuat[1];
        this.z = apkQuat[2];
      }
    },

    /**
     * 由四元数转为旋转矩阵
     *
     * @memberOf Quaternion4#
     * @returns {PIEMatrix3} 返回旋转矩阵
     */
    toRotationMatrix3: function toRotationMatrix3() {
      var fTx = this.x + this.x;
      var fTy = this.y + this.y;
      var fTz = this.z + this.z;
      var fTwx = fTx * this.w;
      var fTwy = fTy * this.w;
      var fTwz = fTz * this.w;
      var fTxx = fTx * this.x;
      var fTxy = fTy * this.x;
      var fTxz = fTz * this.x;
      var fTyy = fTy * this.y;
      var fTyz = fTz * this.y;
      var fTzz = fTz * this.z;
      var kRot = new PIEMatrix3();
      kRot.m[0] = 1.0 - (fTyy + fTzz);
      kRot.m[3] = fTxy - fTwz;
      kRot.m[6] = fTxz + fTwy;
      kRot.m[1] = fTxy + fTwz;
      kRot.m[4] = 1.0 - (fTxx + fTzz);
      kRot.m[7] = fTyz - fTwx;
      kRot.m[2] = fTxz - fTwy;
      kRot.m[5] = fTyz + fTwx;
      kRot.m[8] = 1.0 - (fTxx + fTyy);
      return kRot;
    }
  });
  /**
   * 把矩阵拆分成位置，缩放比例和四元数
   * @param {PIEMatrix3} kRot -矩阵
   * @param {PIEVector3} position -位置
   * @param {Number} scale -缩放比例
   * @param {PIEQuaternion4} orientation -四元数
   *
   * @memberOf Quaternion4#
   */

  PIEQuaternion4.prototype.decomposition = function (kRot, position, scale, orientation) {
    var m3x3 = kRot.toRotationMatrix();
    var matQ = new PIEMatrix3();
    var vecU = new PIEVector3();
    m3x3.decomposition(matQ, scale, vecU);
    orientation.fromRotationMatrix3(matQ);
    position.x = kRot.m[12];
    position.y = kRot.m[13];
    position.z = kRot.m[14];
  };
  /**
   * 通过位置，缩放比例和四元数组合成矩阵
   * @param {PIEVector3} position -位置
   * @param {Number} scale -缩放比例
   * @param {PIEQuaternion4} orientation -四元数
   *
   * @memberOf Quaternion4#
   * @returns {PIEMatrix4} 返回矩阵
   */


  PIEQuaternion4.prototype.composition = function (position, scale, orientation) {
    var rot = new PIEMatrix3();
    orientation.toRotationMatrix3(rot); // Make the translation relative to new axes

    var rotT = rot.transpose();
    var trans = PIEMatrix3.prototype.multiplyMV(position, rotT);
    trans.x = -trans.x;
    trans.y = -trans.y;
    trans.z = -trans.z; // Make final matrix

    var viewMatrix = new PIEMatrix4();
    viewMatrix.identity();
    viewMatrix.m[0] = rotT.m[0];
    viewMatrix.m[1] = rotT.m[1];
    viewMatrix.m[2] = rotT.m[2];
    viewMatrix.m[4] = rotT.m[3];
    viewMatrix.m[5] = rotT.m[4];
    viewMatrix.m[6] = rotT.m[5];
    viewMatrix.m[8] = rotT.m[6];
    viewMatrix.m[9] = rotT.m[7];
    viewMatrix.m[10] = rotT.m[8];
    viewMatrix.m[12] = trans.x;
    viewMatrix.m[13] = trans.y;
    viewMatrix.m[14] = trans.z;
    return viewMatrix;
  };
  /**
   * 欧拉角转四元数
   * @param {Number} yaw -欧拉角向量的y轴
   * @param {Number} pitch -欧拉角向量的x轴
   * @param {Number} roll -欧拉角向量的z轴
   *
   * @memberOf Quaternion4#
   * @returns {PIEQuaternion4} 返回四元数
   */


  PIEQuaternion4.prototype.eulerToQuaternion = function (yaw, pitch, roll) {
    var cy = Math.cos(yaw * 0.5);
    var cp = Math.cos(pitch * 0.5);
    var cr = Math.cos(roll * 0.5);
    var sy = Math.sin(yaw * 0.5);
    var sp = Math.sin(pitch * 0.5);
    var sr = Math.sin(roll * 0.5);
    var qw = cy * cp * cr + sy * sp * sr;
    var qx = sy * cp * cr - cy * sp * sr;
    var qy = cy * sp * cr + sy * cp * sr;
    var qz = cy * cp * sr - sy * sp * cr;
    return new PIEQuaternion4(qx, qy, qz, qw);
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建夜光背景渲染对象
   * @name NightLight
   * @class NightLight
   * 夜光背景渲染对象操作函数
   * @extends Renderable
   */

  function PIENightLight(handle, autoRelease) {
    if (!handle) {
      handle = Module._NightLight_Create();
      autoRelease = true;
    }

    PIERenderable.call(this, handle, autoRelease);
  }

  PIENightLight.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放夜光背景渲染对象
     * @memberOf NightLight#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._NightLight_Delete(this.handle);

        this.handle = null;
      }
    },

    /**
     * 通过图片url加载夜光背景渲染对象
     * @param {Object} options -
     * @param {String} options.file -从服务上获取的数据后存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -图片地址(必填项)
     * @param {PIEBounds/Array} options.bounds -图片范围(非必填项)
     * @memberOf NightLight#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     */
    load: function load(options) {
      var that = this;
      var bounds = options.bounds;
      return new Promise(function (resolve, reject) {
        var file = options.file;
        var url = options.url;
        var filesPicks = [];

        if (!url || url == "") {
          reject(new Error('PIE.NightLight.load: input url is NULL'));
          return;
        }

        var name = PIEFile.getFileName(url);

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        filesPicks.push(file);
        var urlsPicks = [];
        urlsPicks.push(options.url);

        function callBack(filelist, urllist, datalist) {
          var strFilePath = new PIEString$1(filelist[0]);

          Module._NightLight_SetImagePath(that.handle, strFilePath.getHandle());

          strFilePath.dispose();

          if (bounds) {
            that.setImageBounds(bounds);
          }

          resolve(that);
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },

    /**
     *
     * 设置背景图片范围
     * @memberOf NightLight#
     * @param {PIEBounds/Array} options.bounds -图片范围
     */
    setImageBounds: function setImageBounds(bounds) {
      var boundsArray = null;

      if (bounds instanceof Array) {
        boundsArray = new PIEArray(bounds, PIEArrayType.Float64);
      } else if (bounds instanceof PIEBounds) {
        boundsArray = new PIEArray([bounds.left, bounds.top, bounds.right, bounds.bottom], PIEArrayType.Float64);
      }

      if (!boundsArray) {
        return;
      }

      Module._NightLight_SetImageBound(this.handle, boundsArray.getHandle());

      boundsArray.dispose();
    },

    /**
     * 获取背景图片范围
     * @memberOf NightLight#
     * @returns {PIEBounds} 返回背景图片范围
     */
    getImageBound: function getImageBound() {
      var boundsArray = new PIEArray(4, PIEArrayType.Float64);

      Module._NightLight_GetImageBound(this.handle, boundsArray.getHandle());

      boundsArray.updateData();
      var bounds = boundsArray.toArray();
      boundsArray.dispose();
      return PIEBounds.fromArray(bounds);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建光晕渲染对象
   * @name GlobeHalo
   * @class GlobeHalo
   * 光晕渲染对象操作函数
   * @extends Renderable
   */

  function PIEGlobeHalo(handle, autoRelease) {
    if (!handle) {
      handle = Module._GlobeHalo_Create();
      autoRelease = true;
    }

    PIERenderable.call(this, handle, autoRelease);
  }

  PIEGlobeHalo.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放光晕渲染对象
     * @memberOf GlobeHalo#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._GlobeHalo_Delete(this.handle);

        this.handle = null;
      }
    },

    /**
     *
     * 设置光晕颜色
     * @memberOf GlobeHalo#
     * @param {PIEColor/Array} options.color -颜色
     */
    setColor: function setColor(color) {
      var colorArray = null;

      if (color instanceof Array) {
        colorArray = new PIEArray(color, PIEArrayType.UInt8);
      } else if (color instanceof PIEColor) {
        colorArray = new PIEArray(color.toArray(), PIEArrayType.UInt8);
      }

      if (!colorArray) {
        return;
      }

      Module._GlobeHalo_SetColor(this.handle, colorArray.getHandle());

      colorArray.dispose();
    },

    /**
     * 获取光晕颜色
     * @memberOf GlobeHalo#
     * @returns {PIEColor} 返回光晕颜色
     */
    getColor: function getColor() {
      var colorArray = new PIEArray(4, PIEArrayType.UInt8);

      Module._GlobeHalo_GetColor(this.handle, colorArray.getHandle());

      colorArray.updateData();
      var color = colorArray.toArray();
      colorArray.dispose();
      return color;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维地图元素模块
   * ---
   */

  /**
   * 场景元素类型枚举
   *@readonly
   *@enum {number}
   */
  var PIEGlobeElementType = {
    //! \brief 空类型
    Null: -1,
    //! \brief 要素元素类型
    Feature: 1
  };

  function PIEProjection(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEProjection.prototype, {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 空间参考系模块
   * ---
   */

  /**
   * 创建空间参考转换器
   * @name ReferenceTranslator
   * @class ReferenceTranslator
   *空间参考转换器操作函数
   *
   *@example
   * let referenceTranslator = new PIE.ReferenceTranslator()
   */

  function PIEReferenceTranslator(handle, autoRelease) {
    if (handle == null) {
      this.handle = Module._RefTranslator_Create();
      this.autoRelease = true;
    } else {
      this.handle = handle;
      this.autoRelease = false;
    }
  }

  Object.assign(PIEReferenceTranslator.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 删除空间参考转换器
     * @memberOf ReferenceTranslator#kong
     */
    dispose: function dispose() {
      Module._RefTranslator_Delete(this.handle);
    },

    /**
     * 设置源空间参考系
     * @param {SpatialReference} spatialReference -空间参考系对象
     * @memberOf ReferenceTranslator#
     *
     * @returns {boolean} 返回是否设置成功
     *
     */
    setCoordSysSrc: function setCoordSysSrc(spatialReference) {
      var result = Module._RefTranslator_SetCoordSysSrc(this.handle, spatialReference.getHandle());

      return Boolean(result);
    },

    /**
     * 设置目标坐标系
     * @param {SpatialReference} spatialReference -空间参考系对象
     * @memberOf ReferenceTranslator#
     *
     * @returns {boolean} 返回是否设置成功
     */
    setCoordSysDes: function setCoordSysDes(spatialReference) {
      var result = Module._RefTranslator_SetCoordSysDes(this.handle, spatialReference.getHandle());

      return Boolean(result);
    },

    /**
     * 点坐标转换
     * @param {PIEVector2/Array} point -坐标点
     * @param {boolean} forward - 标识正算或反算(true-正算：即源参考系转换为目标参考系；false-反算：即目标参考系转换为源参考系)
     * @memberOf ReferenceTranslator#
     *
     * @returns {PIEVector2} 转换成功返回PIEVector2点对象，失败返回null
     */
    translatePoint: function translatePoint(point, forward) {
      if (forward == undefined) {
        forward = true;
      }

      var pointArray = null;

      if (point instanceof PIEVector2) {
        pointArray = [point.x, point.y];
      } else if (point instanceof Array && point.length == 2) {
        pointArray = point;
      }

      if (pointArray) {
        var arrayPoint = new PIEArray(point, PIEArrayType.Float64);

        var res = Module._RefTranslator_TranslatePoint(this.handle, arrayPoint.getHandle(), forward);

        arrayPoint.updateData();
        var destPoint = arrayPoint.toArray();
        arrayPoint.dispose();

        if (res) {
          return new PIEVector2(destPoint[0], destPoint[1]);
        }
      }

      return null;
    },

    /**
     * 范围坐标转换
     * 超出转换范围时，搜索并截取最大有效范围
     * @param {PIEBounds/Array} rcBounds -范围
     * @param {boolean} forward - 标识正算或反算，默认正算(true-正算：即源参考系转换为目标参考系；false-反算：即目标参考系转换为源参考系)
     * @memberOf ReferenceTranslator#
     *
     * @returns {PIEBounds} 转换成功返回PIEBounds对象，失败返回null
     */
    translateBounds: function translateBounds(rcBounds, forward) {
      if (forward == undefined) {
        forward = true;
      }

      var arrayBounds = null;

      if (rcBounds instanceof PIEBounds) {
        arrayBounds = rcBounds.toArray();
      } else if (rcBounds instanceof Array && rcBounds.length == 4) {
        arrayBounds = rcBounds;
      }

      if (arrayBounds) {
        var arrayRcBounds = new PIEArray(arrayBounds, PIEArrayType.Float64);

        var res = Module._RefTranslator_TranslateBounds(this.handle, arrayRcBounds.getHandle(), forward);

        arrayRcBounds.updateData();
        var boundsArray = arrayRcBounds.toArray();
        arrayRcBounds.dispose();

        if (res) {
          return PIEBounds.fromArray(boundsArray);
        }
      }

      return null;
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 空间参考系模块
   * ---
   */

  /**
   * 参考系类型枚举
   * @readonly
   * @enum {number}
   */
  var PIESpatialRefType = {
    /**自定义平面坐标系*/
    USERPLANAR: 0,

    /**地理坐标系*/
    GEOGRAPHIC: 1,

    /**投影坐标系*/
    PROJECTION: 2
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 三维场景模块
   * ---
   */

  /**
   * 创建画布渲染对象
   * @name RenderCanvas
   * @class RenderCanvas
   * 画布渲染对象
   *
   * @extends Renderable
   *@example
   *let renderCanvas = new PIE.RenderCanvas();
   */

  function PIERenderCanvas(handle, autoRelease) {
    handle = Module._RenderCanvas_Create();
    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderCanvas.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 添加密度集列表渲染
     * @param {PIERenderListDensitySet} renderListDensitySet -密度集列表渲染
     * @memberOf RenderCanvas#
     *
     */
    add: function add(renderListDensitySet) {
      Module._RenderCanvas_Add(this.handle, renderListDensitySet.getHandle());
    },

    /**
     * 设置颜色范围
     * @param {PIEColorRange} colorRange -颜色范围
     * @memberOf RenderCanvas#
     *
     */
    setColorRange: function setColorRange(colorRange) {
      Module._RenderCanvas_SetColorRange(this.handle, colorRange.getHandle());
    },

    /**
     * 获取颜色范围
     * @memberOf RenderCanvas#
     * @returns {PIEColorRange} colorRange -颜色范围
     */
    getColorRange: function getColorRange() {
      return Module._RenderCanvas_GetColorRange(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   *  点符号类型
   * @readonly
   * @enum {number}
   */
  var PIEPointType = {
    /** 空类型*/
    Null: 0,
    // /**符号库类型*/
    // Marker: 1,

    /**图标类型*/
    Icon: 16
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 文本对齐方式枚举
   * @readonly
   * @enum {Number}
   */
  var PIETextAlignType = {
    /**左上对齐*/
    LeftTop: 0,

    /**中上对齐*/
    TopCenter: 1,

    /**右上对齐*/
    RightTop: 2,

    /**左下对齐*/
    LeftBottom: 3,

    /**中下对齐*/
    BottomCenter: 4,

    /**右下对齐*/
    RightBottom: 5,

    /**左中对齐*/
    LeftCenter: 6,

    /**中心对齐*/
    Center: 7,

    /**右中对齐*/
    RightCenter: 8
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 图元渲染类型
   *@readonly
   *@enum {number}
   */
  var PIEOperationType = {
    /**点列表*/
    POINT_LIST: 0x0000,

    /**线列表*/
    LINE_LIST: 0x0001,

    /**线带*/
    LINE_STRIP: 0x0003,

    /**三角形列表*/
    TRIANGLE_LIST: 0x0004,

    /**三角形带*/
    TRIANGLE_STRIP: 0x0005,

    /**三角形扇*/
    TRIANGLE_FAN: 0x0006
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */

  /**
   * 分类显示模式
   * @readonly
   * @enum {number}
   */
  var PIEClassifyMode = {
    /**所有类型分类*/
    ClassifyAll: 0,

    /**地形分类*/
    ClassifyGround: 1,

    /** 模型分类*/
    ClassifyModel: 2
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 周期集渲染相关操作函数
   * @name RenderCycleSet
   * @extends Renderable
   */

  function PIERenderCycleSet(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderCycleSet.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 获取空间参考系类型
     *
     * @memberOf RenderCycleSet#
     * @returns {Number} 空间参考系类型
     */
    getSpatialRefType: function getSpatialRefType() {
      return Module._RenderCycleSet_GetSpatialRefType(this.handle);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf RenderCycleSet#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._RenderCycleSet_SetSpatialRefType(this.handle, type);
    },

    /**
     * 获取位置
     *
     * @memberOf RenderCycleSet#
     * @returns {PIEVector3} 返回位置
     */
    getPosition: function getPosition() {
      var arrayPos = new PIEArray(3, PIEArrayType.Float64);

      Module._RenderCycleSet_GetPosition(this.handle, arrayPos);

      arrayPos.updateData();
      var posArray = arrayPos.toArray();
      arrayPos.dispose();
      return new PIEVector3(posArray[0], posArray[1], posArray[2]);
    },

    /**
     * 设置位置
     * @param {(Array/PIEVector3)} position -位置
     * @memberOf RenderCycleSet#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray && posArray.length > 0) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderCycleSet_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取帧速
     *
     * @memberOf RenderCycleSet#
     * @returns {Number} 返回帧速
     */
    getSpeedPerFrame: function getSpeedPerFrame() {
      return Module._RenderCycleSet_GetSpeedPerFrame(this.handle);
    },

    /**
     * 设置帧速
     * @param {Number} speed -速度值
     * @memberOf RenderCycleSet#
     */
    setSpeedPerFrame: function setSpeedPerFrame(speed) {
      Module._RenderCycleSet_SetSpeedPerFrame(this.handle, speed);
    },

    /**
     * 设置当前时间
     * @param {Number} time -当前时间
     * @memberOf RenderCycleSet#
     *
     */
    setCurTime: function setCurTime(time) {
      Module._RenderCycleSet_SetCurTime(this.handle, time);
    },

    /**
     * 获取当前时间
     *
     * @memberOf RenderCycleSet#
     * @returns {Number} 返回当前时间
     */
    getCurTime: function getCurTime() {
      return Module._RenderCycleSet_GetCurTime(this.handle);
    },

    /**
     * 设置开始时间
     * @param {Number} time -开始时间
     * @memberOf RenderCycleSet#
     */
    setStartTime: function setStartTime(time) {
      Module._RenderCycleSet_SetStartTime(this.handle, time);
    },

    /**
     * 获取开始时间
     *
     * @memberOf RenderCycleSet#
     * @returns {Number} -返回开始时间
     */
    getStartTime: function getStartTime() {
      return Module._RenderCycleSet_GetStartTime(this.handle);
    },

    /**
     * 设置结束时间
     * @param {Number} time -结束时间
     * @memberOf RenderCycleSet#
     */
    setEndTime: function setEndTime(time) {
      Module._RenderCycleSet_SetEndTime(this.handle, time);
    },

    /**
     * 获取结束时间
     *
     * @memberOf RenderCycleSet#
     * @returns {Number} -返回结束时间
     */
    getEndTime: function getEndTime() {
      return Module._RenderCycleSet_GetEndTime(this.handle);
    },

    /**
     *设置跟踪时间
     * @param {Number} time -跟踪时间
     * @memberOf RenderCycleSet#
     */
    setTraceTime: function setTraceTime(time) {
      Module._RenderCycleSet_SetTraceTime(this.handle, time);
    },

    /**
     * 获取跟踪时间
     *
     * @memberOf RenderCycleSet#
     * @returns {Number} 返回跟踪时间
     */
    getTraceTime: function getTraceTime() {
      return Module._RenderCycleSet_GetTraceTime(this.handle);
    },

    /**
     *设置启用深度测试
     * @param {Boolean} enable -是否启用深度测试
     * @memberOf RenderCycleSet#
     */
    setEnableDepthTest: function setEnableDepthTest(enable) {
      Module._RenderCycleSet_SetEnableDepthTest(this.handle, enable);
    },

    /**
     * 获取是否启用深度测试
     *
     * @memberOf RenderCycleSet#
     * @returns {Boolean} 启用返回true 否则返回false
     */
    isEnableDepthTest: function isEnableDepthTest() {
      return Module._RenderCycleSet_IsEnableDepthTest(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 线周期集渲染相关操作函数
   * @name RenderLineCycleSet
   *
   * @extends RenderCycleSet
   */

  function PIERenderLineCycleSet(handle, autoRelease) {
    PIERenderCycleSet.call(this, handle, autoRelease);
  }

  PIERenderLineCycleSet.prototype = Object.assign(Object.create(PIERenderCycleSet.prototype), {
    /**
     * 设置循环前进路径
     * @param {String} path -前进路径
     * @memberOf RenderLineCycleSet#
     */
    setForePath: function setForePath(path) {
      if (path != null) {
        var strPath = new PIEString$1(path);

        Module._RenderLineCycleSet_SetForePath(this.handle, strPath.getHandle());

        strPath.dispose();
      }
    },

    /**
     * 获取循环前进路径
     *
     * @memberOf RenderLineCycleSet#
     * @returns {String} 返回前进路径
     * @example
     * let renderLineCycleSet = new PIE.RenderLineCycleSet();
     * var path = renderLineCycleSet.getForePath();
     */
    getForePath: function getForePath() {
      var strPath = new PIEString$1(256);

      Module._RenderLineCycleSet_GetForePath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },

    /**
     * 设置循环返回路径
     * @param {String} path -返回路径
     * @memberOf RenderLineCycleSet#
     *
     */
    setBackPath: function setBackPath(path) {
      if (path != null) {
        var strPath = new PIEString$1(path);

        Module._RenderLineCycleSet_SetBackPath(this.handle, strPath.getHandle());

        strPath.dispose();
      }
    },

    /**
     * 获取循环返回路径
     *
     * @memberOf RenderLineCycleSet#
     * @returns {String} 返回循环返回路径
     * @example
     * let renderLineCycleSet = new PIE.RenderLineCycleSet();
     * var path = renderLineCycleSet.getBackPath();
     */
    getBackPath: function getBackPath() {
      var strPath = new PIEString$1(256);

      Module._RenderLineCycleSet_GetBackPath(this.handle, strPath.getHandle());

      var path = strPath.toString();
      strPath.dispose();
      return path;
    },

    /**
     * 设置循环颜色
     * @param {(Array/PIEColor)} color -循环颜色
     * @memberOf RenderLineCycleSet#
     *
     */
    setForeColor: function setForeColor(color) {
      var colorArray = null;

      if (color instanceof Array) {
        colorArray = color;
      } else if (color instanceof PIEColor) {
        colorArray = color.toArray();
      }

      if (colorArray && colorArray.length > 0) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderLineCycleSet_SetForeColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },

    /**
     * 获取循环颜色
     *
     * @memberOf RenderLineCycleSet#
     * @returns {PIEColor} 返回循环颜色
     * @example
     * let renderLineCycleSet = new PIE.RenderLineCycleSet();
     * var PIEColor = renderLineCycleSet.getForeColor();
     */
    getForeColor: function getForeColor() {
      var arrayColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._RenderLineCycleSet_GetForeColor(this.handle, arrayColor.getHandle());

      arrayColor.updateData();
      var color = arrayColor.toArray();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置循环返回颜色
     * @param {(Array/PIEColor)} color -返回颜色
     * @memberOf RenderLineCycleSet#
     *
     */
    setBackColor: function setBackColor(color) {
      var colorArray = null;

      if (color instanceof Array) {
        colorArray = color;
      } else if (color instanceof PIEColor) {
        colorArray = color.toArray();
      }

      if (colorArray && colorArray.length > 0) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._RenderLineCycleSet_SetBackColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },

    /**
     * 获取循环返回颜色
     *
     * @memberOf RenderLineCycleSet#
     * @returns {PIEColor} 循环返回颜色
     * @example
     * let renderLineCycleSet = new PIE.RenderLineCycleSet();
     * var PIEColor = renderLineCycleSet.getBackColor();
     */
    getBackColor: function getBackColor() {
      var arrayColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._RenderLineCycleSet_GetBackColor(this.handle, arrayColor.getHandle());

      arrayColor.updateData();
      var color = arrayColor.toArray();
      return new PIEColor(color[0], color[1], color[2], color[3]);
    },

    /**
     * 设置循环前进启用线
     * @param {Boolean} enable -是否成功设置
     * @memberOf RenderLineCycleSet#
     *
     */
    setEnableForeLine: function setEnableForeLine(enable) {
      Module._RenderLineCycleSet_SetEnableForeLine(this.handle, enable);
    },

    /**
     * 判断循环前进启用线是否成功设置
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Boolean} 返回是否成功设置
     */
    isEnableForeLine: function isEnableForeLine() {
      return Module._RenderLineCycleSet_IsEnableForeLine(this.handle);
    },

    /**
     * 设置循环返回启用线
     * @param {Boolean} enable -是否成功启动
     * @memberOf RenderLineCycleSet#
     *
     */
    setEnableBackLine: function setEnableBackLine(enable) {
      Module._RenderLineCycleSet_SetEnableBackLine(this.handle, enable);
    },

    /**
     * 判断循环返回启用线是否成功设置
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Boolean} 返回启用线是否成功设置
     */
    isEnableBackLine: function isEnableBackLine() {
      return Module._RenderLineCycleSet_IsEnableBackLine(this.handle);
    },

    /**
     * 设置循环前进线宽度
     * @param {Number} width -前进线宽度
     * @memberOf RenderLineCycleSet#
     *
     */
    setForeLineWidth: function setForeLineWidth(width) {
      Module._RenderLineCycleSet_SetForeLineWidth(this.handle, width);
    },

    /**
     * 获取循环前进线宽度
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Number} 返回前进线宽度
     */
    getForeLineWidth: function getForeLineWidth() {
      return Module._RenderLineCycleSet_GetForeLineWidth(this.handle);
    },

    /**
     * 设置循环返回线宽度
     * @param {Number} width -返回线宽度
     * @memberOf RenderLineCycleSet#
     *
     */
    setBackLineWidth: function setBackLineWidth(width) {
      Module._RenderLineCycleSet_SetBackLineWidth(this.handle, width);
    },

    /**
     * 获取循环返回线宽度
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Number} 返回线宽度
     */
    getBackLineWidth: function getBackLineWidth() {
      return Module._RenderLineCycleSet_GetBackLineWidth(this.handle);
    },

    /**
     * 设置光滑线
     * @param {Boolean} smooth 是否设置成功
     * @memberOf RenderLineCycleSet#
     *
     */
    setLineSmooth: function setLineSmooth(smooth) {
      Module._RenderLineCycleSet_SetLineSmooth(this.handle, smooth);
    },

    /**
     * 判断光滑线是否设置成功
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Boolean} 返回光滑线是否设置成功
     */
    isLineSmooth: function isLineSmooth() {
      return Module._RenderLineCycleSet_IsLineSmooth(this.handle);
    },

    /**
     * 设置跟踪启用时间
     * @param {Boolean} enable 是否成功启用
     * @memberOf RenderLineCycleSet#
     *
     */
    setEnableBackTraceTime: function setEnableBackTraceTime(enable) {
      Module._RenderLineCycleSet_SetEnableBackTraceTime(this.handle, enable);
    },

    /**
     * 判断跟踪启用时间是否成功启动
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Boolean} 返回是否成功启动
     */
    isEnableBackTraceTime: function isEnableBackTraceTime() {
      return Module._RenderLineCycleSet_IsEnableBackTraceTime(this.handle);
    },

    /**
     * 设置跟踪返回时间
     * @param {Number} time -跟踪返回时间
     * @memberOf RenderLineCycleSet#
     *
     */
    setBackTraceTime: function setBackTraceTime(time) {
      Module._RenderLineCycleSet_SetBackTraceTime(this.handle, time);
    },

    /**
     * 获取跟踪返回时间
     *
     * @memberOf RenderLineCycleSet#
     * @returns {Number} 返回跟踪返回时间
     */
    getBackTraceTime: function getBackTraceTime() {
      return Module._RenderLineCycleSet_GetBackTraceTime(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 系统线周期渲染相关操作函数
   * @name RenderSysLineCycleSet
   * @class RenderSysLineCycleSet
   *
   * @extends RenderLineCycleSet
   */

  function PIERenderSysLineCycleSet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderSysLineCycleSet_Create();
      autoRelease = true;
    }

    PIERenderLineCycleSet.call(this, handle, autoRelease);
  }

  PIERenderSysLineCycleSet.prototype = Object.assign(Object.create(PIERenderLineCycleSet.prototype), {
    /**
     * 添加跟踪列表
     * @param {PIETraceList} tracelist -跟踪列表
     * @memberOf RenderLineCycleSet#
     *
     * @returns {Boolean} 返回是否添加成功
     */
    addTraceList: function addTraceList(tracelist) {
      return Module._RenderSysLineCycleSet_AddTraceList(this.handle, tracelist.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建跟踪列表
   * @name TraceList
   * @class TraceList
   * 跟踪列表操作函数
   *
   * @example
   * let traceList = new PIE.TraceList();
   */

  function PIETraceList(handle, autoRelease) {
    if (handle == null) {
      handle = Module._TraceList_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIETraceList.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },
    dispose: function dispose() {
      if (this.autoRelease) ;

      this.handle = null;
    },

    /**
     * 获取空间参考系类型
     *
     * @memberOf TraceList#
     * @returns {Number} 返回空间参考系类型
     */
    getSpatialRefType: function getSpatialRefType() {
      return Module._TraceList_GetSpatialRefType(this.handle);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf TraceList#
     *
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._TraceList_SetSpatialRefType(this.handle, type);
    },

    /**
     * 获取元素个数
     *
     * @memberOf TraceList#
     * @returns {Number} 返回元素个数
     */
    getCount: function getCount() {
      return Module._TraceList_GetCount(this.handle);
    },

    /**
     * 设置位置
     * @param {(Array/PIEVector4)} positions -位置
     * @memberOf TraceList#
     *
     */
    setPositions: function setPositions(positions) {
      var posArray = null;

      if (positions instanceof Array) {
        posArray = positions;
      } else if (positions instanceof PIEVector4) {
        posArray = positions.toArray();
      }

      if (posArray && posArray.length >= 4) {
        var arrayPositions = new PIEArray(posArray, PIEArrayType.Float64);
        var length = posArray.length / 4;

        Module._TraceList_SetPositions(this.handle, arrayPositions.getHandle(), length);

        arrayPositions.dispose();
      }
    },

    /**
     * 获取位置
     *
     * @memberOf TraceList#
     * @returns {PIEVector4} 返回位置
     */
    getPositions: function getPositions() {
      var count = this.getCount();

      if (count) {
        var arrayPostions = new PIEArray(count * 4, PIEArrayType.Float64);

        Module._TraceList_GetPositions(this.handle, arrayPostions.getHandle());

        arrayPostions.updateData();
        var positionsArray = arrayPostions.toArray();
        arrayPostions.dispose();
        return positionsArray;
      }

      return null;
    },

    /**
     * 添加位置
     * @param {(Array/PIEVector4)} positions -位置
     * @memberOf TraceList#
     *
     */
    addPositions: function addPositions(positions) {
      var posArray = null;

      if (positions instanceof Array) {
        posArray = positions;
      } else if (positions instanceof PIEVector4) {
        posArray = positions.toArray();
      }

      if (posArray && posArray.length >= 4) {
        var arrayPositions = new PIEArray(posArray, PIEArrayType.Float64);
        var length = posArray.length / 4;

        Module._TraceList_AddPositions(this.handle, arrayPositions.getHandle(), length);

        arrayPositions.dispose();
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 密度图渲染对象
   *
   * @name RenderDensitySet
   * @extends Renderable
   *
   */

  function PIERenderDensitySet(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderDensitySet.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     *是否设置几何着色器
     *
     * @param {Boolean} enable -是否设置
     * @memberOf RenderDensitySet#
     */
    setGeometryShader: function setGeometryShader(enable) {
      Module._RenderDensity_SetGeometryShader(this.handle, enable);
    },

    /**
     *判断是否设置几何着色器
     *
     * @memberOf RenderDensitySet#
     * @returns {Boolean} 是否设置
     */
    isGeometryShader: function isGeometryShader() {
      return Module._RenderDensity_IsGeometryShader(this.handle);
    },

    /**
     * 获取空间参考系类型
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回空间参考系类型
     */
    getSpatialRefType: function getSpatialRefType() {
      return Module._RenderDensity_GetSpatialRefType(this.handle);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf RenderDensitySet#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._RenderDensity_SetSpatialRefType(this.handle, type);
    },

    /**
     *设置是否在画布上呈现
     * @param {Boolean} enable -是否设置
     * @memberOf RenderDensitySet#
     */
    setCanvasRender: function setCanvasRender(enable) {
      Module._RenderDensity_SetCanvasRender(this.handle, enable);
    },

    /**
     * 判断是否设置在画布上呈现
     *
     * @memberOf RenderDensitySet#
     * @returns {Boolean} 返回是否设置画布
     */
    isCanvasRender: function isCanvasRender() {
      return Module._RenderDensity_IsCanvasRender(this.handle);
    },

    /**
     * 获取透明度
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回透明度
     */
    getTransparent: function getTransparent() {
      return Module._RenderDensity_GetTransparent(this.handle);
    },

    /**
     * 设置透明度
     * @param {Number} transparent -透明度
     * @memberOf RenderDensitySet#
     */
    setTransparent: function setTransparent(transparent) {
      Module._RenderDensity_SetTransparent(this.handle, transparent);
    },

    /**
     * 设置位置
     * @param {(PIEVector3/Array)} position
     * @memberOf RenderDensitySet#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderDensity_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 设置帧速
     * @param {Number} speed -速度
     * @memberOf RenderDensitySet#
     */
    setSpeedPerFrame: function setSpeedPerFrame(speed) {
      Module._RenderDensity_SetSpeedPerFrame(this.handle, speed);
    },

    /**
     * 获取帧速
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回帧速
     */
    getSpeedPerFrame: function getSpeedPerFrame() {
      return Module._RenderDensity_GetSpeedPerFrame(this.handle);
    },

    /**
     * 设置当前时间值
     * @param {Number} time -时间值
     * @memberOf RenderDensitySet#
     */
    setCurTime: function setCurTime(time) {
      Module._RenderDensity_SetCurTime(this.handle, time);
    },

    /**
     * 获取当前时间值
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回当前时间值
     */
    getCurTime: function getCurTime() {
      return Module._RenderDensity_GetCurTime(this.handle);
    },

    /**
     * 设置开始时间
     * @param {Number} time -开始时间
     * @memberOf RenderDensitySet#
     */
    setStartTime: function setStartTime(time) {
      Module._RenderDensity_SetStartTime(this.handle, time);
    },

    /**
     * 获取开始时间
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回时间
     */
    getStartTime: function getStartTime() {
      return Module._RenderDensity_GetStartTime(this.handle);
    },

    /**
     * 设置结束时间
     * @param {Number} time -结束时间
     * @memberOf RenderDensitySet#
     */
    setEndTime: function setEndTime(time) {
      Module._RenderDensity_SetEndTime(this.handle, time);
    },

    /**
     * 获取结束时间
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回结束时间
     */
    getEndTime: function getEndTime() {
      return Module._RenderDensity_GetEndTime(this.handle);
    },

    /**
     *设置跟踪时间
     * @param {Number} time -跟踪时间
     * @memberOf RenderDensitySet#
     */
    setTraceTime: function setTraceTime(time) {
      Module._RenderDensity_SetTraceTime(this.handle, time);
    },

    /**
     *获取跟踪时间
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 返回跟踪时间
     */
    getTraceTime: function getTraceTime() {
      return Module._RenderDensity_GetTraceTime(this.handle);
    },

    /**
     * 获取当前密度数量
     *
     * @memberOf RenderDensitySet#
     * @returns {Number} 密度数量
     */
    getCurDensityCount: function getCurDensityCount() {
      return Module._RenderDensity_GetCurDensityCount(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建密度点对象
   * @name DensityPoint
   * @class DensityPoint
   * 密度点操作函数
   *
   * @example
   * let densityPoint = new PIE.DensityPoint();
   */

  function PIEDensityPoint(handle, autoRelease) {
    if (handle == null) {
      handle = Module._DensityPoint_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEDensityPoint.prototype, {
    setAutoRelease: function setAutoRelease(autoRelease) {
      this.autoRelease = autoRelease;
    },
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放密度点对象
     * @memberOf DensityPoint#
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._DensityPoint_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置颜色
     * @param {(Array/PIEVector4/PIEColor)} color -颜色值
     * @memberOf DensityPoint#
     */
    setColor: function setColor(color) {
      var colorArray = null;

      if (color instanceof Array) {
        colorArray = color;
      } else if (color instanceof PIEVector4) {
        colorArray = color.toArray();
      } else if (color instanceof PIEColor) {
        colorArray = color.toArray();
      }

      if (colorArray) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._DensityPoint_SetColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },

    /**
     * 设置位置
     * @param {(PIEVector4/Array)} position -位置
     * @memberOf DensityPoint#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector4) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._DensityPoint_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 设置半径
     * @param {Number} radius -半径
     * @memberOf DensityPoint#
     */
    setRadius: function setRadius(radius) {
      Module._DensityPoint_SetRadius(this.handle, radius);
    },

    /**
     * 设置风格
     * @param {Number} style -风格
     * @memberOf DensityPoint#
     */
    setStyle: function setStyle(style) {
      Module._DensityPoint_SetStyle(this.handle, style);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf DensityPoint#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._DensityPoint_SetSpatialRefType(this.handle, type);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建列表密度集渲染对象
   * @name RenderListDensitySet
   * @class RenderListDensitySet
   * 列表密度集渲染函数
   *
   * @extends RenderDensitySet
   * @example
   * let renderListDensitySet = new PIE.RenderListDensitySet();
   */

  function PIERenderListDensitySet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderListDensitySet_Create();
      autoRelease = true;
    }

    PIERenderDensitySet.call(this, handle, autoRelease);
  }

  PIERenderListDensitySet.prototype = Object.assign(Object.create(PIERenderDensitySet.prototype), {
    /**
     * 设置缓存池大小
     * @param {Number} size -缓存池大小
     * @memberOf RenderListDensitySet#
     *
     */
    setPoolSize: function setPoolSize(size) {
      Module._RenderListDensitySet_SetPoolSize(this.handle, size);
    },

    /**
     * 获取缓存池大小
     *
     * @memberOf RenderListDensitySet#
     * @returns {Number} 返回缓存池大小
     */
    getPoolSize: function getPoolSize() {
      return Module._RenderListDensitySet_GetPoolSize(this.handle);
    },

    /**
     * 获取密度点数量
     *
     * @memberOf RenderListDensitySet#
     * @returns {Number} 返回密度点数量
     */
    getDensityPointCount: function getDensityPointCount() {
      return Module._RenderListDensitySet_GetDensityPointCount(this.handle);
    },

    /**
     * 移除所有密度点
     * @memberOf RenderListDensitySet#
     */
    removeAllDensityPoint: function removeAllDensityPoint() {
      Module._RenderListDensitySet_RemoveAllDensityPoint(this.handle);
    },

    /**
     * 添加密度点
     * @param {PIEDensityPoint} densityPoint -密度点
     *
     * @memberOf RenderListDensitySet#
     * @returns {Boolean} 返回是否添加成功
     */
    addDensityPoint: function addDensityPoint(densityPoint) {
      return Module._RenderListDensitySet_AddDensityPoint(this.handle, densityPoint.getHandle());
    },

    /**
     * 更新密度点
     * @param {Number} index -密度点索引
     * @param {PIEDensityPoint} densityPoint -密度点
     * @memberOf RenderListDensitySet#
     *
     * @returns {Boolean} 返回是否更新成功
     */
    updateDensityPoint: function updateDensityPoint(index, densityPoint) {
      return Module._RenderListDensitySet_UpdateDensityPoint(this.handle, index, densityPoint.getHandle());
    },

    /**
     * 获取密度点
     * @param {Number} index -密度点索引
     * @memberOf RenderListDensitySet#
     *
     * @returns {PIEDensityPoint} 返回密度点
     */
    getDensityPoint: function getDensityPoint(index) {
      var handle = Module._RenderListDensitySet_GetDensityPoint(this.handle, index);

      return new PIEDensityPoint(handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建世界列表密度集渲染函数
   * @name RenderWorldListDensitySet
   * @class RenderWorldListDensitySet
   * 世界列表密度集渲染函数
   *
   * @extends RenderListDensitySet
   * @example
   * let renderWorldListDensitySet = new PIE.RenderWorldListDensitySet();
   */

  function PIERenderWorldListDensitySet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderWorldListDensitySet_Create();
      autoRelease = true;
    }

    PIERenderListDensitySet.call(this, handle, autoRelease);
  }

  PIERenderWorldListDensitySet.prototype = Object.assign(Object.create(PIERenderListDensitySet.prototype), {
    /**
     * 设置几何着色器
     * @param {Boolean} enable -是否设置成功
     * @memberOf RenderWorldListDensitySet#
     *
     */
    setGeometryShader: function setGeometryShader(enable) {
      Module._RenderWorldListDensitySet_SetGeometryShader(this.handle, enable);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 组密度图对象相关函数
   * @name GroupDensitySet
   * @class GroupDensitySet
   */

  function PIEGroupDensity(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIEGroupDensity.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放组密度图对象
     * @memberOf GroupDensitySet#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._GroupDensity_Delete(this.handle);

        this.handle = null;
      }
    },

    /**
     *  添加密度点
     * @param {PIEDensityPoint} densityPoint -密度点
     * @memberOf GroupaDensitySet#
     * @returns {Boolean} 返回是否添加成功
     */
    addDensityPoint: function addDensityPoint(densityPoint) {
      return Module._GroupDensity_AddDensityPoint(this.handle, densityPoint.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建组密度图渲染对象
   * @name RenderGroupDensitySet
   * @class RenderGroupDensitySet
   * 组密度图渲染函数
   * @extends RenderDensitySet
   */

  function PIERenderGroupDensitySet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderGroupDensitySet_Create();
      autoRelease = true;
    }

    PIERenderDensitySet.call(this, handle, autoRelease);
  }

  PIERenderGroupDensitySet.prototype = Object.assign(Object.create(PIERenderDensitySet.prototype), {
    /**
     * 释放组密度图渲染对象
     * @memberOf RenderGroupDensitySet#
     */
    dispose: function dispose() {
      if (this.autoRelease && this.handle) {
        Module._RenderGroupDensitySet_Delete(this.handle);

        this.handle = null;
      }
    },

    /**
     *  创建组密度图对象
     * @memberOf RenderGroupDensitySet#
     * @returns {PIEGroupDensity} 创建成功返回PIEGroupDensitySet对象，否则返回NULL
     */
    createGroup: function createGroup() {
      var handle = Module._RenderGroupDensitySet_CreateGroup(this.handle);

      if (handle) {
        return new PIEGroupDensity(handle);
      }

      return null;
    },

    /**
     * 添加组密度图
     * @param {PIEGroupDensity} type -组密度图对象
     * @memberOf RenderGroupDensitySet#
     * @returns {Boolean} 添加成功返回true，否则返回false
     */
    addGroup: function addGroup(groupDensity) {
      return Module._RenderGroupDensitySet_AddGroup(this.handle, groupDensity.getHandle());
    },

    /**
     * 获取组密度图对象个数
     * @memberOf RenderGroupDensitySet#
     * @returns {Number} 返回组对象个数
     */
    getGroupCount: function getGroupCount() {
      return Module._RenderGroupDensitySet_GetGroupCount(this.handle);
    },

    /**
     * 移除所有组密度图对象
     * @memberOf RenderGroupDensitySet#
     */
    removeAllGroup: function removeAllGroup() {
      Module._RenderGroupDensitySet_RemoveAllGroup(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建点周期集渲染函数
   * @name RenderPointGridSet
   * 点周期集渲染函数
   *
   * @extends PIERenderCycleSet
   */

  function PIERenderPointCycleSet(handle, autoRelease) {
    PIERenderCycleSet.call(this, handle, autoRelease);
  }

  PIERenderPointCycleSet.prototype = Object.assign(Object.create(PIERenderCycleSet.prototype), {});

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建世界周期点集渲染函数
   * @name RenderWorldPointCycleSet
   * @class RenderWorldPointCycleSet
   * 世界点周期集渲染函数
   *
   * @extends RenderPointCycleSet
   * @example
   * let renderWorldPointCycleSet = new PIE.RenderWorldPointCycleSet();
   */

  function PIERenderWorldPointCycleSet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderWorldPointCycleSet_Create();
      autoRelease = true;
    }

    PIERenderPointCycleSet.call(this, handle, autoRelease);
  }

  PIERenderWorldPointCycleSet.prototype = Object.assign(Object.create(PIERenderPointCycleSet.prototype), {
    /**
     * 添加周期点
     * @param {PIECyclePoint} cyclePoint -周期点
     * @memberOf RenderWorldPointCycleSet#
     *
     * @returns {Boolean} 返回是否添加成功
     */
    addCyclePoint: function addCyclePoint(cyclePoint) {
      return Module._RenderWorldPointCycleSet_AddCyclePoint(this.handle, cyclePoint.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建多维数据集渲染操作相关函数
   * @name RenderCubeSet
   * @extends Renderable
   */

  function PIERenderCubeSet(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderCubeSet.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 删除多维数据集
     * @memberOf RenderCubeSet#
     */
    "delete": function _delete() {
      Module._RenderCubeSet_Delete(this.handle);
    },

    /**
     * 获取空间参考系类型
     *
     * @memberOf RenderCubeSet#
     * @returns {Number} 返回空间参考系类型
     */
    getSpatialRefType: function getSpatialRefType() {
      return Module._RenderCubeSet_GetSpatialRefType(this.handle);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf RenderCubeSet#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._RenderCubeSet_SetSpatialRefType(this.handle, type);
    },

    /**
     * 设置位置
     * @param {(Array/PIEVector3)} position -位置
     * @memberOf RenderCubeSet#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderCubeSet_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 获取位置
     *
     * @memberOf RenderCubeSet#
     * @returns {PIEVector3} 返回位置
     */
    getPosition: function getPosition() {
      var arrayPosition = new PIEArray(3, PIEArrayType.Float64);

      Module._RenderCubeSet_GetPosition(this.handle, arrayPosition.getHandle());

      arrayPosition.updateData();
      var positionArray = arrayPosition.toArray();
      arrayPosition.dispose();
      return new PIEVector3(positionArray[0], positionArray[1], positionArray[2]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建多维数据集列表渲染相关操作函数
   * @name RenderListCubeSet
   * @class RenderListCubeSet
   * 多维数据集列表渲染相关操作函数
   *
   * @extends RenderCycleSet
   */

  function PIERenderListCubeSet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderSysLineCycleSet_Create();
      autoRelease = true;
    }

    PIERenderCubeSet.call(this, handle, autoRelease);
  }

  PIERenderListCubeSet.prototype = Object.assign(Object.create(PIERenderCubeSet.prototype), {
    /**
     * 删除多维数据集列表
     * @memberOf RenderListCubeSet#
     */
    "delete": function _delete() {
      Module._RenderListCubeSet_Delete(this.handle);
    },

    /**
     * 设置缓存池大小
     * @param {Number} size -缓存池大小
     * @memberOf RenderListCubeSet#
     *
     */
    SetPoolSize: function SetPoolSize(size) {
      Module._RenderListCubeSet_SetPoolSize(this.handle, size);
    },

    /**
     * 获取缓存池大小
     *
     * @memberOf RenderListCubeSet#
     * @returns {Number} 返回缓存池大小
     */
    getPoolSize: function getPoolSize() {
      return Module._RenderListCubeSet_GetPoolSize(this.handle);
    },

    /**
     * 移除所有多维数据点
     * @memberOf RenderListCubeSet#
     */
    removeAllCubePoint: function removeAllCubePoint() {
      Module._RenderListCubeSet_RemoveAllCubePoint(this.handle);
    },

    /**
     * 设置增长效果
     * @param {Boolean} enable -是否设置成功
     * @memberOf RenderListCubeSet#
     */
    setEnableGrow: function setEnableGrow(enable) {
      Module._RenderListCubeSet_SetEnableGrow(this.handle, enable);
    },

    /**
     * 获取增长效果
     *
     * @memberOf RenderListCubeSet#
     * @returns {Boolean} 返回是否获取成功
     */
    isEnableGrow: function isEnableGrow() {
      return Module._RenderListCubeSet_IsEnableGrow(this.handle);
    },

    /**
     * 设置当前增长比例
     * @param {Number} growRatio -增长比例
     * @memberOf RenderListCubeSet#
     *
     */
    setCurGrowRatio: function setCurGrowRatio(growRatio) {
      Module._RenderListCubeSet_SetCurGrowRatio(this.handle, growRatio);
    },

    /**
     * 获取当前增长比例
     *
     * @memberOf RenderListCubeSet#
     * @returns {Number} 返回增长比例
     */
    getCurGrowRatio: function getCurGrowRatio() {
      return Module._RenderListCubeSet_GetCurGrowRatio(this.handle);
    },

    /**
     * 设置每一帧的增长比例
     * @param {Number} growRatioPerFrame -每一帧的增长比例
     * @memberOf RenderListCubeSet#
     *
     */
    setGrowRatioPerFrame: function setGrowRatioPerFrame(growRatioPerFrame) {
      Module._RenderListCubeSet_SetGrowRatioPerFrame(this.handle, growRatioPerFrame);
    },

    /**
     * 获取每一帧的增长比例
     *
     * @memberOf RenderListCubeSet#
     * @returns {Number} 返回增长比例
     */
    getGrowRatioPerFrame: function getGrowRatioPerFrame() {
      return Module._RenderListCubeSet_GetGrowRatioPerFrame(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 网格渲染对象
   * @name RenderGridSet
   * @extends Renderable
   */

  function PIERenderGridSet(handle, autoRelease) {
    PIERenderable.call(this, handle, autoRelease);
  }

  PIERenderGridSet.prototype = Object.assign(Object.create(PIERenderable.prototype), {
    /**
     * 获取空间索引类型
     *
     * @memberOf RenderGridSet#
     * @returns {Number} 空间索引类型
     */
    getSpatialRefType: function getSpatialRefType() {
      return Module._RenderGridSet_GetSpatialRefType(this.handle);
    },

    /**
     * 设置空间索引类型
     * @param {Number} type -空间索引类型
     * @memberOf RenderGridSet#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._RenderGridSet_SetSpatialRefType(this.handle, type);
    },

    /**
     * 设置位置
     * @param {(Array/PIEVector3)} position -网格位置
     * @memberOf RenderGridSet#
     *
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector3) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._RenderGridSet_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     *设置网格大小
     * @param {Number} gridSize -网格大小
     * @memberOf RenderGridSet#
     */
    setGridSize: function setGridSize(gridSize) {
      Module._RenderGridSet_SetGridSize(this.handle, gridSize);
    },

    /**
     * 获取网格大小
     *
     * @memberOf RenderGridSet#
     * @returns {Number} 返回网格大小
     */
    getGridSize: function getGridSize() {
      return Module._RenderGridSet_GetGridSize(this.handle);
    },

    /**
     * 设置文本大小
     * @param {Number} textSize -文本大小
     * @memberOf RenderGridSet#
     */
    setTextSize: function setTextSize(textSize) {
      Module._RenderGridSet_SetTextSize(this.handle, textSize);
    },

    /**
     * 获取文本大小
     * @memberOf RenderGridSet#
     * @returns {Number} 返回文本大小
     */
    getTextSize: function getTextSize() {
      return Module._RenderGridSet_GetTextSize(this.handle);
    },

    /**
     * 设置文本颜色
     * @param {(Array/PIEColor)} textColor -文本颜色
     * @memberOf RenderGridSet#
     *
     */
    setTextColor: function setTextColor(textColor) {
      var textcolorArray = [];

      if (textColor instanceof Array) {
        textcolorArray = textColor;
      } else if (textColor instanceof PIEColor) {
        textcolorArray = textColor.toArray();
      }

      if (textcolorArray && textcolorArray.length > 0) {
        var arrayTextColor = new PIEArray(textcolorArray, PIEArrayType.UInt8);

        Module._RenderGridSet_SetTextColor(this.handle, arrayTextColor.getHandle());

        arrayTextColor.dispose();
      }
    },

    /**
     *获取位置
     *
     * @memberOf RenderGridSet#
     * @returns {PIEVector3} 返回位置
     */
    getPosition: function getPosition() {
      var arrayPosition = new PIEArray(3, PIEArrayType.UInt8);

      Module._RenderGridSet_GetPosition(this.handle, arrayPosition.getHandle());

      arrayPosition.updateData();
      var position = arrayPosition.toArray();
      arrayPosition.dispose();
      return new PIEVector3(position[0], position[1], position[2]);
    },

    /**
     * 获取文本颜色
     *
     * @memberOf RenderGridSet#
     * @returns {PIEVector4} 返回文本颜色
     */
    getTextColor: function getTextColor() {
      var arrayTextColor = new PIEArray(4, PIEArrayType.UInt8);

      Module._RenderGridSet_GetTextColor(this.handle, arrayTextColor.getHandle());

      arrayTextColor.updateData();
      var textColor = arrayTextColor.toArray();
      arrayTextColor.dispose();
      return new PIEVector4(textColor[0], textColor[1], textColor[2], textColor[3]);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建网格点集渲染对象
   * @name RenderPointGridSet
   * @class RenderPointGridSet
   * 网格点集相关操作函数
   *
   * @extends RenderGridSet
   * @example
   * let renderPointGridSet = new PIE.RenderPointGridSet();
   */

  function PIERenderPointGridSet(handle, autoRelease) {
    if (handle == null) {
      handle = Module._RenderPointGridSet_Create();
      autoRelease = true;
    }

    PIERenderGridSet.call(this, handle, autoRelease);
  }

  PIERenderPointGridSet.prototype = Object.assign(Object.create(PIERenderGridSet.prototype), {
    /**
     * 清除所有网格点集
     * @memberOf RenderPointGridSet#
     */
    removeAll: function removeAll() {
      Module._RenderPointGridSet_RemoveAll(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建周期点对象
   * @name CyclePoint
   * @class CyclePoint
   * 周期点操作函数
   *
   * @example
   * let cyclePoint = new PIE.CyclePoint();
   */

  function PIECyclePoint(handle, autoRelease) {
    if (handle == null) {
      handle = Module._CyclePoint_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIECyclePoint.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放周期点对象
     * @memberOf CyclePoint#
     */
    dispose: function dispose() {
      if (this.autoRelease) {
        Module._CyclePoint_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置颜色
     * @param {(Array/PIEVector4/PIEColor)} color -颜色值
     * @memberOf CyclePoint#
     */
    setColor: function setColor(color) {
      var colorArray = null;

      if (color instanceof Array) {
        colorArray = color;
      } else if (color instanceof PIEVector4) {
        colorArray = color.toArray();
      } else if (color instanceof PIEColor) {
        colorArray = color.toArray();
      }

      if (colorArray) {
        var arrayColor = new PIEArray(colorArray, PIEArrayType.UInt8);

        Module._CyclePoint_SetColor(this.handle, arrayColor.getHandle());

        arrayColor.dispose();
      }
    },

    /**
     * 设置位置
     * @param {(Array/PIEVector4)} position -位置
     * @memberOf CyclePoint#
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector4) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._CyclePoint_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     * 设置半径
     * @param {Number} radius -半径
     * @memberOf CyclePoint#
     */
    setRadius: function setRadius(radius) {
      Module._CyclePoint_SetRadius(this.handle, radius);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf CyclePoint#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._CyclePoint_SetSpatialRefType(this.handle, type);
    },

    /**
     * 设置风格
     * @param {Number} style -风格
     * @memberOf CyclePoint#
     */
    setStyle: function setStyle(style) {
      Module._CyclePoint_SetStyle(this.handle, style);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 大数据模块
   * ---
   */

  /**
   * 创建多维数据点对象
   * @name CubePoint
   * @class CubePoint
   * 多维数据点操作函数
   *
   *
   * @example
   * let cubePoint = new PIE.CubePoint();
   *
   */

  function PIECubePoint(handle, autoRelease) {
    if (handle == null) {
      handle = Module._CubePoint_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIECubePoint.prototype, {
    getHandle: function getHandle() {
      return this.handle;
    },

    /**
     * 释放多维数据点对象
     * @memberOf CubePoint#
     */
    "delete": function _delete() {
      if (this.autoRelease) {
        Module._CubePoint_Delete(this.handle);
      }

      this.handle = null;
    },

    /**
     * 设置位置
     * @param {(Array/PIEVector4)} position -位置
     * @memberOf CubePoint#
     *
     */
    setPosition: function setPosition(position) {
      var posArray = null;

      if (position instanceof Array) {
        posArray = position;
      } else if (position instanceof PIEVector4) {
        posArray = position.toArray();
      }

      if (posArray) {
        var arrayPos = new PIEArray(posArray, PIEArrayType.Float64);

        Module._CubePoint_SetPosition(this.handle, arrayPos.getHandle());

        arrayPos.dispose();
      }
    },

    /**
     *设置半径
     * @param {Number} radius -半径
     * @memberOf CubePoint#
     */
    setRadius: function setRadius(radius) {
      Module._CubePoint_SetRadius(this.handle, radius);
    },

    /**
     * 设置空间参考系类型
     * @param {Number} type -空间参考系类型
     * @memberOf CubePoint#
     */
    setSpatialRefType: function setSpatialRefType(type) {
      Module._CubePoint_SetSpatialRefType(this.handle, type);
    },

    /**
     *设置顶部颜色
     * @param {Array} topColor -顶部颜色值
     * @memberOf CubePoint#
     */
    setTopColor: function setTopColor(topColor) {
      var arrayTopColor = new PIEArray(topColor, PIEArrayType.Float64);

      Module._CubePoint_SetTopColor(this.handle, arrayTopColor.getHandle());

      arrayTopColor.dispose();
    },

    /**
     *设置底部颜色
     * @param {Array} bottomColor -底部颜色值
     * @memberOf CubePoint#
     */
    setBottomColor: function setBottomColor(bottomColor) {
      var arrayBottomColor = new PIEArray(bottomColor, PIEArrayType.Float64);

      Module._CubePoint_SetBottomColor(this.handle, arrayBottomColor.getHandle());

      arrayBottomColor.dispose();
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 基础模块
   * ---
   */

  /**
   * 布告板的显示模式
   * @readonly
   * @enum {number}
   */
  var PIEBillBoardModeType = {
    /**屏幕对齐模式*/
    ScreenAlignMode: 0,

    /**轴旋转模式*/
    AxialRotateMode: 1,

    /**角度固定模式*/
    AngleFixedMode: 2
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建纹理对象
   * @name GeoTexture
   * @class GeoTexture
   * 纹理对象操作函数
   *
   * @param {Object} options
   * @param {Number} options.texture -纹理编号
   * @param {(Array/PIEVector2)}  options.point -纹理对象的定位点
   * @param {(Array/PIESize)} options.size -纹理的尺寸，宽和高
   * @param {Number} options.color -纹理的尺寸，宽和高
   * @param {Number} options.angle -纹理旋转角度
   *
   * @extends Geometry3D
   * @example
   * var lons = [73.33, 135.05];
   var lats = [3.51, 53.33];
   var x = Math.random() * (lons[1] - lons[0] + 1) + lons[0];
   var y = Math.random() * (lats[1] - lats[0] + 1) + lats[0];

   var point = patialReference.forward([x, y]);
   var geoTexture = new PIE.GeoTexture({
                          texture: 11800,
                          point: point,
                          size: [32, 32],
                          color: [255, 0, 0, 255],
                          angle: 60});
   *
   */

  function PIEGeoTexture(options) {
    var handle = null;
    var autoRelease = false;

    if (options) {
      var texture = options.texture;
      var point = options.point;
      var size = options.size;
      var color = options.color;
      var angle = options.angle;

      if (texture != null && point && size && color && angle != null) {
        var arrayPoint;
        var arraySize;
        var arrayColor;

        if (point instanceof Array) {
          arrayPoint = new PIEArray(point, PIEArrayType.Float64);
        } else if (point instanceof PIEVector2) {
          arrayPoint = new PIEArray([point.x, point.y], PIEArrayType.Float64);
        }

        if (size instanceof Array) {
          arraySize = new PIEArray(size, PIEArrayType.Float64);
        } else if (size instanceof PIESize) {
          arraySize = new PIEArray([size.cx, size.cy], PIEArrayType.Float64);
        }

        if (color instanceof Array) {
          arrayColor = new PIEArray(color, PIEArrayType.UInt8);
        } else if (color instanceof PIEColor) {
          arrayColor = new PIEArray([color.r, color.g, color.b, color.a], PIEArrayType.UInt8);
        }

        if (arrayPoint && arraySize && arrayColor) {
          handle = Module._GeoTexture_Make(texture, arrayPoint.getHandle(), arraySize.getHandle(), arrayColor.getHandle(), angle);
          arrayPoint.dispose();
          arraySize.dispose();
          arrayColor.dispose();
          autoRelease = true;
        }
      }

      if (options.handle) {
        handle = options.handle;
      }
    }

    PIEGeometry3D.call(this, handle, autoRelease);
  }

  PIEGeoTexture.prototype = Object.assign(Object.create(PIEGeometry3D.prototype), {
    /**
     * 获取点纹理对象的定位点坐标
     * @memberOf GeoTexture#
     * @returns {PIEVector2} 返回纹理对象的定位点
     */
    getPoint: function getPoint() {
      var arrayPoint = new PIEArray(2, PIEArrayType.Float64);

      Module._GeoTexture_GetPoint(this.handle, arrayPoint.getHandle());

      arrayPoint.updateData();
      var point = arrayPoint.toArray();
      return new PIEVector2(point[0], point[1]);
    },

    /**
     * 设置点纹理对象的定位点坐标
     * @param {(Array/PIEVector2)} point -纹理对象的定位点坐标
     * @memberOf GeoTexture#
     */
    setPoint: function setPoint(point) {
      var pointArray = null;

      if (point instanceof Array) {
        pointArray = point;
      } else if (point instanceof PIEVector2) {
        pointArray = point.toArray();
      }

      if (pointArray) {
        var arrayPoint = new PIEArray(pointArray, PIEArrayType.Float64);

        Module._GeoTexture_SetPoint(this.handle, arrayPoint.getHandle());

        arrayPoint.dispose();
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 编辑模块
   * ---
   */

  /**
   * 编辑模式枚举
   * @readonly
   * @enum {Number}
   */
  var PIEEditMode = {
    /**非编辑模式*/
    Default: 0,

    /**对象编辑模式*/
    Geometry: 1,

    /**顶点编辑模式*/
    Vertex: 2,

    /**三维对象编辑模式*/
    Geometry3D: 3
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 编辑模块
   * ---
   */

  /**
   * 编辑动作枚举
   * @readonly
   * @enum {Number}
   */
  var PIEEditAction = {
    /**默认编辑动作*/
    Default: 0,

    /**添加节点动作*/
    AddNode: 80,

    /**删除节点动作*/
    DeleteNode: 81
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 符号库模块
   * ---
   */
  // /**
  //  * 线段连接类型枚举
  //  * @readonly
  //  * @enum {Number}
  //  */
  var PIELineJoinStyle = {
    /** 以圆角方式相交 */
    LineJoinRound: 0,

    /** 以平角方式相交 */
    LineJoinBevel: 1,

    /** 以尖角方式相交 */
    LineJoinMiter: 2
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 几何对象模块
   * ---
   */

  /**
   * 创建栅格数据块对象
   * @name RasterBlock
   * @class RasterBlock
   * 创建栅格数据块对象
   *
   * @extends Geometry
   */

  function PIERasterBlock(handle, autoRelease) {
    PIEGeometry.call(this, handle, autoRelease);
  }

  PIERasterBlock.prototype = Object.assign(Object.create(PIEGeometry.prototype), {
    /**
     * 通过图片路径加载栅格数据块对象
     * @param {Object} options -
     * @param {String} options.file -从服务上获取的数据存储到浏览器某个空间下的地址(可以为空，系统默认创建路径)
     * @param {String} options.url -图片路径
     * @param {PIEBounds} options.bounds -栅格数据块地理范围
     * @param {Number} options.ID -对象ID
     * @memberOf RasterBlock
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     * @example
     *  let options = {
     *      bounds:bounds,
     *       file: 'data/pngTest/world.png',
     *       url: 'http://localhost:8080/data/pngTest/world.png',
     *   };
     *
     *  var RasterBlock = new PIE.RasterBlock();
     *   RasterBlock.load(options).then((value) => {
     *   //vaule就是load之后创建的RasterBlock, 可以用来添加到渲染对象中
     *      var FeatureElement = new PIE.GlobeFeatureElement({geometry:value});
     *       GraphicsLayer.add(FeatureElement);
     *   });
     *
     */
    load: function load(options) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var that = _this;
        var bounds = options.bounds;
        var file = options.file;
        var url = options.url;

        if (url == null) {
          return null;
        }

        var name = PIEFile.getFileName(url);

        if (name.indexOf('.') < 0) {
          name += ".png";
        }

        if (!file) {
          file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        var filesPicks = [];
        filesPicks.push(file);
        var urlsPicks = [];
        urlsPicks.push(url);

        function callBack(filelist, urllist, datalist) {
          var handle = null;
          var strpath = new PIEString$1(filesPicks[0]);

          if (bounds != null && bounds instanceof PIEBounds) {
            handle = Module._RasterBlock_FromFileEx(strpath.getHandle(), bounds.left, bounds.top, bounds.right, bounds.bottom);
          } else {
            handle = Module._RasterBlock_FromFile(strpath.getHandle());
          }

          strpath.dispose();
          that.handle = handle;
          that.autoRelease = true;

          if (options != null && that.handle != null && options.ID != null) {
            that.setID(options.ID);
          }

          if (that) {
            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    },

    /**
     * 通过base64图片加载栅格数据块对象
     * @param {Object} options -
     * @param {String} options.data -base64图片数据
     * @param {String} options.bounds -栅格数据块地理范围
     * @param {Number} options.ID -对象ID
     * @memberOf GeoJsonDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     *
     */
    loadBase64: function loadBase64(options) {
      var that = this;
      var data = options.data;
      var bounds = options.bounds;
      return new Promise(function (resolve, reject) {
        if (options != null && options.data != null) {
          var file = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + "base64.png"; //设置生成json文件路径

          PIEFile.makeFolder(file);
          var stream = Module.FS.open(file, 'w+');
          var raw = window.atob(data); // 解码base64得到二进制字符串

          var rawLength = raw.length;
          var dataArray = new Uint8Array(rawLength); // 创建8位无符号整数值的类型化数组

          for (var i = 0; i < raw.length; i++) {
            dataArray[i] = raw.charCodeAt(i);
          }

          var blob = new Blob([dataArray], {
            type: "image/png"
          });
          blob.arrayBuffer().then(function (buffer) {
            var handle = null;
            var dataArray1 = new Uint8Array(buffer);
            Module.FS.write(stream, dataArray1, 0, dataArray1.length, 0);
            Module.FS.close(stream);
            var strpath = new PIEString$1(file);

            if (bounds != null && bounds instanceof PIEBounds) {
              handle = Module._RasterBlock_FromFileEx(strpath.getHandle(), bounds.left, bounds.top, bounds.right, bounds.bottom);
            } else {
              handle = Module._RasterBlock_FromFile(strpath.getHandle());
            }

            that.handle = handle;
            that.autoRelease = true;

            if (that.handle != null && options.ID != null) {
              that.setID(options.ID);
            }

            resolve(that);
          });
        } else {
          resolve(null);
        }
      });
    },

    /**
     * 获取栅格数据块地理范围
     *
     * @memberOf RasterBlock#
     * @returns {PIEBounds} 返回地理范围
     *
     */
    getBounds: function getBounds() {
      var boundsArr = new PIEArray(4, PIEArrayType.Float64);

      Module._RasterBlock_GetBounds(this.handle, boundsArr.getHandle());

      boundsArr.updateData();
      var array = boundsArr.toArray();
      var bounds = new PIEBounds(array[0], array[1], arrayS[2], array[3]);
      boundsArr.dispose();
      return bounds;
    },

    /**
     * 设置栅格数据块地理范围
     *
     * @memberOf RasterBlock#
     * @param {PIEBounds} bounds -地理范围
     *
     */
    setBounds: function setBounds(bounds) {
      if (bounds != null && bounds instanceof PIEBounds) {
        var boundsArray = new PIEArray(bounds.toArray(), PIEArrayType.Float64);

        Module._RasterBlock_SetBounds(this.handle, boundsArray.getHandle());

        boundsArray.dispose();
      }
    },

    /**
     * 栅格数据块坐标点串数组
     *
     * @memberOf RasterBlock#
     * @returns {Array} 返回栅格数据块坐标点串数组
     *
     */
    getPoints: function getPoints() {
      var pointsArr = new PIEArray(8, PIEArrayType.Float64);

      Module._RasterBlock_GetPoints(this.handle, pointsArr.getHandle());

      pointsArr.updateData();
      var arrayPoints = pointsArr.toArray();
      pointsArr.dispose();
      return arrayPoints;
    },

    /**
     * 设置栅格数据块坐标点串数组
     *
     * @memberOf RasterBlock#
     * @param {Array} points -栅格数据块坐标点串数组(四组坐标点，所以大小应该为8)
     * @returns {Boolean} 设置成功返回true,否则返回false
     */
    setPoints: function setPoints(points) {
      if (points != null && points instanceof Array && points.length == 8) {
        var pointsArr = new PIEArray(points, PIEArrayType.Float64);

        var res = Module._RasterBlock_SetPoints(this.handle, pointsArr.getHandle());

        pointsArr.dispose();
        return res;
      } else {
        return false;
      }
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 数据源模块
   * ---
   */

  /**
   * 创建SMS数据源
   * @name SMSDataSource
   * @class SMSDataSource
   * GeoJson数据源操作函数
   * @extends FeatureDataSource
   */

  function PIESMSDataSource(handle, autoRelease) {
    PIEFeatureDataSource.call(this, handle, autoRelease);
  }

  PIESMSDataSource.prototype = Object.assign(Object.create(PIEFeatureDataSource.prototype), {
    /**
     * 通过数据源路径加载并打开数据源
     * @param {Object} options -
     * @param {String} options.SMSUrl -sms数据服务地址
     * @param {Array} options.filters -需要加载的要素类型
     * @memberOf SMSDataSource#
     * @returns {Promise} 返回一个promise，在value中存放数据源数据
     * @example
     *
     let options = {
            SMSUrl: "http://localhost:8080/data/DN08511111/DN08511111.SMS",
            filters: ["A", "B", "C", "D", "E", "F", "G"],
        };
     let workspace = viewer.getGlobe().getDocument();
     let dataSource = new PIE.SMSDataSource();
     dataSource.load(options).then((value)=>{
           //vaule就是load之后的被成功打开的dataSource 可以用来添加到工作空间中，然后与layer绑定
            workspace.getDataSourceManager().addDataSource(value);
       })
    types : A-测量控制点
            B-工农业社会文化设施
            C-居民地及附属设施
            D-陆地交通
            E-管线
            F-水域陆地
            G-海底地貌及底质
            H-礁石沉船障碍物
            I-水文
            J-陆地地貌及土质
            K-境界与政区
            L-植被
            M-地磁要素
            N-助航设备及航道
            O-海上区域界线
            P-航空要素
            Q-J事区域
            R-注记
            W-J事目标
            T-区域
     */
    load: function load(options) {
      var that = this;
      return new Promise(function (resolve, reject) {
        var SMSFile = "";
        var SMSUrl = options.SMSUrl;

        if (SMSUrl == null) {
          return null;
        }

        var name = PIEFile.getFileName(SMSUrl);

        if (!SMSFile) {
          SMSFile = "data/" + PIEFile.uuid() + "/" + PIEFile.uuid() + name;
        }

        var filesPicks = [];
        var urlsPicks = [];
        filesPicks.push(SMSFile);
        urlsPicks.push(SMSUrl);
        var filters = [];

        if (options.filters != null) {
          filters = options.filters;
        }

        var types = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "W", "T"];
        var suffixs = ["MS", "SX", "TP", "ZB"];

        for (var _i = 0, _types = types; _i < _types.length; _i++) {
          var type = _types[_i];

          if (filters.length > 0 && !filters.includes(type)) {
            continue;
          }

          var _iterator = _createForOfIteratorHelper(suffixs),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var suf = _step.value;
              var suffixValue = '.' + type + suf;
              var url = SMSUrl.replace(/.SMS/, suffixValue);
              urlsPicks.push(url);
              var file = SMSFile.replace(/.SMS/, suffixValue);
              filesPicks.push(file);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }

        function callBack(filelist, urllist, datalist) {
          if (that.open({
            database: filesPicks[0],
            alias: options.alias
          })) {
            resolve(that);
          }
        }

        PIEFile.loadFiles(filesPicks, urlsPicks, callBack);
      });
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * SMS搭配条件操作函数
   * @name SMSMatchCondition
   */
  function PIESMSMatchCondition(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESMSMatchCondition.prototype, {
    /**
     * 删除SMS搭配条件对象
     * @memberOf SMSMatchCondition#
     */
    "delete": function _delete() {
      Module._SMSMatchCondition_Delete(this.handle);
    },

    /**
     * 获取SMS搭配条件类型
     *
     * @memberOf SMSMatchCondition#
     * @returns {Number} 返回SMS搭配条件类型
     */
    getConditionType: function getConditionType() {
      return Module._SMSMatchCondition_GetConditionType(this.handle);
    },

    /**
     * 获取SMS搭配条件的值类型
     *
     * @memberOf SMSMatchCondition#
     * @returns {PIEVarType} 返回SMS搭配条件的值类型
     */
    getValueType: function getValueType() {
      return Module._SMSMatchCondition_GetValueType(this.handle);
    },

    /**
     * 获取是否和SMS搭配条件匹配
     * @param {Number} value -与SMS搭配条件匹配的值
     *
     * @memberOf SMSMatchCondition#
     * @returns {Boolean} 返回是否和SMS搭配条件匹配
     */
    isMatch: function isMatch(value) {
      return Module._SMSMatchCondition_IsMatch(this.handle, value);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * SMS规则项操作函数
   * @name SMSRule
   */

  function PIESMSRule(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESMSRule.prototype, {
    /**
     * 删除SMS规则项对象
     * @memberOf SMSRule#
     */
    "delete": function _delete() {
      Module._SMSRule_Delete(this.handle);
    },

    /**
     * 设置SMS规则项搭配条件
     * @param {PIESMSMatchCondition} matchCondition -SMS规则项搭配条件
     * @memberOf SMSRule#
     */
    setMatchCondition: function setMatchCondition(matchCondition) {
      Module._SMSRule_SetMatchCondition(this.handle, matchCondition);
    },

    /**
     * 获取SMS规则项搭配条件
     *
     * @memberOf SMSRule#
     * @returns {PIESMSMatchCondition} 返回SMS规则项搭配条件
     */
    getMatchCondition: function getMatchCondition() {
      var handle = Module._SMSRule_GetMatchCondition(this.handle);

      if (handle) {
        return new PIESMSMatchCondition(handle);
      }
    },

    /**
     * 设置SMS规则项名称
     * @param {String} name -SMS规则项名称
     * @memberOf SMSRule#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._SMSRule_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取SMS规则项名称
     *
     * @memberOf SMSRule#
     * @returns {String} 返回SMS规则项名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._SMSRule_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置SMS规则项几何类型
     * @param {PIESMSGeometryType} geometryType -SMS规则项几何类型
     * @memberOf SMSRule#
     */
    setGeometryType: function setGeometryType(geometryType) {
      Module._SMSRule_SetGeometryType(this.handle, geometryType.getHandle());
    },

    /**
     * 获取SMS规则项几何类型
     *
     * @memberOf SMSRule#
     * @returns {PIESMSGeometryType} 返回SMS规则项几何类型
     */
    getGeometryType: function getGeometryType() {
      return Module._SMSRule_GetGeometryType(this.handle);
    },

    /**
     * 设置SMS规则项是否可见
     * @param {Boolean} visible -SMS规则项是否可见
     * @memberOf SMSRule#
     */
    setVisible: function setVisible(visible) {
      Module._SMSRule_SetVisible(this.handle, visible);
    },

    /**
     * 获取SMS规则项是否可见
     *
     * @memberOf SMSRule#
     * @returns {Boolean} 返回SMS规则项是否可见
     */
    isVisible: function isVisible() {
      return Module._SMSRule_IsVisible(this.handle);
    },

    /**
     * 设置SMS规则项最大可见比例尺
     * @param {Number} maxVisibleScale -SMS规则项最大可见比例尺
     * @memberOf SMSRule#
     */
    setMaxVisibleScale: function setMaxVisibleScale(maxVisibleScale) {
      Module._SMSRule_SetMaxVisibleScale(this.handle, maxVisibleScale);
    },

    /**
     * 获取SMS规则项最大可见比例尺
     *
     * @memberOf SMSRule#
     * @returns {Number} 返回SMS规则项最大可见比例尺
     */
    getMaxVisibleScale: function getMaxVisibleScale() {
      return Module._SMSRule_GetMaxVisibleScale(this.handle);
    },

    /**
     * 设置SMS规则项最小可见比例尺
     * @param {Number} minVisibleScale -SMS规则项最小可见比例尺
     * @memberOf SMSRule#
     */
    setMinVisibleScale: function setMinVisibleScale(minVisibleScale) {
      Module._SMSRule_SetMinVisibleScale(this.handle, minVisibleScale);
    },

    /**
     * 获取SMS规则项最小可见比例尺
     *
     * @memberOf SMSRule#
     * @returns {Number} 返回SMS规则项最小可见比例尺
     */
    getMinVisibleScale: function getMinVisibleScale() {
      return Module._SMSRule_GetMinVisibleScale(this.handle);
    },

    /**
     * 设置SMS规则项点风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格对象内部是否克隆
     * @memberOf SMSRule#
     */
    setPointStyle: function setPointStyle(style, clone) {
      Module._SMSRule_SetPointStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取SMS规则项点风格
     *
     * @memberOf SMSRule#
     * @returns {PIEStyle} 返回SMS规则项对象，失败返回NULL
     */
    getPointStyle: function getPointStyle() {
      var handle = Module._SMSRule_GetPointStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    },

    /**
     * 设置SMS规则项线风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格对象内部是否克隆
     * @memberOf SMSRule#
     */
    setLineStyle: function setLineStyle(style, clone) {
      Module._SMSRule_SetLineStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取SMS规则项线风格
     *
     * @memberOf SMSRule#
     * @returns {PIEStyle} 返回SMS规则项对象，失败返回NULL
     */
    getLineStyle: function getLineStyle() {
      var handle = Module._SMSRule_GetLineStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    },

    /**
     * 设置SMS规则项面风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格对象内部是否克隆
     * @memberOf SMSRule#
     */
    setFillStyle: function setFillStyle(style, clone) {
      Module._SMSRule_SetFillStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取SMS规则项面风格
     *
     * @memberOf SMSRule#
     * @returns {PIEStyle} 返回SMS规则项对象，失败返回NULL
     */
    getFillStyle: function getFillStyle() {
      var handle = Module._SMSRule_GetFillStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    },

    /**
     * 设置SMS规则项文字风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格对象内部是否克隆
     * @memberOf SMSRule#
     */
    setTextStyle: function setTextStyle(style, clone) {
      Module._SMSRule_SetTextStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取SMS规则项文字风格
     *
     * @memberOf SMSRule#
     * @returns {PIEStyle} 返回SMS规则项对象，失败返回NULL
     */
    getTextStyle: function getTextStyle() {
      var handle = Module._SMSRule_GetTextStyle(this.handle);

      return PIEStyleFactory.CreateInstance(handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 设置SMS子图层搭配条件
   * @name SMSSubLayer
   * @class SMSSubLayer
   * SMS子图层操作函数
   */

  function PIESMSSubLayer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._SMSSubLayer_Create();
      autoRelease = true;
    }

    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESMSSubLayer.prototype, {
    /**
     * 删除图层
     * @memberOf SMSSubLayer#
     */
    "delete": function _delete() {
      Module._SMSSubLayer_Delete(this.handle);
    },

    /**
     * 设置SMS子图层搭配条件
     * @param {PIESMSMatchCondition} matchCondition -SMS子图层搭配条件
     * @memberOf SMSSubLayer#
     */
    setMatchCondition: function setMatchCondition(matchCondition) {
      Module._SMSSubLayer_SetMatchCondition(this.handle, matchCondition.getHandle());
    },

    /**
     * 获取SMS子图层搭配条件
     *
     * @memberOf SMSSubLayer#
     * @returns {PIESMSMatchCondition} 返回SMS子图层搭配条件
     */
    getMatchCondition: function getMatchCondition() {
      var handle = Module._SMSSubLayer_GetMatchCondition(this.handle);

      if (handle) {
        return new PIESMSMatchCondition(handle);
      }
    },

    /**
     * 设置SMS子图层名称
     * @param {String} name -SMS子图层名称
     * @memberOf SMSSubLayer#
     */
    setName: function setName(name) {
      var strName = new PIEString$1(name);

      Module._SMSSubLayer_SetName(this.handle, strName.getHandle());

      strName.dispose();
    },

    /**
     * 获取SMS子图层名称
     *
     * @memberOf SMSSubLayer#
     * @returns {String} 返回SMS子图层名称
     */
    getName: function getName() {
      var strName = new PIEString$1(256);

      Module._SMSSubLayer_GetName(this.handle, strName.getHandle());

      var name = strName.toString();
      strName.dispose();
      return name;
    },

    /**
     * 设置SMS子图层是否可见
     * @param {Boolean} visible -SMS子图层是否可见
     * @memberOf SMSSubLayer#
     */
    setVisible: function setVisible(visible) {
      Module._SMSSubLayer_SetVisible(this.handle, visible);
    },

    /**
     * 获取SMS子图层是否可见
     *
     * @memberOf SMSSubLayer#
     * @returns {Boolean} 返回SMS子图层是否可见
     */
    isVisible: function isVisible() {
      return Module._SMSSubLayer_IsVisible(this.handle);
    },

    /**
     * 设置SMS子图层符号最大可见比例尺
     * @param {Number} maxVisibleScale -SMS子图层符号最大可见比例尺
     * @memberOf SMSSubLayer#
     */
    setSymbolMaxVisibleScale: function setSymbolMaxVisibleScale(maxVisibleScale) {
      Module._SMSSubLayer_SetSymbolMaxVisibleScale(this.handle, maxVisibleScale);
    },

    /**
     * 获取SMS子图层符号最大可见比例尺
     *
     * @memberOf SMSSubLayer#
     * @returns {Number} 返回SMS子图层符号最大可见比例尺
     */
    getSymbolMaxVisibleScale: function getSymbolMaxVisibleScale() {
      return Module._SMSSubLayer_GetSymbolMaxVisibleScale(this.handle);
    },

    /**
     * 设置SMS子图层符号最小可见比例尺
     * @param {Number} minVisibleScale -SMS子图层符号最小可见比例尺
     * @memberOf SMSSubLayer#
     */
    setSymbolMinVisibleScale: function setSymbolMinVisibleScale(minVisibleScale) {
      Module._SMSSubLayer_SetSymbolMinVisibleScale(this.handle, minVisibleScale);
    },

    /**
     * 获取SMS子图层符号最小可见比例尺
     *
     * @memberOf SMSSubLayer#
     * @return {Number} 返回SMS子图层符号最小可见比例尺
     */
    getSymbolMinVisibleScale: function getSymbolMinVisibleScale() {
      return Module._SMSSubLayer_GetSymbolMinVisibleScale(this.handle);
    },

    /**
     * 设置SMS子图层注记最大可见比例尺
     * @param {Number} maxVisibleScale -SMS子图层注记最大可见比例尺
     * @memberOf SMSSubLayer#
     */
    setAnnoMaxVisibleScale: function setAnnoMaxVisibleScale(maxVisibleScale) {
      Module._SMSSubLayer_SetAnnoMaxVisibleScale(this.handle, maxVisibleScale);
    },

    /**
     * 获取SMS子图层注记最大可见比例尺
     *
     * @memberOf SMSSubLayer#
     * @return {Number} 返回SMS子图层注记最大可见比例尺
     */
    getAnnoMaxVisibleScale: function getAnnoMaxVisibleScale() {
      return Module._SMSSubLayer_GetAnnoMaxVisibleScale(this.handle);
    },

    /**
     * 设置SMS子图层符号最小可见比例尺
     * @param {Number} minVisibleScale -SMS子图层符号最小可见比例尺
     * @memberOf SMSSubLayer#
     */
    setAnnoMinVisibleScale: function setAnnoMinVisibleScale(minVisibleScale) {
      Module._SMSSubLayer_SetAnnoMinVisibleScale(this.handle, minVisibleScale);
    },

    /**
     * 获取SMS子图层符号最小可见比例尺
     *
     * @memberOf SMSSubLayer#
     * @return {Number} 返回SMS子图层符号最小可见比例尺
     */
    getAnnoMinVisibleScale: function getAnnoMinVisibleScale() {
      return Module._SMSSubLayer_GetAnnoMinVisibleScale(this.handle);
    },

    /**
     * 设置SMS子图层注记字段
     * @param {String} fieldName -SMS子图层注记字段
     * @memberOf SMSSubLayer#
     */
    setAnnoFieldName: function setAnnoFieldName(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      Module._SMSSubLayer_SetAnnoFieldName(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
    },

    /**
     * 获取SMS子图层注记字段
     *
     * @memberOf SMSSubLayer#
     * @return {String} 返回SMS子图层注记字段
     */
    getAnnoFieldName: function getAnnoFieldName() {
      var strFieldName = new PIEString$1(256);

      Module._SMSSubLayer_GetAnnoFieldName(this.handle, strFieldName.getHandle());

      var fieldName = strFieldName.toString();
      strFieldName.dispose();
      return fieldName;
    },

    /**
     * 设置SMS子图层注记风格
     * @param {PIEStyle} style -风格对象
     * @param {Boolean} clone -风格对象内部是否克隆
     * @memberOf SMSSubLayer#
     */
    setAnnoTextStyle: function setAnnoTextStyle(style, clone) {
      Module._SMSSubLayer_SetAnnoTextStyle(this.handle, style.getHandle(), clone);
    },

    /**
     * 获取SMS子图层注记风格
     *
     * @memberOf SMSSubLayer#
     * @return {PIEStyle} 返回SMS子图层对象，失败返回NULL:
     */
    getAnnoTextStyle: function getAnnoTextStyle() {
      return Module._SMSSubLayer_GetAnnoTextStyle(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * SMS子图层管理类操作函数
   * @name SMSSubLayerManager
   */

  function PIESMSSubLayerManager(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESMSSubLayerManager.prototype, {
    /**
     * 通过字段值查找子图层
     * @param {Number} value -字段值
     *
     * @memberOf SMSSubLayerManager#
     * @return {PIESMSSubLayer} 返回指定字段值的子图层
     */
    findSubLayer: function findSubLayer(value) {
      var handle = Module._SMSSubLayerManager_FindSubLayer(this.handle, value);

      if (handle) {
        return new PIESMSSubLayer(handle);
      }
    },

    /**
     * 获取子图层数组个数
     *
     * @memberOf SMSSubLayerManager#
     * @return {Number} 返回子图层数组个数
     */
    getSubLayerCount: function getSubLayerCount() {
      return Module._SMSSubLayerManager_GetSubLayerCount(this.handle);
    },

    /**
     * 获取指定索引子图层
     * @param {Number} index -子图层数组索引
     *
     * @memberOf SMSSubLayerManager#
     * @return {PIESMSSubLayer} 返回指定索引的子图层
     */
    getSubLayerAt: function getSubLayerAt(index) {
      var handle = Module._SMSSubLayerManager_GetSubLayerAt(this.handle, index);

      if (handle) {
        return new PIESMSSubLayer(handle);
      }
    },

    /**
     * 设置指定索引子图层
     * @param {Number} index -子图层数组索引
     * @param {PIESMSSubLayer} subLayer -子图层
     * @memberOf SMSSubLayerManager#
     */
    setSubLayerAt: function setSubLayerAt(index, subLayer) {
      Module._SMSSubLayerManager_SetSubLayerAt(this.handle, index, subLayer.getHandle());
    },

    /**
     * 添加子图层
     * @param {PIESMSSubLayer} subLayer -子图层
     * @memberOf SMSSubLayerManager#
     */
    addSubLayer: function addSubLayer(subLayer) {
      Module._SMSSubLayerManager_AddSubLayer(this.handle, subLayer.getHandle());
    },

    /**
     * 移除子图层
     * @param {PIESMSSubLayer} subLayer -子图层
     * @memberOf SMSSubLayerManager#
     */
    removeSubLayer: function removeSubLayer(subLayer) {
      Module._SMSSubLayerManager_RemoveSubLayer(this.handle, subLayer.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * SMS规则管理类操作函数
   * @name SMSRuleManager
   */

  function PIESMSRuleManager(handle, autoRelease) {
    this.handle = handle;
    this.autoRelease = autoRelease;
  }

  Object.assign(PIESMSRuleManager.prototype, {
    /**
     * 设置SMS规则管理类字段
     * @param {String} fieldName -SMS规则管理类字段
     * @memberOf SMSRuleManager#
     */
    setFieldName: function setFieldName(fieldName) {
      var strFieldName = new PIEString$1(fieldName);

      Module._SMSRuleManager_SetFieldName(this.handle, strFieldName.getHandle());

      strFieldName.dispose();
    },

    /**
     * 获取SMS规则管理类字段
     *
     * @memberOf SMSRuleManager#
     * @returns {String} 返回SMS规则管理类字段
     */
    getFieldName: function getFieldName() {
      var strFieldName = new PIEString$1(256);

      Module._SMSRuleManager_GetFieldName(this.handle);

      var fieldName = strFieldName.toString();
      strFieldName.dispose();
      return fieldName;
    },

    /**
     * 通过字段值查找项
     * @param {Number} value -字段值
     * @param {PIESMSGeometryType} geometryType -几何对象类型
     *
     * @memberOf SMSRuleManager#
     * @returns {PIESMSRule} 返回指定字段值的规则项
     */
    findRule: function findRule(value, geometryType) {
      var handle = Module._SMSRuleManager_FindRule(this.handle, value, geometryType.getHandle());

      if (handle) {
        return new PIESMSRule(handle);
      }
    },

    /**
     * 获取规则项数组个数
     *
     * @memberOf SMSRuleManager#
     * @returns {Number} 返回规则项数组个数
     */
    getRuleCount: function getRuleCount() {
      return Module._SMSRuleManager_GetRuleCount(this.handle);
    },

    /**
     * 获取指定索引规则项
     * @param {Number} index -规则项数组索引
     *
     * @memberOf SMSRuleManager#
     * @returns {PIESMSRule} 返回指定索引的规则项
     */
    getRuleAt: function getRuleAt(index) {
      var handle = Module._SMSRuleManager_GetRuleAt(this.handle, index);

      if (handle) {
        return new PIESMSRule(handle);
      }
    },

    /**
     * 设置指定索引规则项
     * @param {Number} index -规则项数组索引
     * @param {PIESMSRule} rule -规则项
     * @memberOf SMSRuleManager#
     */
    setRuleAt: function setRuleAt(index, rule) {
      Module._SMSRuleManager_SetRuleAt(this.handle, index, rule.getHandle());
    },

    /**
     * 添加规则项
     * @param {PIESMSRule} rule -规则项
     * @memberOf SMSRuleManager#
     */
    addRule: function addRule(rule) {
      Module._SMSRuleManager_AddRule(this.handle, rule.getHandle());
    },

    /**
     * 移除规则项
     * @param {PIESMSRule} rule -规则项
     * @memberOf SMSRuleManager#
     */
    removeRule: function removeRule(rule) {
      Module._SMSRuleManager_RemoveRule(this.handle, rule.getHandle());
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 创建渲染器对象
   * @name SMSFeatureRenderer
   * @class SMSFeatureRenderer
   * SMS专题图渲染器操作函数
   * @extends FeatureRenderer
   */

  function PIESMSFeatureRenderer(handle, autoRelease) {
    if (handle == null) {
      handle = Module._SMSFeatureRenderer_Create();
      autoRelease = true;
    }

    PIEFeatureRenderer.call(this, handle, autoRelease);
  }

  PIESMSFeatureRenderer.prototype = Object.assign(Object.create(PIEFeatureRenderer.prototype), {
    /**
     * 制作SMS专题图
     * @param {PIEDataset} dataset -数据集对象
     * @param {Number} mapScale -数据比例尺,默认-1
     *
     * @memberOf SMSFeatureRenderer#
     * @return {Boolean} 成功返回true，否则返回false
     */
    makeDefault: function makeDefault(dataset, mapScale) {
      return Boolean(Module._SMSFeatureRenderer_MakeDefault(this.handle, dataset.getHandle(), mapScale));
    },

    /**
     * 获取子图层管理器
     *
     * @memberOf SMSFeatureRenderer#
     * @return {PIESMSSubLayerManager} 返回子图层管理器
     */
    getSubLayerManager: function getSubLayerManager() {
      var handle = Module._SMSFeatureRenderer_GetSubLayerManager(this.handle);

      if (handle) {
        return new PIESMSSubLayerManager(handle);
      }
    },
    // getSymbolRuleManager: function (){
    //     var handle = Module._SMSFeatureRenderer_GetSymbolRuleManager(this.handle);
    //     if(handle){
    //         return new PIESMSSymbolRuleManager(handle);
    //     }
    // },

    /**
     * 获取符号的最大可见比例尺
     * @memberOf SMSFeatureRenderer#
     * @return {Number} 最大可见比例尺
     */
    getMaxVisibleScale: function getMaxVisibleScale() {
      return Module._SMSFeatureRenderer_GetMaxVisibleScale(this.handle);
    },

    /**
     * 获取符号的最小可见比例尺
     * @memberOf SMSFeatureRenderer#
     * @return {Number} 最小可见比例尺
     */
    getMinVisibleScale: function getMinVisibleScale() {
      return Module._SMSFeatureRenderer_GetMinVisibleScale(this.handle);
    }
  });

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 几何对象类型枚举
   * @readonly
   * @enum {Number}
   */
  var PIESMSGeometryType = {
    /** 空类型 */
    GT_Null: 0,

    /** 点类型*/
    GT_Point: 1,

    /** 线类型 */
    GT_Line: 3,

    /** 面类型 */
    GT_Region: 5,

    /** 文本类型 */
    GT_Text: 7,

    /** 复杂面类型 */
    GL_MultiRegion: 8,

    /** 栅格块类型 */
    GT_RasterBlock: 512,

    /**复合对象*/
    GT_Compound: 1000,

    /** 圆 */
    GT_Circle: 1029,

    /** 椭圆 */
    GT_Ellipse: 1031,

    /** 矩形 */
    GT_Rectangle: 1033,

    /**三维点*/
    GT_Point3D: 2049,

    /**三维线*/
    GT_Line3D: 2051,

    /**三维面*/
    GT_Region3D: 2053,

    /**三维文本*/
    GT_Text3D: 2055,

    /**三维模型*/
    GT_Model3D: 2176,

    /**三维粒子*/
    GT_Particle3D: 2180,

    /** 复杂面类型 */
    GL_MultiRegion3D: 2056,

    /** 军标类型 */
    GL_GeoPlot: 1042
  };

  /**
   * @vuepress
   *
   * ---
   * title: PIE-Earth SDK
   * headline: 矢量渲染模块
   * ---
   */

  /**
   * 支持SMS搭配条件的值的类型枚举
   * @readonly
   * @enum {Number}
   */
  var PIEVarType = {
    /**未定义的类型*/
    Null: 0,

    /**单字节类型*/
    Byte: 1,

    /**双字节整型类型*/
    Short: 2,

    /**四字节整型类型*/
    Integer: 3,

    /**八字节整型类型*/
    Long: 4,

    /**四字节浮点类型*/
    Float: 5,

    /**八字节浮点类型*/
    Double: 6,

    /**时间类型*/
    Time: 7,

    /**二进制类型*/
    Binary: 8,

    /**字符串*/
    String: 9,

    /**日期类型*/
    Date: 10,

    /**时间戳类型*/
    TimeStamp: 11,

    /**布尔类型*/
    Boolean: 12
  };

  var VERSION = '0.7.1';

  exports.AltitudeMode = PIEAltitudeMode;
  exports.AnalyseExcavationTool = PIEAnalyseExcavationTool;
  exports.AnalyseFloodTool = PIEAnalyseFloodTool;
  exports.AnalyseSkylineTool = PIEAnalyseSkylineTool;
  exports.AnalyseTool = PIEAnalyseTool;
  exports.Array = PIEArray;
  exports.ArrayType = PIEArrayType;
  exports.BandRasterRenderer = PIEBandRasterRenderer;
  exports.BillBoardModeType = PIEBillBoardModeType;
  exports.BlinkAction = PIEBlinkAction;
  exports.BoundingBox = PIEBoundingBox;
  exports.Bounds = PIEBounds;
  exports.CharsetType = PIECharsetType;
  exports.CircleTileFeatureRenderer = PIECircleTileFeatureRenderer;
  exports.ClassifyFeatureRenderer = PIEClassifyFeatureRenderer;
  exports.ClassifyMode = PIEClassifyMode;
  exports.ClassifyRasterRenderer = PIEClassifyRasterRenderer;
  exports.Color = PIEColor;
  exports.ColorBarRasterRenderer = PIEColorBarRasterRenderer;
  exports.ColorRange = PIEColorRange;
  exports.ColormapRasterRenderer = PIEColormapRasterRenderer$1;
  exports.CreateFreeLineGlobeTool = PIECreateFreeLineGlobeTool;
  exports.CreateFreePolygonGlobeTool = PIECreateFreePolygonGlobeTool;
  exports.CreateGeometryGlobeTool = PIECreateGeometryGlobeTool;
  exports.CreateModelGlobeTool = PIECreateModelGlobeTool;
  exports.CreatePanGlobeTool = PIECreatePanGlobeTool;
  exports.CreatePlotGlobeTool = PIECreatePlotGlobeTool;
  exports.CreatePoint3DGlobeTool = PIECreatePoint3DGlobeTool;
  exports.CreatePointGlobeTool = PIECreatePointGlobeTool;
  exports.CreatePolygon3DGlobeTool = PIECreatePolygon3DGlobeTool;
  exports.CreatePolygonGlobeTool = PIECreatePolygonGlobeTool;
  exports.CreatePolyline3DGlobeTool = PIECreatePolyline3DGlobeTool;
  exports.CreatePolylineGlobeTool = PIECreatePolylineGlobeTool;
  exports.CreateRectangleGlobeTool = PIECreateRectangleGlobeTool;
  exports.CreateSectorGlobeTool = PIECreateSectorGlobeTool;
  exports.CreateTextGlobeTool = PIECreateTextGlobeTool;
  exports.CubePoint = PIECubePoint;
  exports.CyclePoint = PIECyclePoint;
  exports.DataSource = PIEDataSource;
  exports.DataSourceType = PIEDataSourceType;
  exports.DataSources = PIEDataSources;
  exports.Dataset = PIEDataset;
  exports.DatasetType = PIEDatasetType;
  exports.DensityPoint = PIEDensityPoint;
  exports.DimensionMode = PIEDimensionMode;
  exports.Document = PIEDocument;
  exports.DynamicFeature = PIEDynamicFeature;
  exports.DynamicStreamLineRenderData = PIEDynamicStreamLineRenderData;
  exports.EditAction = PIEEditAction;
  exports.EditGlobeTool = PIEEditGlobeTool;
  exports.EditMode = PIEEditMode;
  exports.Editor = PIEEditor;
  exports.Environment = PIEEnvironment;
  exports.Event = PIEEvent;
  exports.Feature = PIEFeature;
  exports.FeatureDataSource = PIEFeatureDataSource;
  exports.FeatureDataset = PIEFeatureDataset;
  exports.FeatureRenderType = PIEFeatureRenderType;
  exports.FeatureRenderer = PIEFeatureRenderer;
  exports.FeatureSet = PIEFeatureSet;
  exports.FieldInfo = PIEFieldInfo;
  exports.FieldType = PIEFieldType;
  exports.File = PIEFile;
  exports.FillEffect = PIEFillEffect;
  exports.FillModeType = PIEFillModeType;
  exports.FillSymbol = PIEFillSymbol;
  exports.FillTileFeatureRenderer = PIEFillTileFeatureRenderer;
  exports.FillType = PIEFillType;
  exports.GEDataSource = PIEGEDataSource;
  exports.GSFDataSource = PIEGSFDataSource;
  exports.GdalFeatureDataSource = PIEGdalFeatureDataSource;
  exports.GdalRasterDataSource = PIEGdalRasterDataSource;
  exports.GeoJsonDataSource = PIEGeoJsonDataSource;
  exports.GeoPlot = PIEGeoPlot;
  exports.GeoTexture = PIEGeoTexture;
  exports.Geometry = PIEGeometry;
  exports.Geometry3D = PIEGeometry3D;
  exports.GeometryFactory = PIEGeometryFactory;
  exports.GeometryType = PIEGeometryType;
  exports.Globe = PIEGlobe;
  exports.GlobeBackground = PIEGlobeBackground;
  exports.GlobeBaseFeatureLayer = PIEGlobeBaseFeatureLayer;
  exports.GlobeBaseRasterLayer = PIEGlobeBaseRasterLayer;
  exports.GlobeBaseTileLayer = PIEGlobeBaseTileLayer;
  exports.GlobeCircleTileLayer = PIEGlobeCircleTileLayer;
  exports.GlobeColorEffectFilter = PIEGlobeColorEffectFilter;
  exports.GlobeCompositeLayer = PIEGlobeCompositeLayer;
  exports.GlobeControl = PIEGlobeControl;
  exports.GlobeDynamicLayer = PIEGlobeDynamicLayer;
  exports.GlobeEffectComposer = PIEGlobeEffectComposer;
  exports.GlobeElement = PIEGlobeElement;
  exports.GlobeElementType = PIEGlobeElementType;
  exports.GlobeElevationLayer = PIEGlobeElevationLayer;
  exports.GlobeFeatureElement = PIEGlobeFeatureElement;
  exports.GlobeFeatureLayer = PIEGlobeFeatureLayer;
  exports.GlobeFeatureMapLayer = PIEGlobeFeatureMapLayer;
  exports.GlobeFillTileLayer = PIEGlobeFillTileLayer;
  exports.GlobeFragMaskEffectFilter = PIEGlobeFragMaskEffectFilter;
  exports.GlobeGraphicsLayer = PIEGlobeGraphicsLayer;
  exports.GlobeGridLine = PIEGlobeGridLine;
  exports.GlobeGroupLayer = PIEGlobeGroupLayer;
  exports.GlobeHalo = PIEGlobeHalo;
  exports.GlobeLayer = PIEGlobeLayer;
  exports.GlobeLayerType = PIEGlobeLayerType;
  exports.GlobeLineTileLayer = PIEGlobeLineTileLayer;
  exports.GlobeMVTLayer = PIEGlobeMVTLayer;
  exports.GlobeModel = PIEGlobeModel;
  exports.GlobeModelLayer = PIEGlobeModelLayer;
  exports.GlobeOSGBModelLayer = PIEGlobeOSGBModelLayer;
  exports.GlobeOcean = PIEGlobeOcean;
  exports.GlobePlotLayer = PIEGlobePlotLayer;
  exports.GlobeRasterLayer = PIEGlobeRasterLayer;
  exports.GlobeRenderableLayer = PIEGlobeRenderableLayer;
  exports.GlobeSeamapLayer = PIEGlobeSeamapLayer;
  exports.GlobeSharderEffectFilter = PIEGlobeSharderEffectFilter;
  exports.GlobeSymbolTileLayer = PIEGlobeSymbolTileLayer;
  exports.GlobeTileGEDataLayer = PIEGlobeTileGEDataLayer;
  exports.GlobeTileMapLayer = PIEGlobeTileMapLayer;
  exports.GlobeTileRasterLayer = PIEGlobeTileRasterLayer;
  exports.GlobeTiles3DModelLayer = PIEGlobeTiles3DModelLayer;
  exports.GlobeToolStatus = PIEGlobeToolStatus;
  exports.GlobeToolType = PIEGlobeToolType;
  exports.GlobeViewer = PIEGlobeViewer;
  exports.Globes = PIEGlobes;
  exports.GraduallyActionType = PIEGraduallyActionType;
  exports.GroupDensity = PIEGroupDensity;
  exports.IconSymbol = PIEIconSymbol;
  exports.IntIndexData = PIEIntIndexData;
  exports.LabelPosType = PIELabelPosType;
  exports.LineJoinStyle = PIELineJoinStyle;
  exports.LineSymbol = PIELineSymbol;
  exports.LineTileFeatureRenderer = PIELineTileFeatureRenderer;
  exports.LineType = PIELineType;
  exports.MVTDataSource = PIEMVTDataSource;
  exports.MapTerrainDataSource = PIEMapTerrainDataSource;
  exports.MarkerSymbol = PIEMarkerSymbol;
  exports.Material = PIEMaterial;
  exports.Math = PIEMath;
  exports.Matrix3 = PIEMatrix3;
  exports.Matrix4 = PIEMatrix4;
  exports.MeasureAngleGlobeTool = PIEMeasureAngleGlobeTool;
  exports.MeasureAreaGlobeTool = PIEMeasureAreaGlobeTool;
  exports.MeasureAzimuthAngleTool = PIEMeasureAzimuthAngleTool;
  exports.MeasureLengthGlobeTool = PIEMeasureLengthGlobeTool;
  exports.MeasureOSGBAngleGlobeTool = PIEMeasure3DAngleGlobeTool;
  exports.MeasureOSGBAreaGlobeTool = PIEMeasure3DAreaGlobeTool;
  exports.MeasureOSGBHeightGlobeTool = PIEMeasure3DHeightGlobeTool;
  exports.MeasureOSGBLengthGlobeTool = PIEMeasure3DLengthGlobeTool;
  exports.Mesh = PIEMesh;
  exports.MeshRenderData = PIEMeshRenderData;
  exports.Model3D = PIEModel3D;
  exports.ModelDataSource = PIEModelDataSource;
  exports.ModelMesh = PIEModelMesh;
  exports.ModelStyle = PIEModelStyle;
  exports.ModelSymbol = PIEModelSymbol;
  exports.MoveToAction = PIEMoveToAction;
  exports.MultiPolygon = PIEMultiPolygon;
  exports.NightLight = PIENightLight;
  exports.OSGBDataSource = PIEOSGBDataSource;
  exports.OperationType = PIEOperationType;
  exports.OutLinePosType = PIEOutLinePosType;
  exports.PIEOutLineStyleType = PIEOutLineStyleType;
  exports.Pass = PIEPass;
  exports.PlotAction = PIEPlotAction;
  exports.PlotActionType = PIEPlotActionType;
  exports.PlotGraduallyAction = PIEPlotGraduallyAction;
  exports.PlotGraduallyActionEx = PIEPlotGraduallyActionEx;
  exports.PlotGrowAction = PIEPlotGrowAction;
  exports.PlotGrowActionEx = PIEPlotGrowActionEx;
  exports.PlotMoveAction = PIEPlotMoveAction;
  exports.PlotRotateAction = PIEPlotRotateAction;
  exports.PlotScaleAction = PIEPlotScaleAction;
  exports.PlotStyle = PIEPlotStyle;
  exports.PlotWipeAction = PIEPlotWipeAction;
  exports.Point = PIEPoint;
  exports.Point3D = PIEPoint3D;
  exports.PointAlignType = PIEPointAlignType;
  exports.PointType = PIEPointType;
  exports.Polygon = PIEPolygon;
  exports.Polygon3D = PIEPolygon3D;
  exports.Polyline = PIEPolyline;
  exports.Polyline3D = PIEPolyline3D;
  exports.ProcessMode = PIEProcessMode;
  exports.ProductVersion = PIEProductVersion;
  exports.ProfileGlobeTool = PIEProfileGlobeTool;
  exports.Projection = PIEProjection;
  exports.Projector = PIEProjector;
  exports.Quaternion4 = PIEQuaternion4;
  exports.RadarDisturbMsg = PIERadarDisturbMsg;
  exports.RadarMsg = PIERadarMsg;
  exports.RangeItem = PIERangeItem;
  exports.RasterBlock = PIERasterBlock;
  exports.RasterDataSource = PIERasterDataSource;
  exports.RasterRenderData = PIERasterRenderData;
  exports.RasterRendererType = PIERasterRendererType;
  exports.Rect = PIERect;
  exports.ReferenceTranslator = PIEReferenceTranslator;
  exports.ReflectManager = PIEReflectManager;
  exports.RenderCanvas = PIERenderCanvas;
  exports.RenderCubeSet = PIERenderCubeSet;
  exports.RenderCycleSet = PIERenderCycleSet;
  exports.RenderDensitySet = PIERenderDensitySet;
  exports.RenderGeometry = PIERenderGeometry;
  exports.RenderGridSet = PIERenderGridSet;
  exports.RenderGroupDensitySet = PIERenderGroupDensitySet;
  exports.RenderLineCycleSet = PIERenderLineCycleSet;
  exports.RenderListCubeSet = PIERenderListCubeSet;
  exports.RenderListDensitySet = PIERenderListDensitySet;
  exports.RenderModel = PIERenderModel;
  exports.RenderPlot = PIERenderPlot;
  exports.RenderPoint = PIERenderPoint;
  exports.RenderPoint3D = PIERenderPoint3D;
  exports.RenderPointCycleSet = PIERenderPointCycleSet;
  exports.RenderPointGridSet = PIERenderPointGridSet;
  exports.RenderPolygon = PIERenderPolygon;
  exports.RenderPolygon3D = PIERenderPolygon3D;
  exports.RenderPolyline = PIERenderPolyline;
  exports.RenderPolyline3D = PIERenderPolyline3D;
  exports.RenderRadar = PIERenderRadar;
  exports.RenderRadarGroup = PIERenderRadarGroup;
  exports.RenderRiver = PIERenderRiver;
  exports.RenderSysLineCycleSet = PIERenderSysLineCycleSet;
  exports.RenderText = PIERenderText;
  exports.RenderText3D = PIERenderText3D;
  exports.RenderWater = PIERenderWater;
  exports.RenderWorldListDensitySet = PIERenderWorldListDensitySet;
  exports.RenderWorldPointCycleSet = PIERenderWorldPointCycleSet;
  exports.RepeatForeverAction = PIERepeatForeverAction;
  exports.RotationToAction = PIERotationToAction;
  exports.SMSDataSource = PIESMSDataSource;
  exports.SMSFeatureRenderer = PIESMSFeatureRenderer;
  exports.SMSGeometryType = PIESMSGeometryType;
  exports.SMSMatchCondition = PIESMSMatchCondition;
  exports.SMSRule = PIESMSRule;
  exports.SMSRuleManager = PIESMSRuleManager;
  exports.SMSSubLayer = PIESMSSubLayer;
  exports.SMSSubLayerManager = PIESMSSubLayerManager;
  exports.SceneMode = PIESceneMode;
  exports.SequenceAction = PIESequenceAction;
  exports.ShortIndexData = PIEShortIndexData;
  exports.ShpDataSource = PIEShpDataSource;
  exports.SimpleFeatureRenderer = PIESimpleFeatureRenderer;
  exports.Size = PIESize;
  exports.SkyDome = PIESkyDome;
  exports.SlopeAspectTool = PIESlopeAspectTool;
  exports.SpatialRefType = PIESpatialRefType;
  exports.SpatialReference = PIESpatialReference;
  exports.SpeedAction = PIESpeedAction;
  exports.Star = PIEStar;
  exports.StretchType = PIEStretchType;
  exports.String = PIEString$1;
  exports.Style = PIEStyle;
  exports.StyleFactory = PIEStyleFactory;
  exports.StyleType = PIEStyleType;
  exports.SunLight = PIESunLight;
  exports.Symbol = PIESymbol;
  exports.SymbolGroup = PIESymbolGroup;
  exports.SymbolGroupType = PIESymbolGroupType;
  exports.SymbolLib = PIESymbolLib;
  exports.SymbolPlotType = PIESymbolPlotType;
  exports.SymbolSizeMode = PIESymbolSizeMode;
  exports.SymbolStyle = PIESymbolStyle;
  exports.SymbolTileFeatureRenderer = PIESymbolTileFeatureRenderer;
  exports.SymbolType = PIESymbolType;
  exports.TerrainDataSource = PIETerrainDataSource;
  exports.Text = PIEText;
  exports.Text3D = PIEText3D;
  exports.TextAlignType = PIETextAlignType;
  exports.TextStyle = PIETextStyle;
  exports.Texture = PIETexture;
  exports.TextureFilterMode = PIETextureFilterMode;
  exports.TextureWrapMode = PIETextureWrapMode;
  exports.ThemeLabelFeatureRenderer = PIEThemeLabelFeatureRenderer;
  exports.ThemeRangeFeatureRenderer = PIEThemeRangeFeatureRenderer;
  exports.TileFeatureRenderer = PIETileFeatureRenderer;
  exports.TileRasterDataSource = PIETileRasterDataSource;
  exports.Tiles3DDataSource = PIETiles3DDataSource;
  exports.TraceList = PIETraceList;
  exports.UnderWater = PIEUnderWater;
  exports.VERSION = VERSION;
  exports.VarType = PIEVarType;
  exports.Vector2 = PIEVector2;
  exports.Vector3 = PIEVector3;
  exports.Vector4 = PIEVector4;
  exports.VectorStyle = PIEVectorStyle;
  exports.VertexData = PIEVertexData;
  exports.VolumeRayCast = PIEVolumeRayCast;
  exports.WeatherDynamicStreamLineRender = PIEWeatherDynamicStreamLineRender;
  exports.WeatherMeshRender = PIEWeatherMeshRender;
  exports.WeatherRasterRender = PIEWeatherRasterRender;
  exports.WeatherRender = PIEWeatherRender;
  exports.WeatherRenderData = PIEWeatherRenderData;
  exports.WeatherStationFillRender = PIEWeatherStationFillRender;
  exports.WipeActionType = PIEWipeActionType;
  exports.WorldCamera = PIEWorldCamera;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=PIEMap.js.map
