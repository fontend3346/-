import { onMounted, ref, reactive, getCurrentInstance, onBeforeMount, watch } from "vue";
import { Emits, Props } from "./interfaces";
import * as echarts from "echarts";
// 操作
export const useHandler = (props: Props, emit: Emits) => {
  const {
    appContext: {
      config: { globalProperties },
    },
  } = getCurrentInstance() as any;
  let myChart: any = ref()
  const state = reactive({
    data1: [
      ['2019-11-1 00:00:01',],

      ['2019-11-1 01:00:20', 31],
      ['2019-11-1 01:03:20', 33],
      ['2019-11-1 01:06:20', 34],
      ['2019-11-1 01:09:20', 35],
      ['2019-11-1 01:12:20', 31],
      ['2019-11-1 01:15:20', 31],
      ['2019-11-1 01:18:20', 35],
      ['2019-11-1 01:21:20', 31],
      ['2019-11-1 01:24:20', 31],
      ['2019-11-1 01:27:20', 34],
      ['2019-11-1 01:30:20', 32],
      ['2019-11-1 01:33:20', 32],
      ['2019-11-1 01:36:20', 39],
      ['2019-11-1 01:39:20', 31],
      ['2019-11-1 01:42:20', 36],
      ['2019-11-1 01:45:20', 37],
      ['2019-11-1 01:48:20', 38],
      ['2019-11-1 01:51:20', 32],
      ['2019-11-1 01:54:20', 31],
      ['2019-11-1 01:57:20', 27],

      ['2019-11-1 02:00:20', 31],
      ['2019-11-1 02:03:20', 33],
      ['2019-11-1 02:06:20', 34],
      ['2019-11-1 02:09:20', 35],
      ['2019-11-1 02:12:20', 31],
      ['2019-11-1 02:15:20', 31],
      ['2019-11-1 02:18:20', 35],
      ['2019-11-1 02:21:20', 31],
      ['2019-11-1 02:24:20', 31],
      ['2019-11-1 02:27:20', 34],
      ['2019-11-1 02:30:20', 32],
      ['2019-11-1 02:33:20', 32],
      ['2019-11-1 02:36:20', 39],
      ['2019-11-1 02:39:20', 31],
      ['2019-11-1 02:42:20', 36],
      ['2019-11-1 02:45:20', 37],
      ['2019-11-1 02:48:20', 38],
      ['2019-11-1 02:51:20', 32],
      ['2019-11-1 02:54:20', 31],
      ['2019-11-1 02:57:20', 27],


      ['2019-11-1 03:57:20',],

      ['2019-11-1 13:00:20', 32.1],
      ['2019-11-1 13:03:20', 32.2],
      ['2019-11-1 13:06:20', 32.3],
      ['2019-11-1 13:09:20', 32.3],
      ['2019-11-1 13:12:20', 32.5],
      ['2019-11-1 13:15:20', 32.4],
      ['2019-11-1 13:18:20', 32.5],
      ['2019-11-1 13:21:20', 32.6],
      ['2019-11-1 13:24:20', 32.7],
      ['2019-11-1 13:27:20', 32.7],
      ['2019-11-1 13:30:20', 32.8],
      ['2019-11-1 13:33:20', 32.9],
      ['2019-11-1 13:36:20', 33.1],
      ['2019-11-1 13:39:20', 33.2],
      ['2019-11-1 13:42:20', 33.3],
      ['2019-11-1 13:45:20', 33.4],
      ['2019-11-1 13:48:20', 33.5],
      ['2019-11-1 13:51:20', 33.6],
      ['2019-11-1 13:54:20', 33.7],
      ['2019-11-1 13:57:20', 33.8],


      ['2019-11-1 14:00:20', 34.1],
      ['2019-11-1 14:03:20', 34.2],
      ['2019-11-1 14:06:20', 34.3],
      ['2019-11-1 14:09:20', 34.3],
      ['2019-11-1 14:12:20', 34.5],
      ['2019-11-1 14:15:20', 34.4],
      ['2019-11-1 14:18:20', 34.5],
      ['2019-11-1 14:21:20', 34.6],
      ['2019-11-1 14:24:20', 34.7],
      ['2019-11-1 14:27:20', 34.7],
      ['2019-11-1 14:30:20', 34.8],
      ['2019-11-1 14:33:20', 34.9],
      ['2019-11-1 14:36:20', 35.1],
      ['2019-11-1 14:39:20', 35.2],
      ['2019-11-1 14:42:20', 35.3],
      ['2019-11-1 14:45:20', 35.4],
      ['2019-11-1 14:48:20', 35.5],
      ['2019-11-1 14:51:20', 35.6],
      ['2019-11-1 14:54:20', 35.7],
      ['2019-11-1 14:57:20', 35.8],


      ['2019-11-1 15:00:20', 36.1],
      ['2019-11-1 15:03:20', 36.2],
      ['2019-11-1 15:06:20', 36.3],
      ['2019-11-1 15:09:20', 36.3],
      ['2019-11-1 15:12:20', 36.5],
      ['2019-11-1 15:15:20', 36.4],
      ['2019-11-1 15:18:20', 36.5],
      ['2019-11-1 15:21:20', 36.6],
      ['2019-11-1 15:24:20', 36.7],
      ['2019-11-1 15:27:20', 36.7],
      ['2019-11-1 15:30:20', 36.8],
      ['2019-11-1 15:33:20', 36.9],
      ['2019-11-1 15:36:20', 37.1],
      ['2019-11-1 15:39:20', 37.2],
      ['2019-11-1 15:42:20', 37.3],
      ['2019-11-1 15:45:20', 37.4],
      ['2019-11-1 15:48:20', 37.5],
      ['2019-11-1 15:51:20', 37.6],
      ['2019-11-1 15:54:20', 37.7],
      ['2019-11-1 15:57:20', 37.8],

      ['2019-11-1 16:00:20', 38.1],
      ['2019-11-1 16:03:20', 38.2],
      ['2019-11-1 16:06:20', 38.3],
      ['2019-11-1 16:09:20', 38.3],
      ['2019-11-1 16:12:20', 38.5],
      ['2019-11-1 16:15:20', 38.4],
      ['2019-11-1 16:18:20', 38.5],
      ['2019-11-1 16:21:20', 38.6],
      ['2019-11-1 16:24:20', 38.7],
      ['2019-11-1 16:27:20', 38.7],
      ['2019-11-1 16:30:20', 38.8],
      ['2019-11-1 16:33:20', 38.9],
      ['2019-11-1 16:36:20', 39.1],
      ['2019-11-1 16:39:20', 39.2],
      ['2019-11-1 16:42:20', 39.3],
      ['2019-11-1 16:45:20', 39.4],
      ['2019-11-1 16:48:20', 39.5],
      ['2019-11-1 16:51:20', 39.6],
      ['2019-11-1 16:54:20', 39.7],
      ['2019-11-1 16:57:20', 39.8],


      ['2019-11-1 17:00:20', 40.1],
      ['2019-11-1 17:03:20', 39.9],
      ['2019-11-1 17:06:20', 39.8],
      ['2019-11-1 17:09:20', 39.7],
      ['2019-11-1 17:12:20', 39.6],
      ['2019-11-1 17:15:20', 39.5],
      ['2019-11-1 17:18:20', 39.4],
      ['2019-11-1 17:21:20', 39.3],
      ['2019-11-1 17:24:20', 39.2],
      ['2019-11-1 17:27:20', 39.1],
      ['2019-11-1 17:30:20', 39.2],
      ['2019-11-1 17:33:20', 39.1],
      ['2019-11-1 17:36:20', 38.9],
      ['2019-11-1 17:39:20', 38.8],
      ['2019-11-1 17:42:20', 38.7],
      ['2019-11-1 17:45:20', 38.6],
      ['2019-11-1 17:48:20', 38.5],
      ['2019-11-1 17:51:20', 38.4],
      ['2019-11-1 17:54:20', 38.3],
      ['2019-11-1 17:57:20', 38.2],

      ['2019-11-1 18:00:20', 38.1],
      ['2019-11-1 18:03:20', 37.9],
      ['2019-11-1 18:06:20', 37.8],
      ['2019-11-1 18:09:20', 37.7],
      ['2019-11-1 18:12:20', 37.6],
      ['2019-11-1 18:15:20', 37.5],
      ['2019-11-1 18:18:20', 37.4],
      ['2019-11-1 18:21:20', 37.3],
      ['2019-11-1 18:24:20', 37.2],
      ['2019-11-1 18:27:20', 37.1],
      ['2019-11-1 18:30:20', 37.2],
      ['2019-11-1 18:33:20', 37.1],
      ['2019-11-1 18:36:20', 36.9],
      ['2019-11-1 18:39:20', 36.8],
      ['2019-11-1 18:42:20', 36.7],
      ['2019-11-1 18:45:20', 36.6],
      ['2019-11-1 18:48:20', 36.5],
      ['2019-11-1 18:51:20', 36.4],
      ['2019-11-1 18:54:20', 36.3],
      ['2019-11-1 18:57:20', 36.2],


      ['2019-11-1 19:00:20', 36.1],
      ['2019-11-1 19:03:20', 35.9],
      ['2019-11-1 19:06:20', 35.8],
      ['2019-11-1 19:09:20', 35.7],
      ['2019-11-1 19:12:20', 35.6],
      ['2019-11-1 19:15:20', 35.5],
      ['2019-11-1 19:18:20', 35.4],
      ['2019-11-1 19:21:20', 35.3],
      ['2019-11-1 19:24:20', 35.2],
      ['2019-11-1 19:27:20', 35.1],
      ['2019-11-1 19:30:20', 35.2],
      ['2019-11-1 19:33:20', 35.1],
      ['2019-11-1 19:36:20', 34.9],
      ['2019-11-1 19:39:20', 34.8],
      ['2019-11-1 19:42:20', 34.7],
      ['2019-11-1 19:45:20', 34.6],
      ['2019-11-1 19:48:20', 34.5],
      ['2019-11-1 19:51:20', 34.4],
      ['2019-11-1 19:54:20', 34.3],
      ['2019-11-1 19:57:20', 34.2],

      ['2019-11-2 00:00:00',],


    ],
    data2: [
      ['2019-11-1 00:00:01',],

      ['2019-11-1 01:00:20', 10],
      ['2019-11-1 02:00:20', 5],
      ['2019-11-1 03:00:20', 3],
      ['2019-11-1 04:00:20',],
      ['2019-11-1 13:00:20', 5],
      ['2019-11-1 14:00:20', 15],
      ['2019-11-1 15:00:20', 30],
      ['2019-11-1 16:00:20', 45],
      ['2019-11-1 17:00:20', 65],
      ['2019-11-1 18:00:20', 45],
      ['2019-11-1 19:00:20', 30],
      ['2019-11-1 20:00:20', 15],

      ['2019-11-2 00:00:00',],
    ],
    // data2: [134, 133, 132, 133, 129, 93, 90, 93, 82],
    imageList: <any>[],//影像数组 echart图例的数据
    airNum: <any>[],//某个影像上的所有飞机数据
    echartSeries: <any>[],//放在echart series配置项里的数据
    xName: [],//echart的x轴项
  })
  const cancel = () => {

    emit("cancel")
    emit("update:visible", false);
  }

  // // 获取最大值方法
  // const calMax = (arr) => {
  //   var max = Math.max.apply(null, arr); // 获取最大值方法
  //   var maxint = Math.ceil(max / 5); // 向上以5的倍数取整
  //   var maxval = maxint * 5 + 5; // 最终设置的最大值
  //   return maxval; // 输出最大值
  // }
  // // 获取最小值方法
  // const calMin = (arr) => {
  //   var min = Math.min.apply(null, arr); // 获取最小值方法
  //   var minint = Math.floor(min / 1); // 向下以1的倍数取整
  //   var minval = minint * 1 - 5; // 最终设置的最小值
  //   return minval; // 输出最小值
  // }
  // // 调用方法，获取数据的最大值&最小值
  // var maxData1 = calMax(state.data1);
  // var maxData2 = calMax(state.data2);
  // var minData1 = calMin(state.data1);
  // var minData2 = calMin(state.data2);


  //echart数据
  const lineChart = reactive({
    // 图例组件
    legend: [
      {
        top: "7%",
        left: "45%",
        textStyle: {
          fontSize: 12, //字体大小
          color: "#" //字体颜色（图例与图例文字配色保持一致）
        },
        data: [
          {
            name: "B1I"
          }
        ]
      },
      {
        top: "7%",
        left: "50%",
        textStyle: {
          fontSize: 12, //字体大小
          color: "#" //字体颜色
        },
        data: [
          {
            name: "EL"
          }
        ]
      }
    ],
    tooltip: {
      trigger: 'axis'
    },
    // 直角坐标系内绘图网格
    grid: {
      left: "6%",
      right: "6%", //坐标轴图表在echartbox中的位置
      top: "15%",
      containLabel: true,
      show: true,
      // x: 120,
      // y: 70,
      // x2: 120,
      // y2: 70
    },
    xAxis: {
      // color: "#98dcff",
      name: "时间",
      type: "time",
      data: ["10", "20", "30", "40", "50", "60", "70", "80", "90"],
      nameTextStyle: {
        padding: [20, 0, 0, 0],
        fontSize: 18,
        color: "#98dcff"
      },
      nameLocation: "middle",
      axisLabel: {
        textStyle: {
          color: "#98dcff", //更改坐标轴文字颜色
          fontSize: 13, //更改坐标轴文字大小
        },
      }
    },
    yAxis: [
      {
        type: "value",
        name: "信噪比/dbHz",
        nameTextStyle: {
          // padding: [0, 0, -55, -150]
          fontSize: 18,
          color: "#98dcff"
        },
        splitLine: {
          show: false, //Y轴背景线
          lineStyle: {
            color: "#b7b7b8",
            type: "dashed",
          },
        },
        axisTick: {
          show: true,  //坐标轴刻度线
          textStyle: {
            color: "#98dcff", //更改坐标轴文字颜色
          },
        },
        min: 0,
        max: 60,
        splitNumber: 6, //设置坐标轴的分割段数
        interval: 10, // 标轴分割间隔
        axisLabel: {
          formatter: function (v) {
            return v.toFixed(1); //0表示小数为0位，1表示1位小数，2表示2位小数
          },
          textStyle: {
            color: "#98dcff", //更改坐标轴文字颜色
            fontSize: 13, //更改坐标轴文字大小
          },
          // color: function (value, index) {
          //   return value >= 1000 ? "red" : "green";
          // }
        }
      },
      {
        type: "value",
        name: "高度角/度",
        nameTextStyle: {
          // padding: [0, 50, -50, 200]
          fontSize: 18,
          color: "#98dcff"
        },
        splitLine: {
          show: false, //Y轴背景线
          lineStyle: {
            color: "#b7b7b8",
            type: "dashed",
          },
        },
        axisTick: {
          show: true,  //坐标轴刻度线
          textStyle: {
            color: "#98dcff", //更改坐标轴文字颜色
          },
        },
        // min: minData2,
        // max: maxData2,
        splitNumber: 6,
        // interval: (maxData2 - minData2) / 6,
        axisLabel: {
          formatter: function (v) {
            return v.toFixed(2); //0表示小数为0位，1表示1位小数，2表示2位小数
          },
          textStyle: {
            color: "#98dcff", //更改坐标轴文字颜色
            fontSize: 13, //更改坐标轴文字大小
          },
        }
      }
    ],
    series: [
      {
        name: "B1I",
        type: "line",
        color: ["#eb9f0d"],
        symbol: "circle",
        symbolSize: 7,
        smooth: false,
        data: state.data1
      },
      {
        name: "EL",
        type: "line",
        color: ["#969ac7"],
        // symbol: "none",
        symbol: "circle",
        symbolSize: 7,
        smooth: true,//折线/曲线
        yAxisIndex: 1, //在单个图表实例中存在多个y轴的时候有用
        data: state.data2
      }
    ]
  });
  //折线图线条样式
  const echartSymbol = ['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'];
  const initEchart = () => {
    let myChartDom = myChart.value;
    let myEchart = echarts.init(myChartDom);
    myEchart.setOption(lineChart)
    // myEchart.setOption(props.options)

  }
  watch(
    () => props.options,
    (newValue, oldValue) => { initEchart(); },
    { deep: true, }
  );


  onMounted(() => {
    initEchart();
  });

  // onBeforeMount(() => {
  //     isTime();
  //   });

  return {
    initEchart, myChart, state, lineChart, cancel
  };
};
